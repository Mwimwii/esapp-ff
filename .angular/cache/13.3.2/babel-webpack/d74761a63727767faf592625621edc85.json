{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _toConsumableArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _defineProperty from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport { __decorate } from 'tslib';\nimport { RIGHT_ARROW, UP_ARROW, LEFT_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, Input, EventEmitter, forwardRef, Optional, ViewChildren, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { takeUntil, filter, tap, pluck, map, distinctUntilChanged } from 'rxjs/operators';\nimport { InputBoolean, InputNumber, ensureNumberInRange, silentEvent, getPrecision, getPercent, getElementOffset, isNil, arraysEqual } from 'ng-zorro-antd/core/util';\nimport * as i2 from 'ng-zorro-antd/tooltip';\nimport { NzTooltipDirective, NzToolTipModule } from 'ng-zorro-antd/tooltip';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2$1 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar _c0 = [\"handle\"];\n\nfunction NzSliderStepComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    var mark_r1 = ctx.$implicit;\n    i0.ɵɵclassProp(\"ant-slider-dot-active\", mark_r1.active);\n    i0.ɵɵproperty(\"ngStyle\", mark_r1.style);\n  }\n}\n\nfunction NzSliderMarksComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    var attr_r1 = ctx.$implicit;\n    i0.ɵɵclassProp(\"ant-slider-mark-active\", attr_r1.active);\n    i0.ɵɵproperty(\"ngStyle\", attr_r1.style)(\"innerHTML\", attr_r1.label, i0.ɵɵsanitizeHtml);\n  }\n}\n\nvar _c1 = [\"slider\"];\n\nfunction NzSliderComponent_nz_slider_step_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-slider-step\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"vertical\", ctx_r1.nzVertical)(\"min\", ctx_r1.nzMin)(\"max\", ctx_r1.nzMax)(\"lowerBound\", ctx_r1.bounds.lower)(\"upperBound\", ctx_r1.bounds.upper)(\"marksArray\", ctx_r1.marksArray)(\"included\", ctx_r1.nzIncluded)(\"reverse\", ctx_r1.nzReverse);\n  }\n}\n\nfunction NzSliderComponent_nz_slider_handle_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"nz-slider-handle\", 7);\n    i0.ɵɵlistener(\"focusin\", function NzSliderComponent_nz_slider_handle_5_Template_nz_slider_handle_focusin_0_listener() {\n      var restoredCtx = i0.ɵɵrestoreView(_r7);\n      var handleIndex_r5 = restoredCtx.index;\n      var ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.onHandleFocusIn(handleIndex_r5);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var handle_r4 = ctx.$implicit;\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"vertical\", ctx_r2.nzVertical)(\"reverse\", ctx_r2.nzReverse)(\"offset\", handle_r4.offset)(\"value\", handle_r4.value)(\"active\", handle_r4.active)(\"tooltipFormatter\", ctx_r2.nzTipFormatter)(\"tooltipVisible\", ctx_r2.nzTooltipVisible)(\"tooltipPlacement\", ctx_r2.nzTooltipPlacement)(\"dir\", ctx_r2.dir);\n  }\n}\n\nfunction NzSliderComponent_nz_slider_marks_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-slider-marks\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"vertical\", ctx_r3.nzVertical)(\"min\", ctx_r3.nzMin)(\"max\", ctx_r3.nzMax)(\"lowerBound\", ctx_r3.bounds.lower)(\"upperBound\", ctx_r3.bounds.upper)(\"marksArray\", ctx_r3.marksArray)(\"included\", ctx_r3.nzIncluded)(\"reverse\", ctx_r3.nzReverse);\n  }\n}\n\nvar NzSliderService = /*#__PURE__*/_createClass(function NzSliderService() {\n  _classCallCheck(this, NzSliderService);\n\n  this.isDragging = false;\n});\n\nNzSliderService.ɵfac = function NzSliderService_Factory(t) {\n  return new (t || NzSliderService)();\n};\n\nNzSliderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NzSliderService,\n  factory: NzSliderService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSliderService, [{\n    type: Injectable\n  }], null, null);\n})();\n\nvar NzSliderHandleComponent = /*#__PURE__*/function () {\n  function NzSliderHandleComponent(sliderService, cdr) {\n    var _this = this;\n\n    _classCallCheck(this, NzSliderHandleComponent);\n\n    this.sliderService = sliderService;\n    this.cdr = cdr;\n    this.tooltipVisible = 'default';\n    this.active = false;\n    this.dir = 'ltr';\n    this.style = {};\n\n    this.enterHandle = function () {\n      if (!_this.sliderService.isDragging) {\n        _this.toggleTooltip(true);\n\n        _this.updateTooltipPosition();\n\n        _this.cdr.detectChanges();\n      }\n    };\n\n    this.leaveHandle = function () {\n      if (!_this.sliderService.isDragging) {\n        _this.toggleTooltip(false);\n\n        _this.cdr.detectChanges();\n      }\n    };\n  }\n\n  _createClass(NzSliderHandleComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this2 = this;\n\n      var offset = changes.offset,\n          value = changes.value,\n          active = changes.active,\n          tooltipVisible = changes.tooltipVisible,\n          reverse = changes.reverse,\n          dir = changes.dir;\n\n      if (offset || reverse || dir) {\n        this.updateStyle();\n      }\n\n      if (value) {\n        this.updateTooltipTitle();\n        this.updateTooltipPosition();\n      }\n\n      if (active) {\n        if (active.currentValue) {\n          this.toggleTooltip(true);\n        } else {\n          this.toggleTooltip(false);\n        }\n      }\n\n      if ((tooltipVisible === null || tooltipVisible === void 0 ? void 0 : tooltipVisible.currentValue) === 'always') {\n        Promise.resolve().then(function () {\n          return _this2.toggleTooltip(true, true);\n        });\n      }\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var _a;\n\n      (_a = this.handleEl) === null || _a === void 0 ? void 0 : _a.nativeElement.focus();\n    }\n  }, {\n    key: \"toggleTooltip\",\n    value: function toggleTooltip(show) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _a, _b;\n\n      if (!force && (this.tooltipVisible !== 'default' || !this.tooltip)) {\n        return;\n      }\n\n      if (show) {\n        (_a = this.tooltip) === null || _a === void 0 ? void 0 : _a.show();\n      } else {\n        (_b = this.tooltip) === null || _b === void 0 ? void 0 : _b.hide();\n      }\n    }\n  }, {\n    key: \"updateTooltipTitle\",\n    value: function updateTooltipTitle() {\n      this.tooltipTitle = this.tooltipFormatter ? this.tooltipFormatter(this.value) : \"\".concat(this.value);\n    }\n  }, {\n    key: \"updateTooltipPosition\",\n    value: function updateTooltipPosition() {\n      var _this3 = this;\n\n      if (this.tooltip) {\n        Promise.resolve().then(function () {\n          var _a;\n\n          return (_a = _this3.tooltip) === null || _a === void 0 ? void 0 : _a.updatePosition();\n        });\n      }\n    }\n  }, {\n    key: \"updateStyle\",\n    value: function updateStyle() {\n      var _ref;\n\n      var vertical = this.vertical;\n      var reverse = this.reverse;\n      var offset = this.offset;\n      var positionStyle = vertical ? (_ref = {}, _defineProperty(_ref, reverse ? 'top' : 'bottom', \"\".concat(offset, \"%\")), _defineProperty(_ref, reverse ? 'bottom' : 'top', 'auto'), _defineProperty(_ref, \"transform\", reverse ? null : \"translateY(+50%)\"), _ref) : Object.assign(Object.assign({}, this.getHorizontalStylePosition()), {\n        transform: \"translateX(\".concat(reverse ? this.dir === 'rtl' ? '-' : '+' : this.dir === 'rtl' ? '+' : '-', \"50%)\")\n      });\n      this.style = positionStyle;\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"getHorizontalStylePosition\",\n    value: function getHorizontalStylePosition() {\n      var left = this.reverse ? 'auto' : \"\".concat(this.offset, \"%\");\n      var right = this.reverse ? \"\".concat(this.offset, \"%\") : 'auto';\n\n      if (this.dir === 'rtl') {\n        var tmp = left;\n        left = right;\n        right = tmp;\n      }\n\n      return {\n        left: left,\n        right: right\n      };\n    }\n  }]);\n\n  return NzSliderHandleComponent;\n}();\n\nNzSliderHandleComponent.ɵfac = function NzSliderHandleComponent_Factory(t) {\n  return new (t || NzSliderHandleComponent)(i0.ɵɵdirectiveInject(NzSliderService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nNzSliderHandleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzSliderHandleComponent,\n  selectors: [[\"nz-slider-handle\"]],\n  viewQuery: function NzSliderHandleComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(NzTooltipDirective, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.handleEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltip = _t.first);\n    }\n  },\n  hostBindings: function NzSliderHandleComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function NzSliderHandleComponent_mouseenter_HostBindingHandler() {\n        return ctx.enterHandle();\n      })(\"mouseleave\", function NzSliderHandleComponent_mouseleave_HostBindingHandler() {\n        return ctx.leaveHandle();\n      });\n    }\n  },\n  inputs: {\n    vertical: \"vertical\",\n    reverse: \"reverse\",\n    offset: \"offset\",\n    value: \"value\",\n    tooltipVisible: \"tooltipVisible\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipFormatter: \"tooltipFormatter\",\n    active: \"active\",\n    dir: \"dir\"\n  },\n  exportAs: [\"nzSliderHandle\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 4,\n  consts: [[\"tabindex\", \"0\", \"nz-tooltip\", \"\", 1, \"ant-slider-handle\", 3, \"ngStyle\", \"nzTooltipTitle\", \"nzTooltipTrigger\", \"nzTooltipPlacement\"], [\"handle\", \"\"]],\n  template: function NzSliderHandleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"nzTooltipTitle\", ctx.tooltipFormatter === null || ctx.tooltipVisible === \"never\" ? null : ctx.tooltipTitle)(\"nzTooltipTrigger\", null)(\"nzTooltipPlacement\", ctx.tooltipPlacement);\n    }\n  },\n  directives: [i2.NzTooltipDirective, i1.NgStyle],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([InputBoolean()], NzSliderHandleComponent.prototype, \"active\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSliderHandleComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-slider-handle',\n      exportAs: 'nzSliderHandle',\n      preserveWhitespaces: false,\n      template: \"\\n    <div\\n      #handle\\n      class=\\\"ant-slider-handle\\\"\\n      tabindex=\\\"0\\\"\\n      nz-tooltip\\n      [ngStyle]=\\\"style\\\"\\n      [nzTooltipTitle]=\\\"tooltipFormatter === null || tooltipVisible === 'never' ? null : tooltipTitle\\\"\\n      [nzTooltipTrigger]=\\\"null\\\"\\n      [nzTooltipPlacement]=\\\"tooltipPlacement\\\"\\n    ></div>\\n  \",\n      host: {\n        '(mouseenter)': 'enterHandle()',\n        '(mouseleave)': 'leaveHandle()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: NzSliderService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    handleEl: [{\n      type: ViewChild,\n      args: ['handle', {\n        static: false\n      }]\n    }],\n    tooltip: [{\n      type: ViewChild,\n      args: [NzTooltipDirective, {\n        static: false\n      }]\n    }],\n    vertical: [{\n      type: Input\n    }],\n    reverse: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    tooltipVisible: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipFormatter: [{\n      type: Input\n    }],\n    active: [{\n      type: Input\n    }],\n    dir: [{\n      type: Input\n    }]\n  });\n})();\n\nvar NzSliderTrackComponent = /*#__PURE__*/function () {\n  function NzSliderTrackComponent() {\n    _classCallCheck(this, NzSliderTrackComponent);\n\n    this.offset = 0;\n    this.reverse = false;\n    this.dir = 'ltr';\n    this.length = 0;\n    this.vertical = false;\n    this.included = false;\n    this.style = {};\n  }\n\n  _createClass(NzSliderTrackComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      var _ref2;\n\n      var vertical = this.vertical;\n      var reverse = this.reverse;\n      var visibility = this.included ? 'visible' : 'hidden';\n      var offset = this.offset;\n      var length = this.length;\n      var positonStyle = vertical ? (_ref2 = {}, _defineProperty(_ref2, reverse ? 'top' : 'bottom', \"\".concat(offset, \"%\")), _defineProperty(_ref2, reverse ? 'bottom' : 'top', 'auto'), _defineProperty(_ref2, \"height\", \"\".concat(length, \"%\")), _defineProperty(_ref2, \"visibility\", visibility), _ref2) : Object.assign(Object.assign({}, this.getHorizontalStylePosition()), {\n        width: \"\".concat(length, \"%\"),\n        visibility: visibility\n      });\n      this.style = positonStyle;\n    }\n  }, {\n    key: \"getHorizontalStylePosition\",\n    value: function getHorizontalStylePosition() {\n      var left = this.reverse ? 'auto' : \"\".concat(this.offset, \"%\");\n      var right = this.reverse ? \"\".concat(this.offset, \"%\") : 'auto';\n\n      if (this.dir === 'rtl') {\n        var tmp = left;\n        left = right;\n        right = tmp;\n      }\n\n      return {\n        left: left,\n        right: right\n      };\n    }\n  }]);\n\n  return NzSliderTrackComponent;\n}();\n\nNzSliderTrackComponent.ɵfac = function NzSliderTrackComponent_Factory(t) {\n  return new (t || NzSliderTrackComponent)();\n};\n\nNzSliderTrackComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzSliderTrackComponent,\n  selectors: [[\"nz-slider-track\"]],\n  inputs: {\n    offset: \"offset\",\n    reverse: \"reverse\",\n    dir: \"dir\",\n    length: \"length\",\n    vertical: \"vertical\",\n    included: \"included\"\n  },\n  exportAs: [\"nzSliderTrack\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[1, \"ant-slider-track\", 3, \"ngStyle\"]],\n  template: function NzSliderTrackComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngStyle\", ctx.style);\n    }\n  },\n  directives: [i1.NgStyle],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([InputNumber()], NzSliderTrackComponent.prototype, \"offset\", void 0);\n\n__decorate([InputBoolean()], NzSliderTrackComponent.prototype, \"reverse\", void 0);\n\n__decorate([InputNumber()], NzSliderTrackComponent.prototype, \"length\", void 0);\n\n__decorate([InputBoolean()], NzSliderTrackComponent.prototype, \"vertical\", void 0);\n\n__decorate([InputBoolean()], NzSliderTrackComponent.prototype, \"included\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSliderTrackComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-slider-track',\n      exportAs: 'nzSliderTrack',\n      preserveWhitespaces: false,\n      template: \" <div class=\\\"ant-slider-track\\\" [ngStyle]=\\\"style\\\"></div> \"\n    }]\n  }], null, {\n    offset: [{\n      type: Input\n    }],\n    reverse: [{\n      type: Input\n    }],\n    dir: [{\n      type: Input\n    }],\n    length: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    included: [{\n      type: Input\n    }]\n  });\n})();\n\nvar NzSliderStepComponent = /*#__PURE__*/function () {\n  function NzSliderStepComponent() {\n    _classCallCheck(this, NzSliderStepComponent);\n\n    this.lowerBound = null;\n    this.upperBound = null;\n    this.marksArray = [];\n    this.vertical = false;\n    this.included = false;\n    this.steps = [];\n  }\n\n  _createClass(NzSliderStepComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var marksArray = changes.marksArray,\n          lowerBound = changes.lowerBound,\n          upperBound = changes.upperBound,\n          reverse = changes.reverse;\n\n      if (marksArray || reverse) {\n        this.buildSteps();\n      }\n\n      if (marksArray || lowerBound || upperBound || reverse) {\n        this.togglePointActive();\n      }\n    }\n  }, {\n    key: \"trackById\",\n    value: function trackById(_index, step) {\n      return step.value;\n    }\n  }, {\n    key: \"buildSteps\",\n    value: function buildSteps() {\n      var _this4 = this;\n\n      var orient = this.vertical ? 'bottom' : 'left';\n      this.steps = this.marksArray.map(function (mark) {\n        var value = mark.value,\n            config = mark.config;\n        var offset = mark.offset;\n        var range = _this4.max - _this4.min;\n\n        if (_this4.reverse) {\n          offset = (_this4.max - value) / range * 100;\n        }\n\n        return {\n          value: value,\n          offset: offset,\n          config: config,\n          active: false,\n          style: _defineProperty({}, orient, \"\".concat(offset, \"%\"))\n        };\n      });\n    }\n  }, {\n    key: \"togglePointActive\",\n    value: function togglePointActive() {\n      var _this5 = this;\n\n      if (this.steps && this.lowerBound !== null && this.upperBound !== null) {\n        this.steps.forEach(function (step) {\n          var value = step.value;\n          var isActive = !_this5.included && value === _this5.upperBound || _this5.included && value <= _this5.upperBound && value >= _this5.lowerBound;\n          step.active = isActive;\n        });\n      }\n    }\n  }]);\n\n  return NzSliderStepComponent;\n}();\n\nNzSliderStepComponent.ɵfac = function NzSliderStepComponent_Factory(t) {\n  return new (t || NzSliderStepComponent)();\n};\n\nNzSliderStepComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzSliderStepComponent,\n  selectors: [[\"nz-slider-step\"]],\n  inputs: {\n    lowerBound: \"lowerBound\",\n    upperBound: \"upperBound\",\n    marksArray: \"marksArray\",\n    min: \"min\",\n    max: \"max\",\n    vertical: \"vertical\",\n    included: \"included\",\n    reverse: \"reverse\"\n  },\n  exportAs: [\"nzSliderStep\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"ant-slider-step\"], [\"class\", \"ant-slider-dot\", 3, \"ant-slider-dot-active\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"ant-slider-dot\", 3, \"ngStyle\"]],\n  template: function NzSliderStepComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, NzSliderStepComponent_span_1_Template, 1, 3, \"span\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.steps)(\"ngForTrackBy\", ctx.trackById);\n    }\n  },\n  directives: [i1.NgForOf, i1.NgStyle],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([InputBoolean()], NzSliderStepComponent.prototype, \"vertical\", void 0);\n\n__decorate([InputBoolean()], NzSliderStepComponent.prototype, \"included\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSliderStepComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-slider-step',\n      exportAs: 'nzSliderStep',\n      preserveWhitespaces: false,\n      template: \"\\n    <div class=\\\"ant-slider-step\\\">\\n      <span\\n        class=\\\"ant-slider-dot\\\"\\n        *ngFor=\\\"let mark of steps; trackBy: trackById\\\"\\n        [class.ant-slider-dot-active]=\\\"mark.active\\\"\\n        [ngStyle]=\\\"mark.style!\\\"\\n      ></span>\\n    </div>\\n  \"\n    }]\n  }], null, {\n    lowerBound: [{\n      type: Input\n    }],\n    upperBound: [{\n      type: Input\n    }],\n    marksArray: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    included: [{\n      type: Input\n    }],\n    reverse: [{\n      type: Input\n    }]\n  });\n})();\n\nvar NzSliderMarksComponent = /*#__PURE__*/function () {\n  function NzSliderMarksComponent() {\n    _classCallCheck(this, NzSliderMarksComponent);\n\n    this.lowerBound = null;\n    this.upperBound = null;\n    this.marksArray = [];\n    this.vertical = false;\n    this.included = false;\n    this.marks = [];\n  }\n\n  _createClass(NzSliderMarksComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var marksArray = changes.marksArray,\n          lowerBound = changes.lowerBound,\n          upperBound = changes.upperBound,\n          reverse = changes.reverse;\n\n      if (marksArray || reverse) {\n        this.buildMarks();\n      }\n\n      if (marksArray || lowerBound || upperBound || reverse) {\n        this.togglePointActive();\n      }\n    }\n  }, {\n    key: \"trackById\",\n    value: function trackById(_index, mark) {\n      return mark.value;\n    }\n  }, {\n    key: \"buildMarks\",\n    value: function buildMarks() {\n      var _this6 = this;\n\n      var range = this.max - this.min;\n      this.marks = this.marksArray.map(function (mark) {\n        var value = mark.value,\n            offset = mark.offset,\n            config = mark.config;\n\n        var style = _this6.getMarkStyles(value, range, config);\n\n        var label = isConfigObject(config) ? config.label : config;\n        return {\n          label: label,\n          offset: offset,\n          style: style,\n          value: value,\n          config: config,\n          active: false\n        };\n      });\n    }\n  }, {\n    key: \"getMarkStyles\",\n    value: function getMarkStyles(value, range, config) {\n      var style;\n      var markValue = this.reverse ? this.max + this.min - value : value;\n\n      if (this.vertical) {\n        style = {\n          marginBottom: '-50%',\n          bottom: \"\".concat((markValue - this.min) / range * 100, \"%\")\n        };\n      } else {\n        style = {\n          transform: \"translate3d(-50%, 0, 0)\",\n          left: \"\".concat((markValue - this.min) / range * 100, \"%\")\n        };\n      }\n\n      if (isConfigObject(config) && config.style) {\n        style = Object.assign(Object.assign({}, style), config.style);\n      }\n\n      return style;\n    }\n  }, {\n    key: \"togglePointActive\",\n    value: function togglePointActive() {\n      var _this7 = this;\n\n      if (this.marks && this.lowerBound !== null && this.upperBound !== null) {\n        this.marks.forEach(function (mark) {\n          var value = mark.value;\n          var isActive = !_this7.included && value === _this7.upperBound || _this7.included && value <= _this7.upperBound && value >= _this7.lowerBound;\n          mark.active = isActive;\n        });\n      }\n    }\n  }]);\n\n  return NzSliderMarksComponent;\n}();\n\nNzSliderMarksComponent.ɵfac = function NzSliderMarksComponent_Factory(t) {\n  return new (t || NzSliderMarksComponent)();\n};\n\nNzSliderMarksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzSliderMarksComponent,\n  selectors: [[\"nz-slider-marks\"]],\n  inputs: {\n    lowerBound: \"lowerBound\",\n    upperBound: \"upperBound\",\n    marksArray: \"marksArray\",\n    min: \"min\",\n    max: \"max\",\n    vertical: \"vertical\",\n    included: \"included\",\n    reverse: \"reverse\"\n  },\n  exportAs: [\"nzSliderMarks\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"ant-slider-mark\"], [\"class\", \"ant-slider-mark-text\", 3, \"ant-slider-mark-active\", \"ngStyle\", \"innerHTML\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"ant-slider-mark-text\", 3, \"ngStyle\", \"innerHTML\"]],\n  template: function NzSliderMarksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, NzSliderMarksComponent_span_1_Template, 1, 4, \"span\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.marks)(\"ngForTrackBy\", ctx.trackById);\n    }\n  },\n  directives: [i1.NgForOf, i1.NgStyle],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([InputBoolean()], NzSliderMarksComponent.prototype, \"vertical\", void 0);\n\n__decorate([InputBoolean()], NzSliderMarksComponent.prototype, \"included\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSliderMarksComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      preserveWhitespaces: false,\n      selector: 'nz-slider-marks',\n      exportAs: 'nzSliderMarks',\n      template: \"\\n    <div class=\\\"ant-slider-mark\\\">\\n      <span\\n        class=\\\"ant-slider-mark-text\\\"\\n        *ngFor=\\\"let attr of marks; trackBy: trackById\\\"\\n        [class.ant-slider-mark-active]=\\\"attr.active\\\"\\n        [ngStyle]=\\\"attr.style!\\\"\\n        [innerHTML]=\\\"attr.label\\\"\\n      ></span>\\n    </div>\\n  \"\n    }]\n  }], null, {\n    lowerBound: [{\n      type: Input\n    }],\n    upperBound: [{\n      type: Input\n    }],\n    marksArray: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    included: [{\n      type: Input\n    }],\n    reverse: [{\n      type: Input\n    }]\n  });\n})();\n\nfunction isConfigObject(config) {\n  return typeof config !== 'string';\n}\n\nvar NzSliderComponent = /*#__PURE__*/function () {\n  function NzSliderComponent(sliderService, cdr, platform, directionality) {\n    _classCallCheck(this, NzSliderComponent);\n\n    this.sliderService = sliderService;\n    this.cdr = cdr;\n    this.platform = platform;\n    this.directionality = directionality;\n    this.nzDisabled = false;\n    this.nzDots = false;\n    this.nzIncluded = true;\n    this.nzRange = false;\n    this.nzVertical = false;\n    this.nzReverse = false;\n    this.nzMarks = null;\n    this.nzMax = 100;\n    this.nzMin = 0;\n    this.nzStep = 1;\n    this.nzTooltipVisible = 'default';\n    this.nzTooltipPlacement = 'top';\n    this.nzOnAfterChange = new EventEmitter();\n    this.value = null;\n    this.cacheSliderStart = null;\n    this.cacheSliderLength = null;\n    this.activeValueIndex = undefined; // Current activated handle's index ONLY for range=true\n\n    this.track = {\n      offset: null,\n      length: null\n    }; // Track's offset and length\n\n    this.handles = []; // Handles' offset\n\n    this.marksArray = null; // \"steps\" in array type with more data & FILTER out the invalid mark\n\n    this.bounds = {\n      lower: null,\n      upper: null\n    }; // now for nz-slider-step\n\n    this.dir = 'ltr';\n    this.destroy$ = new Subject();\n  }\n\n  _createClass(NzSliderComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this8 = this;\n\n      var _a;\n\n      this.dir = this.directionality.value;\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n        _this8.dir = direction;\n\n        _this8.cdr.detectChanges();\n\n        _this8.updateTrackAndHandles();\n\n        _this8.onValueChange(_this8.getValue(true));\n      });\n      this.handles = generateHandlers(this.nzRange ? 2 : 1);\n      this.marksArray = this.nzMarks ? this.generateMarkItems(this.nzMarks) : null;\n      this.bindDraggingHandlers();\n      this.toggleDragDisabled(this.nzDisabled);\n\n      if (this.getValue() === null) {\n        this.setValue(this.formatValue(null));\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzDisabled = changes.nzDisabled,\n          nzMarks = changes.nzMarks,\n          nzRange = changes.nzRange;\n\n      if (nzDisabled && !nzDisabled.firstChange) {\n        this.toggleDragDisabled(nzDisabled.currentValue);\n      } else if (nzMarks && !nzMarks.firstChange) {\n        this.marksArray = this.nzMarks ? this.generateMarkItems(this.nzMarks) : null;\n      } else if (nzRange && !nzRange.firstChange) {\n        this.handles = generateHandlers(nzRange.currentValue ? 2 : 1);\n        this.setValue(this.formatValue(null));\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unsubscribeDrag();\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(val) {\n      this.setValue(val, true);\n    }\n  }, {\n    key: \"onValueChange\",\n    value: function onValueChange(_value) {}\n  }, {\n    key: \"onTouched\",\n    value: function onTouched() {}\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onValueChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.nzDisabled = isDisabled;\n      this.toggleDragDisabled(isDisabled);\n    }\n    /**\n     * Event handler is only triggered when a slider handler is focused.\n     */\n\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(e) {\n      if (this.nzDisabled) {\n        return;\n      }\n\n      var code = e.keyCode;\n      var isIncrease = code === RIGHT_ARROW || code === UP_ARROW;\n      var isDecrease = code === LEFT_ARROW || code === DOWN_ARROW;\n\n      if (!(isIncrease || isDecrease)) {\n        return;\n      }\n\n      e.preventDefault();\n      var step = (isDecrease ? -this.nzStep : this.nzStep) * (this.nzReverse ? -1 : 1);\n      step = this.dir === 'rtl' ? step * -1 : step;\n      var newVal = this.nzRange ? this.value[this.activeValueIndex] + step : this.value + step;\n      this.setActiveValue(ensureNumberInRange(newVal, this.nzMin, this.nzMax));\n      this.nzOnAfterChange.emit(this.getValue(true));\n    }\n  }, {\n    key: \"onHandleFocusIn\",\n    value: function onHandleFocusIn(index) {\n      this.activeValueIndex = index;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var isWriteValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (isWriteValue) {\n        this.value = this.formatValue(value);\n        this.updateTrackAndHandles();\n      } else if (!valuesEqual(this.value, value)) {\n        this.value = value;\n        this.updateTrackAndHandles();\n        this.onValueChange(this.getValue(true));\n      }\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var cloneAndSort = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (cloneAndSort && this.value && isValueRange(this.value)) {\n        return _toConsumableArray(this.value).sort(function (a, b) {\n          return a - b;\n        });\n      }\n\n      return this.value;\n    }\n    /**\n     * Clone & sort current value and convert them to offsets, then return the new one.\n     */\n\n  }, {\n    key: \"getValueToOffset\",\n    value: function getValueToOffset(value) {\n      var _this9 = this;\n\n      var normalizedValue = value;\n\n      if (typeof normalizedValue === 'undefined') {\n        normalizedValue = this.getValue(true);\n      }\n\n      return isValueRange(normalizedValue) ? normalizedValue.map(function (val) {\n        return _this9.valueToOffset(val);\n      }) : this.valueToOffset(normalizedValue);\n    }\n    /**\n     * Find the closest value to be activated.\n     */\n\n  }, {\n    key: \"setActiveValueIndex\",\n    value: function setActiveValueIndex(pointerValue) {\n      var value = this.getValue();\n\n      if (isValueRange(value)) {\n        var minimal = null;\n        var gap;\n        var activeIndex = -1;\n        value.forEach(function (val, index) {\n          gap = Math.abs(pointerValue - val);\n\n          if (minimal === null || gap < minimal) {\n            minimal = gap;\n            activeIndex = index;\n          }\n        });\n        this.activeValueIndex = activeIndex;\n        this.handlerComponents.toArray()[activeIndex].focus();\n      } else {\n        this.handlerComponents.toArray()[0].focus();\n      }\n    }\n  }, {\n    key: \"setActiveValue\",\n    value: function setActiveValue(pointerValue) {\n      if (isValueRange(this.value)) {\n        var newValue = _toConsumableArray(this.value);\n\n        newValue[this.activeValueIndex] = pointerValue;\n        this.setValue(newValue);\n      } else {\n        this.setValue(pointerValue);\n      }\n    }\n    /**\n     * Update track and handles' position and length.\n     */\n\n  }, {\n    key: \"updateTrackAndHandles\",\n    value: function updateTrackAndHandles() {\n      var value = this.getValue();\n      var offset = this.getValueToOffset(value);\n      var valueSorted = this.getValue(true);\n      var offsetSorted = this.getValueToOffset(valueSorted);\n      var boundParts = isValueRange(valueSorted) ? valueSorted : [0, valueSorted];\n      var trackParts = isValueRange(offsetSorted) ? [offsetSorted[0], offsetSorted[1] - offsetSorted[0]] : [0, offsetSorted];\n      this.handles.forEach(function (handle, index) {\n        handle.offset = isValueRange(offset) ? offset[index] : offset;\n        handle.value = isValueRange(value) ? value[index] : value || 0;\n      });\n\n      var _boundParts = _slicedToArray(boundParts, 2);\n\n      this.bounds.lower = _boundParts[0];\n      this.bounds.upper = _boundParts[1];\n      this.track.offset = trackParts[0];\n      this.track.length = trackParts[1];\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(value) {\n      this.toggleDragMoving(true);\n      this.cacheSliderProperty();\n      this.setActiveValueIndex(this.getLogicalValue(value));\n      this.setActiveValue(this.getLogicalValue(value));\n      this.showHandleTooltip(this.nzRange ? this.activeValueIndex : 0);\n    }\n  }, {\n    key: \"onDragMove\",\n    value: function onDragMove(value) {\n      this.setActiveValue(this.getLogicalValue(value));\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"getLogicalValue\",\n    value: function getLogicalValue(value) {\n      if (this.nzReverse) {\n        if (!this.nzVertical && this.dir === 'rtl') {\n          return value;\n        }\n\n        return this.nzMax - value + this.nzMin;\n      }\n\n      if (!this.nzVertical && this.dir === 'rtl') {\n        return this.nzMax - value + this.nzMin;\n      }\n\n      return value;\n    }\n  }, {\n    key: \"onDragEnd\",\n    value: function onDragEnd() {\n      this.nzOnAfterChange.emit(this.getValue(true));\n      this.toggleDragMoving(false);\n      this.cacheSliderProperty(true);\n      this.hideAllHandleTooltip();\n      this.cdr.markForCheck();\n    }\n    /**\n     * Create user interactions handles.\n     */\n\n  }, {\n    key: \"bindDraggingHandlers\",\n    value: function bindDraggingHandlers() {\n      var _this10 = this;\n\n      if (!this.platform.isBrowser) {\n        return;\n      }\n\n      var sliderDOM = this.slider.nativeElement;\n      var orientField = this.nzVertical ? 'pageY' : 'pageX';\n      var mouse = {\n        start: 'mousedown',\n        move: 'mousemove',\n        end: 'mouseup',\n        pluckKey: [orientField]\n      };\n      var touch = {\n        start: 'touchstart',\n        move: 'touchmove',\n        end: 'touchend',\n        pluckKey: ['touches', '0', orientField],\n        filter: function filter(e) {\n          return e instanceof TouchEvent;\n        }\n      };\n      [mouse, touch].forEach(function (source) {\n        var start = source.start,\n            move = source.move,\n            end = source.end,\n            pluckKey = source.pluckKey,\n            _source$filter = source.filter,\n            filterFunc = _source$filter === void 0 ? function () {\n          return true;\n        } : _source$filter;\n        source.startPlucked$ = fromEvent(sliderDOM, start).pipe(filter(filterFunc), tap(silentEvent), pluck.apply(void 0, _toConsumableArray(pluckKey)), map(function (position) {\n          return _this10.findClosestValue(position);\n        }));\n        source.end$ = fromEvent(document, end);\n        source.moveResolved$ = fromEvent(document, move).pipe(filter(filterFunc), tap(silentEvent), pluck.apply(void 0, _toConsumableArray(pluckKey)), distinctUntilChanged(), map(function (position) {\n          return _this10.findClosestValue(position);\n        }), distinctUntilChanged(), takeUntil(source.end$));\n      });\n      this.dragStart$ = merge(mouse.startPlucked$, touch.startPlucked$);\n      this.dragMove$ = merge(mouse.moveResolved$, touch.moveResolved$);\n      this.dragEnd$ = merge(mouse.end$, touch.end$);\n    }\n  }, {\n    key: \"subscribeDrag\",\n    value: function subscribeDrag() {\n      var periods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['start', 'move', 'end'];\n\n      if (periods.indexOf('start') !== -1 && this.dragStart$ && !this.dragStart_) {\n        this.dragStart_ = this.dragStart$.subscribe(this.onDragStart.bind(this));\n      }\n\n      if (periods.indexOf('move') !== -1 && this.dragMove$ && !this.dragMove_) {\n        this.dragMove_ = this.dragMove$.subscribe(this.onDragMove.bind(this));\n      }\n\n      if (periods.indexOf('end') !== -1 && this.dragEnd$ && !this.dragEnd_) {\n        this.dragEnd_ = this.dragEnd$.subscribe(this.onDragEnd.bind(this));\n      }\n    }\n  }, {\n    key: \"unsubscribeDrag\",\n    value: function unsubscribeDrag() {\n      var periods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['start', 'move', 'end'];\n\n      if (periods.indexOf('start') !== -1 && this.dragStart_) {\n        this.dragStart_.unsubscribe();\n        this.dragStart_ = null;\n      }\n\n      if (periods.indexOf('move') !== -1 && this.dragMove_) {\n        this.dragMove_.unsubscribe();\n        this.dragMove_ = null;\n      }\n\n      if (periods.indexOf('end') !== -1 && this.dragEnd_) {\n        this.dragEnd_.unsubscribe();\n        this.dragEnd_ = null;\n      }\n    }\n  }, {\n    key: \"toggleDragMoving\",\n    value: function toggleDragMoving(movable) {\n      var periods = ['move', 'end'];\n\n      if (movable) {\n        this.sliderService.isDragging = true;\n        this.subscribeDrag(periods);\n      } else {\n        this.sliderService.isDragging = false;\n        this.unsubscribeDrag(periods);\n      }\n    }\n  }, {\n    key: \"toggleDragDisabled\",\n    value: function toggleDragDisabled(disabled) {\n      if (disabled) {\n        this.unsubscribeDrag();\n      } else {\n        this.subscribeDrag(['start']);\n      }\n    }\n  }, {\n    key: \"findClosestValue\",\n    value: function findClosestValue(position) {\n      var sliderStart = this.getSliderStartPosition();\n      var sliderLength = this.getSliderLength();\n      var ratio = ensureNumberInRange((position - sliderStart) / sliderLength, 0, 1);\n      var val = (this.nzMax - this.nzMin) * (this.nzVertical ? 1 - ratio : ratio) + this.nzMin;\n      var points = this.nzMarks === null ? [] : Object.keys(this.nzMarks).map(parseFloat).sort(function (a, b) {\n        return a - b;\n      });\n\n      if (this.nzStep !== 0 && !this.nzDots) {\n        var closestOne = Math.round(val / this.nzStep) * this.nzStep;\n        points.push(closestOne);\n      }\n\n      var gaps = points.map(function (point) {\n        return Math.abs(val - point);\n      });\n      var closest = points[gaps.indexOf(Math.min.apply(Math, _toConsumableArray(gaps)))]; // return parseFloat(closest.toFixed(getPrecision(this.nzStep)));\n\n      return this.nzStep === 0 ? closest : parseFloat(closest.toFixed(getPrecision(this.nzStep)));\n    }\n  }, {\n    key: \"valueToOffset\",\n    value: function valueToOffset(value) {\n      return getPercent(this.nzMin, this.nzMax, value);\n    }\n  }, {\n    key: \"getSliderStartPosition\",\n    value: function getSliderStartPosition() {\n      if (this.cacheSliderStart !== null) {\n        return this.cacheSliderStart;\n      }\n\n      var offset = getElementOffset(this.slider.nativeElement);\n      return this.nzVertical ? offset.top : offset.left;\n    }\n  }, {\n    key: \"getSliderLength\",\n    value: function getSliderLength() {\n      if (this.cacheSliderLength !== null) {\n        return this.cacheSliderLength;\n      }\n\n      var sliderDOM = this.slider.nativeElement;\n      return this.nzVertical ? sliderDOM.clientHeight : sliderDOM.clientWidth;\n    }\n    /**\n     * Cache DOM layout/reflow operations for performance (may not necessary?)\n     */\n\n  }, {\n    key: \"cacheSliderProperty\",\n    value: function cacheSliderProperty() {\n      var remove = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.cacheSliderStart = remove ? null : this.getSliderStartPosition();\n      this.cacheSliderLength = remove ? null : this.getSliderLength();\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value) {\n      var _this11 = this;\n\n      if (isNil(value)) {\n        return this.nzRange ? [this.nzMin, this.nzMax] : this.nzMin;\n      } else if (assertValueValid(value, this.nzRange)) {\n        return isValueRange(value) ? value.map(function (val) {\n          return ensureNumberInRange(val, _this11.nzMin, _this11.nzMax);\n        }) : ensureNumberInRange(value, this.nzMin, this.nzMax);\n      } else {\n        return this.nzDefaultValue ? this.nzDefaultValue : this.nzRange ? [this.nzMin, this.nzMax] : this.nzMin;\n      }\n    }\n    /**\n     * Show one handle's tooltip and hide others'.\n     */\n\n  }, {\n    key: \"showHandleTooltip\",\n    value: function showHandleTooltip() {\n      var handleIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this.handles.forEach(function (handle, index) {\n        handle.active = index === handleIndex;\n      });\n    }\n  }, {\n    key: \"hideAllHandleTooltip\",\n    value: function hideAllHandleTooltip() {\n      this.handles.forEach(function (handle) {\n        return handle.active = false;\n      });\n    }\n  }, {\n    key: \"generateMarkItems\",\n    value: function generateMarkItems(marks) {\n      var marksArray = [];\n\n      for (var key in marks) {\n        if (marks.hasOwnProperty(key)) {\n          var mark = marks[key];\n          var val = typeof key === 'number' ? key : parseFloat(key);\n\n          if (val >= this.nzMin && val <= this.nzMax) {\n            marksArray.push({\n              value: val,\n              offset: this.valueToOffset(val),\n              config: mark\n            });\n          }\n        }\n      }\n\n      return marksArray.length ? marksArray : null;\n    }\n  }]);\n\n  return NzSliderComponent;\n}();\n\nNzSliderComponent.ɵfac = function NzSliderComponent_Factory(t) {\n  return new (t || NzSliderComponent)(i0.ɵɵdirectiveInject(NzSliderService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2$1.Platform), i0.ɵɵdirectiveInject(i3.Directionality, 8));\n};\n\nNzSliderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzSliderComponent,\n  selectors: [[\"nz-slider\"]],\n  viewQuery: function NzSliderComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 7);\n      i0.ɵɵviewQuery(NzSliderHandleComponent, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slider = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.handlerComponents = _t);\n    }\n  },\n  hostBindings: function NzSliderComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function NzSliderComponent_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    nzDisabled: \"nzDisabled\",\n    nzDots: \"nzDots\",\n    nzIncluded: \"nzIncluded\",\n    nzRange: \"nzRange\",\n    nzVertical: \"nzVertical\",\n    nzReverse: \"nzReverse\",\n    nzDefaultValue: \"nzDefaultValue\",\n    nzMarks: \"nzMarks\",\n    nzMax: \"nzMax\",\n    nzMin: \"nzMin\",\n    nzStep: \"nzStep\",\n    nzTooltipVisible: \"nzTooltipVisible\",\n    nzTooltipPlacement: \"nzTooltipPlacement\",\n    nzTipFormatter: \"nzTipFormatter\"\n  },\n  outputs: {\n    nzOnAfterChange: \"nzOnAfterChange\"\n  },\n  exportAs: [\"nzSlider\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return NzSliderComponent;\n    }),\n    multi: true\n  }, NzSliderService]), i0.ɵɵNgOnChangesFeature],\n  decls: 7,\n  vars: 17,\n  consts: [[1, \"ant-slider\"], [\"slider\", \"\"], [1, \"ant-slider-rail\"], [3, \"vertical\", \"included\", \"offset\", \"length\", \"reverse\", \"dir\"], [3, \"vertical\", \"min\", \"max\", \"lowerBound\", \"upperBound\", \"marksArray\", \"included\", \"reverse\", 4, \"ngIf\"], [3, \"vertical\", \"reverse\", \"offset\", \"value\", \"active\", \"tooltipFormatter\", \"tooltipVisible\", \"tooltipPlacement\", \"dir\", \"focusin\", 4, \"ngFor\", \"ngForOf\"], [3, \"vertical\", \"min\", \"max\", \"lowerBound\", \"upperBound\", \"marksArray\", \"included\", \"reverse\"], [3, \"vertical\", \"reverse\", \"offset\", \"value\", \"active\", \"tooltipFormatter\", \"tooltipVisible\", \"tooltipPlacement\", \"dir\", \"focusin\"]],\n  template: function NzSliderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵelement(2, \"div\", 2)(3, \"nz-slider-track\", 3);\n      i0.ɵɵtemplate(4, NzSliderComponent_nz_slider_step_4_Template, 1, 8, \"nz-slider-step\", 4);\n      i0.ɵɵtemplate(5, NzSliderComponent_nz_slider_handle_5_Template, 1, 9, \"nz-slider-handle\", 5);\n      i0.ɵɵtemplate(6, NzSliderComponent_nz_slider_marks_6_Template, 1, 8, \"nz-slider-marks\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-slider-rtl\", ctx.dir === \"rtl\")(\"ant-slider-disabled\", ctx.nzDisabled)(\"ant-slider-vertical\", ctx.nzVertical)(\"ant-slider-with-marks\", ctx.marksArray);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"vertical\", ctx.nzVertical)(\"included\", ctx.nzIncluded)(\"offset\", ctx.track.offset)(\"length\", ctx.track.length)(\"reverse\", ctx.nzReverse)(\"dir\", ctx.dir);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.marksArray);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.handles);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.marksArray);\n    }\n  },\n  directives: [NzSliderTrackComponent, NzSliderStepComponent, NzSliderHandleComponent, NzSliderMarksComponent, i3.Dir, i1.NgIf, i1.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([InputBoolean()], NzSliderComponent.prototype, \"nzDisabled\", void 0);\n\n__decorate([InputBoolean()], NzSliderComponent.prototype, \"nzDots\", void 0);\n\n__decorate([InputBoolean()], NzSliderComponent.prototype, \"nzIncluded\", void 0);\n\n__decorate([InputBoolean()], NzSliderComponent.prototype, \"nzRange\", void 0);\n\n__decorate([InputBoolean()], NzSliderComponent.prototype, \"nzVertical\", void 0);\n\n__decorate([InputBoolean()], NzSliderComponent.prototype, \"nzReverse\", void 0);\n\n__decorate([InputNumber()], NzSliderComponent.prototype, \"nzMax\", void 0);\n\n__decorate([InputNumber()], NzSliderComponent.prototype, \"nzMin\", void 0);\n\n__decorate([InputNumber()], NzSliderComponent.prototype, \"nzStep\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSliderComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-slider',\n      exportAs: 'nzSlider',\n      preserveWhitespaces: false,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return NzSliderComponent;\n        }),\n        multi: true\n      }, NzSliderService],\n      host: {\n        '(keydown)': 'onKeyDown($event)'\n      },\n      template: \"\\n    <div\\n      #slider\\n      class=\\\"ant-slider\\\"\\n      [class.ant-slider-rtl]=\\\"dir === 'rtl'\\\"\\n      [class.ant-slider-disabled]=\\\"nzDisabled\\\"\\n      [class.ant-slider-vertical]=\\\"nzVertical\\\"\\n      [class.ant-slider-with-marks]=\\\"marksArray\\\"\\n    >\\n      <div class=\\\"ant-slider-rail\\\"></div>\\n      <nz-slider-track\\n        [vertical]=\\\"nzVertical\\\"\\n        [included]=\\\"nzIncluded\\\"\\n        [offset]=\\\"track.offset!\\\"\\n        [length]=\\\"track.length!\\\"\\n        [reverse]=\\\"nzReverse\\\"\\n        [dir]=\\\"dir\\\"\\n      ></nz-slider-track>\\n      <nz-slider-step\\n        *ngIf=\\\"marksArray\\\"\\n        [vertical]=\\\"nzVertical\\\"\\n        [min]=\\\"nzMin\\\"\\n        [max]=\\\"nzMax\\\"\\n        [lowerBound]=\\\"$any(bounds.lower)\\\"\\n        [upperBound]=\\\"$any(bounds.upper)\\\"\\n        [marksArray]=\\\"marksArray\\\"\\n        [included]=\\\"nzIncluded\\\"\\n        [reverse]=\\\"nzReverse\\\"\\n      ></nz-slider-step>\\n      <nz-slider-handle\\n        *ngFor=\\\"let handle of handles; index as handleIndex\\\"\\n        [vertical]=\\\"nzVertical\\\"\\n        [reverse]=\\\"nzReverse\\\"\\n        [offset]=\\\"handle.offset!\\\"\\n        [value]=\\\"handle.value!\\\"\\n        [active]=\\\"handle.active\\\"\\n        [tooltipFormatter]=\\\"nzTipFormatter\\\"\\n        [tooltipVisible]=\\\"nzTooltipVisible\\\"\\n        [tooltipPlacement]=\\\"nzTooltipPlacement\\\"\\n        [dir]=\\\"dir\\\"\\n        (focusin)=\\\"onHandleFocusIn(handleIndex)\\\"\\n      ></nz-slider-handle>\\n      <nz-slider-marks\\n        *ngIf=\\\"marksArray\\\"\\n        [vertical]=\\\"nzVertical\\\"\\n        [min]=\\\"nzMin\\\"\\n        [max]=\\\"nzMax\\\"\\n        [lowerBound]=\\\"$any(bounds.lower)\\\"\\n        [upperBound]=\\\"$any(bounds.upper)\\\"\\n        [marksArray]=\\\"marksArray\\\"\\n        [included]=\\\"nzIncluded\\\"\\n        [reverse]=\\\"nzReverse\\\"\\n      ></nz-slider-marks>\\n    </div>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: NzSliderService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2$1.Platform\n    }, {\n      type: i3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    slider: [{\n      type: ViewChild,\n      args: ['slider', {\n        static: true\n      }]\n    }],\n    handlerComponents: [{\n      type: ViewChildren,\n      args: [NzSliderHandleComponent]\n    }],\n    nzDisabled: [{\n      type: Input\n    }],\n    nzDots: [{\n      type: Input\n    }],\n    nzIncluded: [{\n      type: Input\n    }],\n    nzRange: [{\n      type: Input\n    }],\n    nzVertical: [{\n      type: Input\n    }],\n    nzReverse: [{\n      type: Input\n    }],\n    nzDefaultValue: [{\n      type: Input\n    }],\n    nzMarks: [{\n      type: Input\n    }],\n    nzMax: [{\n      type: Input\n    }],\n    nzMin: [{\n      type: Input\n    }],\n    nzStep: [{\n      type: Input\n    }],\n    nzTooltipVisible: [{\n      type: Input\n    }],\n    nzTooltipPlacement: [{\n      type: Input\n    }],\n    nzTipFormatter: [{\n      type: Input\n    }],\n    nzOnAfterChange: [{\n      type: Output\n    }]\n  });\n})();\n\nfunction getValueTypeNotMatchError() {\n  return new Error(\"The \\\"nzRange\\\" can't match the \\\"ngModel\\\"'s type, please check these properties: \\\"nzRange\\\", \\\"ngModel\\\", \\\"nzDefaultValue\\\".\");\n}\n\nfunction isValueRange(value) {\n  if (value instanceof Array) {\n    return value.length === 2;\n  } else {\n    return false;\n  }\n}\n\nfunction generateHandlers(amount) {\n  return Array(amount).fill(0).map(function () {\n    return {\n      offset: null,\n      value: null,\n      active: false\n    };\n  });\n}\n/**\n * Check if value is valid and throw error if value-type/range not match.\n */\n\n\nfunction assertValueValid(value, isRange) {\n  if (!isValueRange(value) && isNaN(value) || isValueRange(value) && value.some(function (v) {\n    return isNaN(v);\n  })) {\n    return false;\n  }\n\n  return assertValueTypeMatch(value, isRange);\n}\n/**\n * Assert that if `this.nzRange` is `true`, value is also a range, vice versa.\n */\n\n\nfunction assertValueTypeMatch(value) {\n  var isRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (isValueRange(value) !== isRange) {\n    throw getValueTypeNotMatchError();\n  }\n\n  return true;\n}\n\nfunction valuesEqual(valA, valB) {\n  if (typeof valA !== typeof valB) {\n    return false;\n  }\n\n  return isValueRange(valA) && isValueRange(valB) ? arraysEqual(valA, valB) : valA === valB;\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzSliderModule = /*#__PURE__*/_createClass(function NzSliderModule() {\n  _classCallCheck(this, NzSliderModule);\n});\n\nNzSliderModule.ɵfac = function NzSliderModule_Factory(t) {\n  return new (t || NzSliderModule)();\n};\n\nNzSliderModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzSliderModule,\n  declarations: [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent],\n  imports: [BidiModule, CommonModule, PlatformModule, NzToolTipModule],\n  exports: [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent]\n});\nNzSliderModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[BidiModule, CommonModule, PlatformModule, NzToolTipModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSliderModule, [{\n    type: NgModule,\n    args: [{\n      exports: [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent],\n      declarations: [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent],\n      imports: [BidiModule, CommonModule, PlatformModule, NzToolTipModule]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzMarks = /*#__PURE__*/_createClass(function NzMarks() {\n  _classCallCheck(this, NzMarks);\n});\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzMarks, NzSliderComponent, NzSliderModule, NzSliderHandleComponent as ɵNzSliderHandleComponent, NzSliderMarksComponent as ɵNzSliderMarksComponent, NzSliderService as ɵNzSliderService, NzSliderStepComponent as ɵNzSliderStepComponent, NzSliderTrackComponent as ɵNzSliderTrackComponent }; //# sourceMappingURL=ng-zorro-antd-slider.mjs.map","map":null,"metadata":{},"sourceType":"module"}