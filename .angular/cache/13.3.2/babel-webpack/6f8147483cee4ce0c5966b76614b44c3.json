{"ast":null,"code":"import { Subject, fromEvent, merge } from 'rxjs';\nimport { auditTime, takeUntil, distinctUntilChanged, mapTo } from 'rxjs/operators';\nimport { InjectionToken, EventEmitter, Directive, NgZone, KeyValueDiffers, ElementRef, Inject, PLATFORM_ID, Optional, Input, Output, Component, ViewEncapsulation, ChangeDetectorRef, HostBinding, ViewChild, Renderer2, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport PerfectScrollbar from 'perfect-scrollbar';\nimport ResizeObserver from 'resize-observer-polyfill';\nconst PERFECT_SCROLLBAR_CONFIG = new InjectionToken('PERFECT_SCROLLBAR_CONFIG');\n\nclass Geometry {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n}\n\nclass Position {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n}\n\nconst PerfectScrollbarEvents = ['psScrollY', 'psScrollX', 'psScrollUp', 'psScrollDown', 'psScrollLeft', 'psScrollRight', 'psYReachEnd', 'psYReachStart', 'psXReachEnd', 'psXReachStart'];\n\nclass PerfectScrollbarConfig {\n  constructor(config = {}) {\n    this.assign(config);\n  }\n\n  assign(config = {}) {\n    for (const key in config) {\n      this[key] = config[key];\n    }\n  }\n\n}\n\nclass PerfectScrollbarDirective {\n  constructor(zone, differs, elementRef, platformId, defaults) {\n    this.zone = zone;\n    this.differs = differs;\n    this.elementRef = elementRef;\n    this.platformId = platformId;\n    this.defaults = defaults;\n    this.instance = null;\n    this.ro = null;\n    this.timeout = null;\n    this.animation = null;\n    this.configDiff = null;\n    this.ngDestroy = new Subject();\n    this.disabled = false;\n    this.psScrollY = new EventEmitter();\n    this.psScrollX = new EventEmitter();\n    this.psScrollUp = new EventEmitter();\n    this.psScrollDown = new EventEmitter();\n    this.psScrollLeft = new EventEmitter();\n    this.psScrollRight = new EventEmitter();\n    this.psYReachEnd = new EventEmitter();\n    this.psYReachStart = new EventEmitter();\n    this.psXReachEnd = new EventEmitter();\n    this.psXReachStart = new EventEmitter();\n  }\n\n  ngOnInit() {\n    if (!this.disabled && isPlatformBrowser(this.platformId)) {\n      const config = new PerfectScrollbarConfig(this.defaults);\n      config.assign(this.config); // Custom configuration\n\n      this.zone.runOutsideAngular(() => {\n        this.instance = new PerfectScrollbar(this.elementRef.nativeElement, config);\n      });\n\n      if (!this.configDiff) {\n        this.configDiff = this.differs.find(this.config || {}).create();\n        this.configDiff.diff(this.config || {});\n      }\n\n      this.zone.runOutsideAngular(() => {\n        this.ro = new ResizeObserver(() => {\n          this.update();\n        });\n\n        if (this.elementRef.nativeElement.children[0]) {\n          this.ro.observe(this.elementRef.nativeElement.children[0]);\n        }\n\n        this.ro.observe(this.elementRef.nativeElement);\n      });\n      this.zone.runOutsideAngular(() => {\n        PerfectScrollbarEvents.forEach(eventName => {\n          const eventType = eventName.replace(/([A-Z])/g, c => `-${c.toLowerCase()}`);\n          fromEvent(this.elementRef.nativeElement, eventType).pipe(auditTime(20), takeUntil(this.ngDestroy)).subscribe(event => {\n            this[eventName].emit(event);\n          });\n        });\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.ngDestroy.next();\n      this.ngDestroy.complete();\n\n      if (this.ro) {\n        this.ro.disconnect();\n      }\n\n      if (this.timeout && typeof window !== 'undefined') {\n        window.clearTimeout(this.timeout);\n      }\n\n      this.zone.runOutsideAngular(() => {\n        if (this.instance) {\n          this.instance.destroy();\n        }\n      });\n      this.instance = null;\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.disabled && this.configDiff && isPlatformBrowser(this.platformId)) {\n      const changes = this.configDiff.diff(this.config || {});\n\n      if (changes) {\n        this.ngOnDestroy();\n        this.ngOnInit();\n      }\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes['disabled'] && !changes['disabled'].isFirstChange() && isPlatformBrowser(this.platformId)) {\n      if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {\n        if (changes['disabled'].currentValue === true) {\n          this.ngOnDestroy();\n        } else if (changes['disabled'].currentValue === false) {\n          this.ngOnInit();\n        }\n      }\n    }\n  }\n\n  ps() {\n    return this.instance;\n  }\n\n  update() {\n    if (typeof window !== 'undefined') {\n      if (this.timeout) {\n        window.clearTimeout(this.timeout);\n      }\n\n      this.timeout = window.setTimeout(() => {\n        if (!this.disabled && this.configDiff) {\n          try {\n            this.zone.runOutsideAngular(() => {\n              if (this.instance) {\n                this.instance.update();\n              }\n            });\n          } catch (error) {// Update can be finished after destroy so catch errors\n          }\n        }\n      }, 0);\n    }\n  }\n\n  geometry(prefix = 'scroll') {\n    return new Geometry(this.elementRef.nativeElement[prefix + 'Left'], this.elementRef.nativeElement[prefix + 'Top'], this.elementRef.nativeElement[prefix + 'Width'], this.elementRef.nativeElement[prefix + 'Height']);\n  }\n\n  position(absolute = false) {\n    if (!absolute && this.instance) {\n      return new Position(this.instance.reach.x || 0, this.instance.reach.y || 0);\n    } else {\n      return new Position(this.elementRef.nativeElement.scrollLeft, this.elementRef.nativeElement.scrollTop);\n    }\n  }\n\n  scrollable(direction = 'any') {\n    const element = this.elementRef.nativeElement;\n\n    if (direction === 'any') {\n      return element.classList.contains('ps--active-x') || element.classList.contains('ps--active-y');\n    } else if (direction === 'both') {\n      return element.classList.contains('ps--active-x') && element.classList.contains('ps--active-y');\n    } else {\n      return element.classList.contains('ps--active-' + direction);\n    }\n  }\n\n  scrollTo(x, y, speed) {\n    if (!this.disabled) {\n      if (y == null && speed == null) {\n        this.animateScrolling('scrollTop', x, speed);\n      } else {\n        if (x != null) {\n          this.animateScrolling('scrollLeft', x, speed);\n        }\n\n        if (y != null) {\n          this.animateScrolling('scrollTop', y, speed);\n        }\n      }\n    }\n  }\n\n  scrollToX(x, speed) {\n    this.animateScrolling('scrollLeft', x, speed);\n  }\n\n  scrollToY(y, speed) {\n    this.animateScrolling('scrollTop', y, speed);\n  }\n\n  scrollToTop(offset, speed) {\n    this.animateScrolling('scrollTop', offset || 0, speed);\n  }\n\n  scrollToLeft(offset, speed) {\n    this.animateScrolling('scrollLeft', offset || 0, speed);\n  }\n\n  scrollToRight(offset, speed) {\n    const left = this.elementRef.nativeElement.scrollWidth - this.elementRef.nativeElement.clientWidth;\n    this.animateScrolling('scrollLeft', left - (offset || 0), speed);\n  }\n\n  scrollToBottom(offset, speed) {\n    const top = this.elementRef.nativeElement.scrollHeight - this.elementRef.nativeElement.clientHeight;\n    this.animateScrolling('scrollTop', top - (offset || 0), speed);\n  }\n\n  scrollToElement(element, offset, speed) {\n    if (typeof element === 'string') {\n      element = this.elementRef.nativeElement.querySelector(element);\n    }\n\n    if (element) {\n      const elementPos = element.getBoundingClientRect();\n      const scrollerPos = this.elementRef.nativeElement.getBoundingClientRect();\n\n      if (this.elementRef.nativeElement.classList.contains('ps--active-x')) {\n        const currentPos = this.elementRef.nativeElement['scrollLeft'];\n        const position = elementPos.left - scrollerPos.left + currentPos;\n        this.animateScrolling('scrollLeft', position + (offset || 0), speed);\n      }\n\n      if (this.elementRef.nativeElement.classList.contains('ps--active-y')) {\n        const currentPos = this.elementRef.nativeElement['scrollTop'];\n        const position = elementPos.top - scrollerPos.top + currentPos;\n        this.animateScrolling('scrollTop', position + (offset || 0), speed);\n      }\n    }\n  }\n\n  animateScrolling(target, value, speed) {\n    if (this.animation) {\n      window.cancelAnimationFrame(this.animation);\n      this.animation = null;\n    }\n\n    if (!speed || typeof window === 'undefined') {\n      this.elementRef.nativeElement[target] = value;\n    } else if (value !== this.elementRef.nativeElement[target]) {\n      let newValue = 0;\n      let scrollCount = 0;\n      let oldTimestamp = performance.now();\n      let oldValue = this.elementRef.nativeElement[target];\n      const cosParameter = (oldValue - value) / 2;\n\n      const step = newTimestamp => {\n        scrollCount += Math.PI / (speed / (newTimestamp - oldTimestamp));\n        newValue = Math.round(value + cosParameter + cosParameter * Math.cos(scrollCount)); // Only continue animation if scroll position has not changed\n\n        if (this.elementRef.nativeElement[target] === oldValue) {\n          if (scrollCount >= Math.PI) {\n            this.animateScrolling(target, value, 0);\n          } else {\n            this.elementRef.nativeElement[target] = newValue; // On a zoomed out page the resulting offset may differ\n\n            oldValue = this.elementRef.nativeElement[target];\n            oldTimestamp = newTimestamp;\n            this.animation = window.requestAnimationFrame(step);\n          }\n        }\n      };\n\n      window.requestAnimationFrame(step);\n    }\n  }\n\n}\n\nclass PerfectScrollbarComponent {\n  constructor(zone, cdRef, platformId) {\n    this.zone = zone;\n    this.cdRef = cdRef;\n    this.platformId = platformId;\n    this.states = {};\n    this.indicatorX = false;\n    this.indicatorY = false;\n    this.interaction = false;\n    this.scrollPositionX = 0;\n    this.scrollPositionY = 0;\n    this.scrollDirectionX = 0;\n    this.scrollDirectionY = 0;\n    this.usePropagationX = false;\n    this.usePropagationY = false;\n    this.allowPropagationX = false;\n    this.allowPropagationY = false;\n    this.stateTimeout = null;\n    this.ngDestroy = new Subject();\n    this.stateUpdate = new Subject();\n    this.disabled = false;\n    this.usePSClass = true;\n    this.autoPropagation = false;\n    this.scrollIndicators = false;\n    this.psScrollY = new EventEmitter();\n    this.psScrollX = new EventEmitter();\n    this.psScrollUp = new EventEmitter();\n    this.psScrollDown = new EventEmitter();\n    this.psScrollLeft = new EventEmitter();\n    this.psScrollRight = new EventEmitter();\n    this.psYReachEnd = new EventEmitter();\n    this.psYReachStart = new EventEmitter();\n    this.psXReachEnd = new EventEmitter();\n    this.psXReachStart = new EventEmitter();\n  }\n\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.stateUpdate.pipe(takeUntil(this.ngDestroy), distinctUntilChanged((a, b) => a === b && !this.stateTimeout)).subscribe(state => {\n        if (this.stateTimeout && typeof window !== 'undefined') {\n          window.clearTimeout(this.stateTimeout);\n          this.stateTimeout = null;\n        }\n\n        if (state === 'x' || state === 'y') {\n          this.interaction = false;\n\n          if (state === 'x') {\n            this.indicatorX = false;\n            this.states.left = false;\n            this.states.right = false;\n\n            if (this.autoPropagation && this.usePropagationX) {\n              this.allowPropagationX = false;\n            }\n          } else if (state === 'y') {\n            this.indicatorY = false;\n            this.states.top = false;\n            this.states.bottom = false;\n\n            if (this.autoPropagation && this.usePropagationY) {\n              this.allowPropagationY = false;\n            }\n          }\n        } else {\n          if (state === 'left' || state === 'right') {\n            this.states.left = false;\n            this.states.right = false;\n            this.states[state] = true;\n\n            if (this.autoPropagation && this.usePropagationX) {\n              this.indicatorX = true;\n            }\n          } else if (state === 'top' || state === 'bottom') {\n            this.states.top = false;\n            this.states.bottom = false;\n            this.states[state] = true;\n\n            if (this.autoPropagation && this.usePropagationY) {\n              this.indicatorY = true;\n            }\n          }\n\n          if (this.autoPropagation && typeof window !== 'undefined') {\n            this.stateTimeout = window.setTimeout(() => {\n              this.indicatorX = false;\n              this.indicatorY = false;\n              this.stateTimeout = null;\n\n              if (this.interaction && (this.states.left || this.states.right)) {\n                this.allowPropagationX = true;\n              }\n\n              if (this.interaction && (this.states.top || this.states.bottom)) {\n                this.allowPropagationY = true;\n              }\n\n              this.cdRef.markForCheck();\n            }, 500);\n          }\n        }\n\n        this.cdRef.markForCheck();\n        this.cdRef.detectChanges();\n      });\n      this.zone.runOutsideAngular(() => {\n        if (this.directiveRef) {\n          const element = this.directiveRef.elementRef.nativeElement;\n          fromEvent(element, 'wheel').pipe(takeUntil(this.ngDestroy)).subscribe(event => {\n            if (!this.disabled && this.autoPropagation) {\n              const scrollDeltaX = event.deltaX;\n              const scrollDeltaY = event.deltaY;\n              this.checkPropagation(event, scrollDeltaX, scrollDeltaY);\n            }\n          });\n          fromEvent(element, 'touchmove').pipe(takeUntil(this.ngDestroy)).subscribe(event => {\n            if (!this.disabled && this.autoPropagation) {\n              const scrollPositionX = event.touches[0].clientX;\n              const scrollPositionY = event.touches[0].clientY;\n              const scrollDeltaX = scrollPositionX - this.scrollPositionX;\n              const scrollDeltaY = scrollPositionY - this.scrollPositionY;\n              this.checkPropagation(event, scrollDeltaX, scrollDeltaY);\n              this.scrollPositionX = scrollPositionX;\n              this.scrollPositionY = scrollPositionY;\n            }\n          });\n          merge(fromEvent(element, 'ps-scroll-x').pipe(mapTo('x')), fromEvent(element, 'ps-scroll-y').pipe(mapTo('y')), fromEvent(element, 'ps-x-reach-end').pipe(mapTo('right')), fromEvent(element, 'ps-y-reach-end').pipe(mapTo('bottom')), fromEvent(element, 'ps-x-reach-start').pipe(mapTo('left')), fromEvent(element, 'ps-y-reach-start').pipe(mapTo('top'))).pipe(takeUntil(this.ngDestroy)).subscribe(state => {\n            if (!this.disabled && (this.autoPropagation || this.scrollIndicators)) {\n              this.stateUpdate.next(state);\n            }\n          });\n        }\n      });\n      window.setTimeout(() => {\n        PerfectScrollbarEvents.forEach(eventName => {\n          if (this.directiveRef) {\n            this.directiveRef[eventName] = this[eventName];\n          }\n        });\n      }, 0);\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.ngDestroy.next();\n      this.ngDestroy.unsubscribe();\n\n      if (this.stateTimeout && typeof window !== 'undefined') {\n        window.clearTimeout(this.stateTimeout);\n      }\n    }\n  }\n\n  ngDoCheck() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!this.disabled && this.autoPropagation && this.directiveRef) {\n        const element = this.directiveRef.elementRef.nativeElement;\n        this.usePropagationX = element.classList.contains('ps--active-x');\n        this.usePropagationY = element.classList.contains('ps--active-y');\n      }\n    }\n  }\n\n  checkPropagation(event, deltaX, deltaY) {\n    this.interaction = true;\n    const scrollDirectionX = deltaX < 0 ? -1 : 1;\n    const scrollDirectionY = deltaY < 0 ? -1 : 1;\n\n    if (this.usePropagationX && this.usePropagationY || this.usePropagationX && (!this.allowPropagationX || this.scrollDirectionX !== scrollDirectionX) || this.usePropagationY && (!this.allowPropagationY || this.scrollDirectionY !== scrollDirectionY)) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (!!deltaX) {\n      this.scrollDirectionX = scrollDirectionX;\n    }\n\n    if (!!deltaY) {\n      this.scrollDirectionY = scrollDirectionY;\n    }\n\n    this.stateUpdate.next('interaction');\n    this.cdRef.detectChanges();\n  }\n\n}\n\nclass ForceNativeScrollDirective {\n  constructor(renderer, el) {\n    this.renderer = renderer;\n    ['ps__child', 'ps__child--consume'].forEach(className => {\n      this.renderer.addClass(el === null || el === void 0 ? void 0 : el.nativeElement, className);\n    });\n  }\n\n}\n\nclass PerfectScrollbarModule {}\n\n/**\n * Generated bundle index. Do not edit.\n */\nexport { Geometry, PERFECT_SCROLLBAR_CONFIG, PerfectScrollbarComponent, PerfectScrollbarConfig, PerfectScrollbarDirective, PerfectScrollbarModule, Position, ForceNativeScrollDirective as ɵa }; //# sourceMappingURL=ngx-perfect-scrollbar.js.map","map":null,"metadata":{},"sourceType":"module"}