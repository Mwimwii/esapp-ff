{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { __decorate } from 'tslib';\nimport { UP_ARROW, DOWN_ARROW, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Output, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { isNotNil, InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i3 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { CommonModule } from '@angular/common';\nvar _c0 = [\"inputElement\"];\n\nvar NzInputNumberComponent = /*#__PURE__*/function () {\n  function NzInputNumberComponent(ngZone, elementRef, cdr, focusMonitor, directionality) {\n    _classCallCheck(this, NzInputNumberComponent);\n\n    this.ngZone = ngZone;\n    this.elementRef = elementRef;\n    this.cdr = cdr;\n    this.focusMonitor = focusMonitor;\n    this.directionality = directionality;\n    this.destroy$ = new Subject();\n    this.isFocused = false;\n    this.disabledUp = false;\n    this.disabledDown = false;\n    this.dir = 'ltr';\n\n    this.onChange = function () {};\n\n    this.onTouched = function () {};\n\n    this.nzBlur = new EventEmitter();\n    this.nzFocus = new EventEmitter();\n    this.nzSize = 'default';\n    this.nzMin = -Infinity;\n    this.nzMax = Infinity;\n\n    this.nzParser = function (value) {\n      return value.trim().replace(/ã€‚/g, '.').replace(/[^\\w\\.-]+/g, '');\n    };\n\n    this.nzPrecisionMode = 'toFixed';\n    this.nzPlaceHolder = '';\n    this.nzStep = 1;\n    this.nzInputMode = 'decimal';\n    this.nzId = null;\n    this.nzDisabled = false;\n    this.nzAutoFocus = false;\n\n    this.nzFormatter = function (value) {\n      return value;\n    };\n  }\n\n  _createClass(NzInputNumberComponent, [{\n    key: \"onModelChange\",\n    value: function onModelChange(value) {\n      this.parsedValue = this.nzParser(value);\n      this.inputElement.nativeElement.value = \"\".concat(this.parsedValue);\n      var validValue = this.getCurrentValidValue(this.parsedValue);\n      this.setValue(validValue);\n    }\n  }, {\n    key: \"getCurrentValidValue\",\n    value: function getCurrentValidValue(value) {\n      var val = value;\n\n      if (val === '') {\n        val = '';\n      } else if (!this.isNotCompleteNumber(val)) {\n        val = \"\".concat(this.getValidValue(val));\n      } else {\n        val = this.value;\n      }\n\n      return this.toNumber(val);\n    } // '1.' '1x' 'xx' '' => are not complete numbers\n\n  }, {\n    key: \"isNotCompleteNumber\",\n    value: function isNotCompleteNumber(num) {\n      return isNaN(num) || num === '' || num === null || !!(num && num.toString().indexOf('.') === num.toString().length - 1);\n    }\n  }, {\n    key: \"getValidValue\",\n    value: function getValidValue(value) {\n      var val = parseFloat(value); // https://github.com/ant-design/ant-design/issues/7358\n\n      if (isNaN(val)) {\n        return value;\n      }\n\n      if (val < this.nzMin) {\n        val = this.nzMin;\n      }\n\n      if (val > this.nzMax) {\n        val = this.nzMax;\n      }\n\n      return val;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber(num) {\n      if (this.isNotCompleteNumber(num)) {\n        return num;\n      }\n\n      var numStr = String(num);\n\n      if (numStr.indexOf('.') >= 0 && isNotNil(this.nzPrecision)) {\n        if (typeof this.nzPrecisionMode === 'function') {\n          return this.nzPrecisionMode(num, this.nzPrecision);\n        } else if (this.nzPrecisionMode === 'cut') {\n          var numSplit = numStr.split('.');\n          numSplit[1] = numSplit[1].slice(0, this.nzPrecision);\n          return Number(numSplit.join('.'));\n        }\n\n        return Number(Number(num).toFixed(this.nzPrecision));\n      }\n\n      return Number(num);\n    }\n  }, {\n    key: \"getRatio\",\n    value: function getRatio(e) {\n      var ratio = 1;\n\n      if (e.metaKey || e.ctrlKey) {\n        ratio = 0.1;\n      } else if (e.shiftKey) {\n        ratio = 10;\n      }\n\n      return ratio;\n    }\n  }, {\n    key: \"down\",\n    value: function down(e, ratio) {\n      if (!this.isFocused) {\n        this.focus();\n      }\n\n      this.step('down', e, ratio);\n    }\n  }, {\n    key: \"up\",\n    value: function up(e, ratio) {\n      if (!this.isFocused) {\n        this.focus();\n      }\n\n      this.step('up', e, ratio);\n    }\n  }, {\n    key: \"getPrecision\",\n    value: function getPrecision(value) {\n      var valueString = value.toString();\n\n      if (valueString.indexOf('e-') >= 0) {\n        return parseInt(valueString.slice(valueString.indexOf('e-') + 2), 10);\n      }\n\n      var precision = 0;\n\n      if (valueString.indexOf('.') >= 0) {\n        precision = valueString.length - valueString.indexOf('.') - 1;\n      }\n\n      return precision;\n    } // step={1.0} value={1.51}\n    // press +\n    // then value should be 2.51, rather than 2.5\n    // if this.props.precision is undefined\n    // https://github.com/react-component/input-number/issues/39\n\n  }, {\n    key: \"getMaxPrecision\",\n    value: function getMaxPrecision(currentValue, ratio) {\n      if (isNotNil(this.nzPrecision)) {\n        return this.nzPrecision;\n      }\n\n      var ratioPrecision = this.getPrecision(ratio);\n      var stepPrecision = this.getPrecision(this.nzStep);\n      var currentValuePrecision = this.getPrecision(currentValue);\n\n      if (!currentValue) {\n        return ratioPrecision + stepPrecision;\n      }\n\n      return Math.max(currentValuePrecision, ratioPrecision + stepPrecision);\n    }\n  }, {\n    key: \"getPrecisionFactor\",\n    value: function getPrecisionFactor(currentValue, ratio) {\n      var precision = this.getMaxPrecision(currentValue, ratio);\n      return Math.pow(10, precision);\n    }\n  }, {\n    key: \"upStep\",\n    value: function upStep(val, rat) {\n      var precisionFactor = this.getPrecisionFactor(val, rat);\n      var precision = Math.abs(this.getMaxPrecision(val, rat));\n      var result;\n\n      if (typeof val === 'number') {\n        result = ((precisionFactor * val + precisionFactor * this.nzStep * rat) / precisionFactor).toFixed(precision);\n      } else {\n        result = this.nzMin === -Infinity ? this.nzStep : this.nzMin;\n      }\n\n      return this.toNumber(result);\n    }\n  }, {\n    key: \"downStep\",\n    value: function downStep(val, rat) {\n      var precisionFactor = this.getPrecisionFactor(val, rat);\n      var precision = Math.abs(this.getMaxPrecision(val, rat));\n      var result;\n\n      if (typeof val === 'number') {\n        result = ((precisionFactor * val - precisionFactor * this.nzStep * rat) / precisionFactor).toFixed(precision);\n      } else {\n        result = this.nzMin === -Infinity ? -this.nzStep : this.nzMin;\n      }\n\n      return this.toNumber(result);\n    }\n  }, {\n    key: \"step\",\n    value: function step(type, e) {\n      var _this = this;\n\n      var ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      this.stop();\n      e.preventDefault();\n\n      if (this.nzDisabled) {\n        return;\n      }\n\n      var value = this.getCurrentValidValue(this.parsedValue) || 0;\n      var val = 0;\n\n      if (type === 'up') {\n        val = this.upStep(value, ratio);\n      } else if (type === 'down') {\n        val = this.downStep(value, ratio);\n      }\n\n      var outOfRange = val > this.nzMax || val < this.nzMin;\n\n      if (val > this.nzMax) {\n        val = this.nzMax;\n      } else if (val < this.nzMin) {\n        val = this.nzMin;\n      }\n\n      this.setValue(val);\n      this.updateDisplayValue(val);\n      this.isFocused = true;\n\n      if (outOfRange) {\n        return;\n      }\n\n      this.autoStepTimer = setTimeout(function () {\n        _this[type](e, ratio);\n      }, 300);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.autoStepTimer) {\n        clearTimeout(this.autoStepTimer);\n      }\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      if (\"\".concat(this.value) !== \"\".concat(value)) {\n        this.onChange(value);\n      }\n\n      this.value = value;\n      this.parsedValue = value;\n      this.disabledUp = this.disabledDown = false;\n\n      if (value || value === 0) {\n        var val = Number(value);\n\n        if (val >= this.nzMax) {\n          this.disabledUp = true;\n        }\n\n        if (val <= this.nzMin) {\n          this.disabledDown = true;\n        }\n      }\n    }\n  }, {\n    key: \"updateDisplayValue\",\n    value: function updateDisplayValue(value) {\n      var displayValue = isNotNil(this.nzFormatter(value)) ? this.nzFormatter(value) : '';\n      this.displayValue = displayValue;\n      this.inputElement.nativeElement.value = \"\".concat(displayValue);\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n      this.setValue(value);\n      this.updateDisplayValue(value);\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(disabled) {\n      this.nzDisabled = disabled;\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.inputElement.nativeElement.blur();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe(function (focusOrigin) {\n        if (!focusOrigin) {\n          _this2.isFocused = false;\n\n          _this2.updateDisplayValue(_this2.value);\n\n          _this2.nzBlur.emit();\n\n          Promise.resolve().then(function () {\n            return _this2.onTouched();\n          });\n        } else {\n          _this2.isFocused = true;\n\n          _this2.nzFocus.emit();\n        }\n      });\n      this.dir = this.directionality.value;\n      this.directionality.change.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n        _this2.dir = direction;\n      });\n      this.ngZone.runOutsideAngular(function () {\n        fromEvent(_this2.inputElement.nativeElement, 'keyup').pipe(takeUntil(_this2.destroy$)).subscribe(function () {\n          return _this2.stop();\n        });\n        fromEvent(_this2.inputElement.nativeElement, 'keydown').pipe(takeUntil(_this2.destroy$)).subscribe(function (event) {\n          var keyCode = event.keyCode;\n\n          if (keyCode !== UP_ARROW && keyCode !== DOWN_ARROW && keyCode !== ENTER) {\n            return;\n          }\n\n          _this2.ngZone.run(function () {\n            if (keyCode === UP_ARROW) {\n              var ratio = _this2.getRatio(event);\n\n              _this2.up(event, ratio);\n\n              _this2.stop();\n            } else if (keyCode === DOWN_ARROW) {\n              var _ratio = _this2.getRatio(event);\n\n              _this2.down(event, _ratio);\n\n              _this2.stop();\n            } else {\n              _this2.updateDisplayValue(_this2.value);\n            }\n\n            _this2.cdr.markForCheck();\n          });\n        });\n      });\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.nzFormatter && !changes.nzFormatter.isFirstChange()) {\n        var validValue = this.getCurrentValidValue(this.parsedValue);\n        this.setValue(validValue);\n        this.updateDisplayValue(validValue);\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      if (this.nzAutoFocus) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.focusMonitor.stopMonitoring(this.elementRef);\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }]);\n\n  return NzInputNumberComponent;\n}();\n\nNzInputNumberComponent.Éµfac = function NzInputNumberComponent_Factory(t) {\n  return new (t || NzInputNumberComponent)(i0.ÉµÉµdirectiveInject(i0.NgZone), i0.ÉµÉµdirectiveInject(i0.ElementRef), i0.ÉµÉµdirectiveInject(i0.ChangeDetectorRef), i0.ÉµÉµdirectiveInject(i1.FocusMonitor), i0.ÉµÉµdirectiveInject(i2.Directionality, 8));\n};\n\nNzInputNumberComponent.Éµcmp = /* @__PURE__ */i0.ÉµÉµdefineComponent({\n  type: NzInputNumberComponent,\n  selectors: [[\"nz-input-number\"]],\n  viewQuery: function NzInputNumberComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ÉµÉµviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ÉµÉµqueryRefresh(_t = i0.ÉµÉµloadQuery()) && (ctx.inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ant-input-number\"],\n  hostVars: 10,\n  hostBindings: function NzInputNumberComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ÉµÉµclassProp(\"ant-input-number-focused\", ctx.isFocused)(\"ant-input-number-lg\", ctx.nzSize === \"large\")(\"ant-input-number-sm\", ctx.nzSize === \"small\")(\"ant-input-number-disabled\", ctx.nzDisabled)(\"ant-input-number-rtl\", ctx.dir === \"rtl\");\n    }\n  },\n  inputs: {\n    nzSize: \"nzSize\",\n    nzMin: \"nzMin\",\n    nzMax: \"nzMax\",\n    nzParser: \"nzParser\",\n    nzPrecision: \"nzPrecision\",\n    nzPrecisionMode: \"nzPrecisionMode\",\n    nzPlaceHolder: \"nzPlaceHolder\",\n    nzStep: \"nzStep\",\n    nzInputMode: \"nzInputMode\",\n    nzId: \"nzId\",\n    nzDisabled: \"nzDisabled\",\n    nzAutoFocus: \"nzAutoFocus\",\n    nzFormatter: \"nzFormatter\"\n  },\n  outputs: {\n    nzBlur: \"nzBlur\",\n    nzFocus: \"nzFocus\"\n  },\n  exportAs: [\"nzInputNumber\"],\n  features: [i0.ÉµÉµProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return NzInputNumberComponent;\n    }),\n    multi: true\n  }]), i0.ÉµÉµNgOnChangesFeature],\n  decls: 8,\n  vars: 13,\n  consts: [[1, \"ant-input-number-handler-wrap\"], [\"unselectable\", \"unselectable\", 1, \"ant-input-number-handler\", \"ant-input-number-handler-up\", 3, \"mousedown\", \"mouseup\", \"mouseleave\"], [\"nz-icon\", \"\", \"nzType\", \"up\", 1, \"ant-input-number-handler-up-inner\"], [\"unselectable\", \"unselectable\", 1, \"ant-input-number-handler\", \"ant-input-number-handler-down\", 3, \"mousedown\", \"mouseup\", \"mouseleave\"], [\"nz-icon\", \"\", \"nzType\", \"down\", 1, \"ant-input-number-handler-down-inner\"], [1, \"ant-input-number-input-wrap\"], [\"autocomplete\", \"off\", 1, \"ant-input-number-input\", 3, \"disabled\", \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"inputElement\", \"\"]],\n  template: function NzInputNumberComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ÉµÉµelementStart(0, \"div\", 0)(1, \"span\", 1);\n      i0.ÉµÉµlistener(\"mousedown\", function NzInputNumberComponent_Template_span_mousedown_1_listener($event) {\n        return ctx.up($event);\n      })(\"mouseup\", function NzInputNumberComponent_Template_span_mouseup_1_listener() {\n        return ctx.stop();\n      })(\"mouseleave\", function NzInputNumberComponent_Template_span_mouseleave_1_listener() {\n        return ctx.stop();\n      });\n      i0.ÉµÉµelement(2, \"i\", 2);\n      i0.ÉµÉµelementEnd();\n      i0.ÉµÉµelementStart(3, \"span\", 3);\n      i0.ÉµÉµlistener(\"mousedown\", function NzInputNumberComponent_Template_span_mousedown_3_listener($event) {\n        return ctx.down($event);\n      })(\"mouseup\", function NzInputNumberComponent_Template_span_mouseup_3_listener() {\n        return ctx.stop();\n      })(\"mouseleave\", function NzInputNumberComponent_Template_span_mouseleave_3_listener() {\n        return ctx.stop();\n      });\n      i0.ÉµÉµelement(4, \"i\", 4);\n      i0.ÉµÉµelementEnd()();\n      i0.ÉµÉµelementStart(5, \"div\", 5)(6, \"input\", 6, 7);\n      i0.ÉµÉµlistener(\"ngModelChange\", function NzInputNumberComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.onModelChange($event);\n      });\n      i0.ÉµÉµelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ÉµÉµadvance(1);\n      i0.ÉµÉµclassProp(\"ant-input-number-handler-up-disabled\", ctx.disabledUp);\n      i0.ÉµÉµadvance(2);\n      i0.ÉµÉµclassProp(\"ant-input-number-handler-down-disabled\", ctx.disabledDown);\n      i0.ÉµÉµadvance(3);\n      i0.ÉµÉµproperty(\"disabled\", ctx.nzDisabled)(\"placeholder\", ctx.nzPlaceHolder)(\"ngModel\", ctx.displayValue);\n      i0.ÉµÉµattribute(\"id\", ctx.nzId)(\"autofocus\", ctx.nzAutoFocus ? \"autofocus\" : null)(\"min\", ctx.nzMin)(\"max\", ctx.nzMax)(\"step\", ctx.nzStep)(\"inputmode\", ctx.nzInputMode);\n    }\n  },\n  directives: [i3.NzIconDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([InputBoolean()], NzInputNumberComponent.prototype, \"nzDisabled\", void 0);\n\n__decorate([InputBoolean()], NzInputNumberComponent.prototype, \"nzAutoFocus\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(NzInputNumberComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-input-number',\n      exportAs: 'nzInputNumber',\n      template: \"\\n    <div class=\\\"ant-input-number-handler-wrap\\\">\\n      <span\\n        unselectable=\\\"unselectable\\\"\\n        class=\\\"ant-input-number-handler ant-input-number-handler-up\\\"\\n        (mousedown)=\\\"up($event)\\\"\\n        (mouseup)=\\\"stop()\\\"\\n        (mouseleave)=\\\"stop()\\\"\\n        [class.ant-input-number-handler-up-disabled]=\\\"disabledUp\\\"\\n      >\\n        <i nz-icon nzType=\\\"up\\\" class=\\\"ant-input-number-handler-up-inner\\\"></i>\\n      </span>\\n      <span\\n        unselectable=\\\"unselectable\\\"\\n        class=\\\"ant-input-number-handler ant-input-number-handler-down\\\"\\n        (mousedown)=\\\"down($event)\\\"\\n        (mouseup)=\\\"stop()\\\"\\n        (mouseleave)=\\\"stop()\\\"\\n        [class.ant-input-number-handler-down-disabled]=\\\"disabledDown\\\"\\n      >\\n        <i nz-icon nzType=\\\"down\\\" class=\\\"ant-input-number-handler-down-inner\\\"></i>\\n      </span>\\n    </div>\\n    <div class=\\\"ant-input-number-input-wrap\\\">\\n      <input\\n        #inputElement\\n        autocomplete=\\\"off\\\"\\n        class=\\\"ant-input-number-input\\\"\\n        [attr.id]=\\\"nzId\\\"\\n        [attr.autofocus]=\\\"nzAutoFocus ? 'autofocus' : null\\\"\\n        [disabled]=\\\"nzDisabled\\\"\\n        [attr.min]=\\\"nzMin\\\"\\n        [attr.max]=\\\"nzMax\\\"\\n        [placeholder]=\\\"nzPlaceHolder\\\"\\n        [attr.step]=\\\"nzStep\\\"\\n        [attr.inputmode]=\\\"nzInputMode\\\"\\n        [ngModel]=\\\"displayValue\\\"\\n        (ngModelChange)=\\\"onModelChange($event)\\\"\\n      />\\n    </div>\\n  \",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return NzInputNumberComponent;\n        }),\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'ant-input-number',\n        '[class.ant-input-number-focused]': 'isFocused',\n        '[class.ant-input-number-lg]': \"nzSize === 'large'\",\n        '[class.ant-input-number-sm]': \"nzSize === 'small'\",\n        '[class.ant-input-number-disabled]': 'nzDisabled',\n        '[class.ant-input-number-rtl]': \"dir === 'rtl'\"\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    nzBlur: [{\n      type: Output\n    }],\n    nzFocus: [{\n      type: Output\n    }],\n    inputElement: [{\n      type: ViewChild,\n      args: ['inputElement', {\n        static: true\n      }]\n    }],\n    nzSize: [{\n      type: Input\n    }],\n    nzMin: [{\n      type: Input\n    }],\n    nzMax: [{\n      type: Input\n    }],\n    nzParser: [{\n      type: Input\n    }],\n    nzPrecision: [{\n      type: Input\n    }],\n    nzPrecisionMode: [{\n      type: Input\n    }],\n    nzPlaceHolder: [{\n      type: Input\n    }],\n    nzStep: [{\n      type: Input\n    }],\n    nzInputMode: [{\n      type: Input\n    }],\n    nzId: [{\n      type: Input\n    }],\n    nzDisabled: [{\n      type: Input\n    }],\n    nzAutoFocus: [{\n      type: Input\n    }],\n    nzFormatter: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzInputNumberModule = /*#__PURE__*/_createClass(function NzInputNumberModule() {\n  _classCallCheck(this, NzInputNumberModule);\n});\n\nNzInputNumberModule.Éµfac = function NzInputNumberModule_Factory(t) {\n  return new (t || NzInputNumberModule)();\n};\n\nNzInputNumberModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: NzInputNumberModule,\n  declarations: [NzInputNumberComponent],\n  imports: [BidiModule, CommonModule, FormsModule, NzIconModule],\n  exports: [NzInputNumberComponent]\n});\nNzInputNumberModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  imports: [[BidiModule, CommonModule, FormsModule, NzIconModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(NzInputNumberModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, CommonModule, FormsModule, NzIconModule],\n      declarations: [NzInputNumberComponent],\n      exports: [NzInputNumberComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzInputNumberComponent, NzInputNumberModule }; //# sourceMappingURL=ng-zorro-antd-input-number.mjs.map","map":null,"metadata":{},"sourceType":"module"}