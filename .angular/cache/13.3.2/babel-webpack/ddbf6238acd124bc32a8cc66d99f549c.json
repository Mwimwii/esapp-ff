{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of, from } from 'rxjs';\nimport { map, switchMap, catchError, withLatestFrom, concatMap } from 'rxjs/operators';\nimport store from 'store';\nimport { NzNotificationService } from 'ng-zorro-antd/notification';\nimport * as Reducers from 'src/app/store/reducers';\nimport * as UserActions from './actions';\nimport { basicAuthService } from 'src/app/services/basic-auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/basic-auth\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngrx/store\";\nimport * as i5 from \"ng-zorro-antd/notification\";\n\nvar UserEffects =\n/** @class */\nfunction () {\n  function UserEffects(actions, basicAuthService, router, route, rxStore, notification) {\n    var _this = this;\n\n    this.actions = actions;\n    this.basicAuthService = basicAuthService;\n    this.router = router;\n    this.route = route;\n    this.rxStore = rxStore;\n    this.notification = notification;\n    this.login = this.actions.pipe(ofType(UserActions.LOGIN), map(function (action) {\n      return action.payload;\n    }), concatMap(function (action) {\n      return of(action).pipe(withLatestFrom(_this.rxStore.pipe(select(Reducers.getSettings))));\n    }), switchMap(function (_a) {\n      var payload = _a[0],\n          settings = _a[1]; // basic-auth login\n\n      if (settings.authProvider === 'basic-auth') {\n        return _this.basicAuthService.login(payload.email, payload.password).pipe(map(function (response) {\n          // if the response is authorized\n          if (response && response.accessToken) {\n            store.set('accessToken', response.accessToken);\n\n            _this.notification.success('Logged In', 'You have successfully logged in!');\n\n            return new UserActions.LoadCurrentAccount();\n          }\n\n          _this.notification.warning('Auth Failed', response);\n\n          return new UserActions.LoginUnsuccessful();\n        }), catchError(function (error) {\n          console.log('LOGIN ERROR: ', error);\n          return from([{\n            type: UserActions.LOGIN_UNSUCCESSFUL\n          }]);\n        }));\n      }\n    }));\n    this.loadCurrentAccount = this.actions.pipe(ofType(UserActions.LOAD_CURRENT_ACCOUNT), map(function (action) {\n      return true;\n    }), concatMap(function (action) {\n      return of(action).pipe(withLatestFrom(_this.rxStore.pipe(select(Reducers.getSettings))));\n    }), switchMap(function (_a) {\n      var action = _a[0],\n          settings = _a[1]; // basic-auth load current account\n\n      if (settings.authProvider === 'basic-auth') {\n        return _this.basicAuthService.currentAccount().pipe(map(function (response) {\n          if (response && (response.email || response.username)) {\n            if (_this.route.snapshot.queryParams.returnUrl) {\n              _this.router.navigate([_this.route.snapshot.queryParams.returnUrl]); // // redirect to returnUrl\n\n            } else if (_this.router.url.includes('/auth')) {\n              _this.router.navigate(['/']); // redirect to root route on auth pages\n\n            }\n\n            return new UserActions.LoadCurrentAccountSuccessful(response);\n          }\n\n          return new UserActions.LoadCurrentAccountUnsuccessful();\n        }), catchError(function (error) {\n          console.log('ACCOUNT LOAD ERROR: ', error);\n          return from([{\n            type: UserActions.LOGIN_UNSUCCESSFUL\n          }]);\n        }));\n      }\n\n      return of(new UserActions.EmptyAction());\n    }));\n    this.logout = this.actions.pipe(ofType(UserActions.LOGOUT), map(function (action) {\n      return true;\n    }), concatMap(function (action) {\n      return of(action).pipe(withLatestFrom(_this.rxStore.pipe(select(Reducers.getSettings))));\n    }), switchMap(function (_a) {\n      var settings = _a[1]; // basic-auth logout\n\n      if (settings.authProvider === 'basic-auth') {\n        return _this.basicAuthService.logout().pipe(map(function () {\n          store.remove('accessToken');\n\n          _this.router.navigate(['/auth/login']);\n\n          return new UserActions.FlushUser();\n        }));\n      }\n\n      return of(new UserActions.EmptyAction());\n    }));\n  }\n\n  UserEffects.prototype.ngrxOnInitEffects = function () {\n    return {\n      type: UserActions.LOAD_CURRENT_ACCOUNT\n    };\n  };\n\n  UserEffects.ɵfac = function UserEffects_Factory(t) {\n    return new (t || UserEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.basicAuthService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i3.ActivatedRoute), i0.ɵɵinject(i4.Store), i0.ɵɵinject(i5.NzNotificationService));\n  };\n\n  UserEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserEffects,\n    factory: UserEffects.ɵfac\n  });\n\n  __decorate([Effect(), __metadata(\"design:type\", Observable)], UserEffects.prototype, \"login\", void 0);\n\n  __decorate([Effect(), __metadata(\"design:type\", Observable)], UserEffects.prototype, \"loadCurrentAccount\", void 0);\n\n  __decorate([Effect(), __metadata(\"design:type\", Observable)], UserEffects.prototype, \"logout\", void 0);\n\n  return UserEffects;\n}();\n\nexport { UserEffects };","map":null,"metadata":{},"sourceType":"module"}