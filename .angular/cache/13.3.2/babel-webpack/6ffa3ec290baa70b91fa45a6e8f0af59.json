{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport qs from 'qs';\nimport { Router, NavigationEnd, ActivatedRoute, NavigationStart } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\nimport { filter, map, mergeMap } from 'rxjs/operators';\nimport { select, Store } from '@ngrx/store';\nimport store from 'store';\nimport * as SettingsActions from 'src/app/store/settings/actions';\nimport * as Reducers from 'src/app/store/reducers';\nimport english from './locales/en-US';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@ngrx/store\";\nvar locales = {\n  'en-US': english\n};\nexport var AppComponent = /*#__PURE__*/(function () {\n  var AppComponent = /*#__PURE__*/function () {\n    function AppComponent(router, activatedRoute, titleService, store) {\n      var _this = this;\n\n      _classCallCheck(this, AppComponent);\n\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.titleService = titleService;\n      this.store = store;\n      this.pageTitle = '';\n      this.firstTouch = false; // set title\n\n      this.setTitle = function () {\n        _this.titleService.setTitle(\"\".concat(_this.logo, \" | \").concat(_this.pageTitle));\n      }; // set version\n\n\n      this.setVersion = function (version) {\n        document.querySelector('html').setAttribute('data-vb-version', version);\n      }; // set theme\n\n\n      this.setTheme = function (theme) {\n        if (_this.firstTouch) {\n          document.querySelector('html').setAttribute('data-vb-theme', theme);\n\n          if (theme === 'default') {\n            _this.store.dispatch(new SettingsActions.SetStateAction({\n              menuColor: 'white'\n            }));\n          }\n\n          if (theme === 'dark') {\n            _this.store.dispatch(new SettingsActions.SetStateAction({\n              menuColor: 'dark'\n            }));\n          }\n        }\n\n        _this.firstTouch = true;\n      }; // localization && theme listener\n\n\n      this.store.pipe(select(Reducers.getSettings)).subscribe(function (state) {\n        if (_this._theme !== state.theme) {\n          _this.setTheme(state.theme);\n        }\n\n        if (_this._version !== state.version) {\n          _this.setVersion(state.version);\n        }\n\n        _this._locale = state.locale;\n        _this._theme = state.theme;\n        _this.logo = state.logo;\n\n        _this.setTitle();\n      });\n    }\n\n    _createClass(AppComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        // set page title from router data variable\n        this.router.events.pipe(filter(function (event) {\n          return event instanceof NavigationEnd;\n        }), map(function () {\n          return _this2.activatedRoute;\n        }), map(function (route) {\n          while (route.firstChild) {\n            route = route.firstChild;\n          }\n\n          return route;\n        }), map(function (route) {\n          while (route.firstChild) {\n            route = route.firstChild;\n          }\n\n          return route;\n        }), filter(function (route) {\n          return route.outlet === 'primary';\n        }), mergeMap(function (route) {\n          return route.data;\n        })).subscribe(function (event) {\n          _this2.pageTitle = event['title'];\n\n          _this2.setTitle();\n        }); // listen url query params and set them to ngrx store\n\n        this.router.events.pipe(filter(function (event) {\n          return event instanceof NavigationStart;\n        })).subscribe(function (event) {\n          var queryString = event.url.match(/\\?(.*)/);\n\n          if (queryString) {\n            var queryParams = qs.parse(queryString[1]);\n            console.log(queryParams);\n            var keys = Object.keys(queryParams);\n\n            if (keys.length) {\n              keys.forEach(function (key) {\n                var value;\n\n                switch (queryParams[key]) {\n                  case 'false':\n                    value = false;\n                    break;\n\n                  case 'true':\n                    value = true;\n                    break;\n\n                  default:\n                    value = queryParams[key];\n                    break;\n                }\n\n                console.log(key, value);\n\n                _this2.store.dispatch(new SettingsActions.SetStateAction(_defineProperty({}, key, value)));\n              });\n            }\n          }\n        }); // detecting & set mobile/tablet/desktop viewports\n\n        var setViewPort = function setViewPort() {\n          var isMobileView = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n          var isTabletView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          _this2.store.dispatch(new SettingsActions.SetStateAction({\n            isMobileView: isMobileView\n          }));\n\n          _this2.store.dispatch(new SettingsActions.SetStateAction({\n            isTabletView: isTabletView\n          }));\n        };\n\n        var detectViewPort = function detectViewPort() {\n          var load = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n          var _isMobileView = window.innerWidth < 768;\n\n          var _isTabletView = window.innerWidth < 992;\n\n          var _isDesktopView = !_isMobileView && !_isTabletView;\n\n          var isMobileView = store.get('app.settings.isMobileView');\n          var isTabletView = store.get('app.settings.isTabletView');\n          var isDesktopView = !isMobileView && !isTabletView;\n\n          if (_isDesktopView && (_isDesktopView !== isDesktopView || load)) {\n            setViewPort(false, false);\n          }\n\n          if (_isTabletView && !_isMobileView && (_isTabletView !== isTabletView || load)) {\n            setViewPort(false, true);\n\n            _this2.store.dispatch(new SettingsActions.SetStateAction({\n              isMenuCollapsed: true\n            }));\n          }\n\n          if (_isMobileView && (_isMobileView !== isMobileView || load)) {\n            setViewPort(true, false);\n          }\n        };\n\n        detectViewPort(true);\n        window.addEventListener('resize', function () {\n          detectViewPort();\n        }); // set primary color on app load\n\n        var primaryColor = function primaryColor() {\n          var color = store.get('app.settings.primaryColor');\n\n          if (color) {\n            var addStyles = function addStyles() {\n              var styleElement = document.querySelector('#primaryColor');\n\n              if (styleElement) {\n                styleElement.remove();\n              }\n\n              var body = document.querySelector('body');\n              var styleEl = document.createElement('style');\n              var css = document.createTextNode(\":root { --vb-color-primary: \".concat(color, \";}\"));\n              styleEl.setAttribute('id', 'primaryColor');\n              styleEl.appendChild(css);\n              body.appendChild(styleEl);\n            };\n\n            addStyles();\n\n            _this2.store.dispatch(new SettingsActions.SetStateAction({\n              primaryColor: color\n            }));\n          }\n        };\n\n        primaryColor();\n      }\n    }]);\n\n    return AppComponent;\n  }();\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Title), i0.ɵɵdirectiveInject(i3.Store));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 2,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"ng-progress\")(1, \"router-outlet\");\n      }\n    },\n    encapsulation: 2\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}