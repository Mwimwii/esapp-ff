{"ast":null,"code":"import qs from 'qs';\nimport { Router, NavigationEnd, ActivatedRoute, NavigationStart } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\nimport { filter, map, mergeMap } from 'rxjs/operators';\nimport { select, Store } from '@ngrx/store';\nimport store from 'store';\nimport * as SettingsActions from 'src/app/store/settings/actions';\nimport * as Reducers from 'src/app/store/reducers';\nimport { TranslateService } from '@ngx-translate/core';\nimport english from './locales/en-US';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@ngx-translate/core\";\nimport * as i5 from \"ngx-progressbar\";\nconst locales = {\n  'en-US': english\n};\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(router, activatedRoute, titleService, store, translate) {\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.titleService = titleService;\n      this.store = store;\n      this.pageTitle = '';\n      this.firstTouch = false; // set title\n\n      this.setTitle = () => {\n        this.titleService.setTitle(`${this.logo} | ${this.pageTitle}`);\n      }; // set version\n\n\n      this.setVersion = version => {\n        document.querySelector('html').setAttribute('data-vb-version', version);\n      }; // set theme\n\n\n      this.setTheme = theme => {\n        if (this.firstTouch) {\n          document.querySelector('html').setAttribute('data-vb-theme', theme);\n\n          if (theme === 'default') {\n            this.store.dispatch(new SettingsActions.SetStateAction({\n              menuColor: 'white'\n            }));\n          }\n\n          if (theme === 'dark') {\n            this.store.dispatch(new SettingsActions.SetStateAction({\n              menuColor: 'dark'\n            }));\n          }\n        }\n\n        this.firstTouch = true;\n      };\n\n      Object.keys(locales).forEach(locale => {\n        translate.setTranslation(locale, locales[locale]);\n      });\n      translate.setDefaultLang('en-US'); // localization && theme listener\n\n      this.store.pipe(select(Reducers.getSettings)).subscribe(state => {\n        if (this._locale !== state.locale) {\n          translate.use(state.locale);\n        }\n\n        if (this._theme !== state.theme) {\n          this.setTheme(state.theme);\n        }\n\n        if (this._version !== state.version) {\n          this.setVersion(state.version);\n        }\n\n        this._locale = locales[state.locale];\n        this._theme = state.theme;\n        this.logo = state.logo;\n        this.setTitle();\n      });\n    }\n\n    ngOnInit() {\n      // set page title from router data variable\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd), map(() => this.activatedRoute), map(route => {\n        while (route.firstChild) {\n          route = route.firstChild;\n        }\n\n        return route;\n      }), map(route => {\n        while (route.firstChild) {\n          route = route.firstChild;\n        }\n\n        return route;\n      }), filter(route => route.outlet === 'primary'), mergeMap(route => route.data)).subscribe(event => {\n        this.pageTitle = event['title'];\n        this.setTitle();\n      }); // listen url query params and set them to ngrx store\n\n      this.router.events.pipe(filter(event => event instanceof NavigationStart)).subscribe(event => {\n        const queryString = event.url.match(/\\?(.*)/);\n\n        if (queryString) {\n          const queryParams = qs.parse(queryString[1]);\n          console.log(queryParams);\n          const keys = Object.keys(queryParams);\n\n          if (keys.length) {\n            keys.forEach(key => {\n              let value;\n\n              switch (queryParams[key]) {\n                case 'false':\n                  value = false;\n                  break;\n\n                case 'true':\n                  value = true;\n                  break;\n\n                default:\n                  value = queryParams[key];\n                  break;\n              }\n\n              console.log(key, value);\n              this.store.dispatch(new SettingsActions.SetStateAction({\n                [key]: value\n              }));\n            });\n          }\n        }\n      }); // detecting & set mobile/tablet/desktop viewports\n\n      const setViewPort = (isMobileView = false, isTabletView = false) => {\n        this.store.dispatch(new SettingsActions.SetStateAction({\n          isMobileView\n        }));\n        this.store.dispatch(new SettingsActions.SetStateAction({\n          isTabletView\n        }));\n      };\n\n      const detectViewPort = (load = false) => {\n        const _isMobileView = window.innerWidth < 768;\n\n        const _isTabletView = window.innerWidth < 992;\n\n        const _isDesktopView = !_isMobileView && !_isTabletView;\n\n        const isMobileView = store.get('app.settings.isMobileView');\n        const isTabletView = store.get('app.settings.isTabletView');\n        const isDesktopView = !isMobileView && !isTabletView;\n\n        if (_isDesktopView && (_isDesktopView !== isDesktopView || load)) {\n          setViewPort(false, false);\n        }\n\n        if (_isTabletView && !_isMobileView && (_isTabletView !== isTabletView || load)) {\n          setViewPort(false, true);\n          this.store.dispatch(new SettingsActions.SetStateAction({\n            isMenuCollapsed: true\n          }));\n        }\n\n        if (_isMobileView && (_isMobileView !== isMobileView || load)) {\n          setViewPort(true, false);\n        }\n      };\n\n      detectViewPort(true);\n      window.addEventListener('resize', () => {\n        detectViewPort();\n      }); // set primary color on app load\n\n      const primaryColor = () => {\n        const color = store.get('app.settings.primaryColor');\n\n        if (color) {\n          const addStyles = () => {\n            const styleElement = document.querySelector('#primaryColor');\n\n            if (styleElement) {\n              styleElement.remove();\n            }\n\n            const body = document.querySelector('body');\n            const styleEl = document.createElement('style');\n            const css = document.createTextNode(`:root { --vb-color-primary: ${color};}`);\n            styleEl.setAttribute('id', 'primaryColor');\n            styleEl.appendChild(css);\n            body.appendChild(styleEl);\n          };\n\n          addStyles();\n          this.store.dispatch(new SettingsActions.SetStateAction({\n            primaryColor: color\n          }));\n        }\n      };\n\n      primaryColor();\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Title), i0.ɵɵdirectiveInject(i3.Store), i0.ɵɵdirectiveInject(i4.TranslateService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 2,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"ng-progress\")(1, \"router-outlet\");\n      }\n    },\n    directives: [i5.NgProgressComponent, i1.RouterOutlet],\n    encapsulation: 2\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}