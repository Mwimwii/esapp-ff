{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // eslint-disable-next-line import/no-extraneous-dependencies\n\nconst core_1 = require(\"@angular/core\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nfunction default_1(mod) {\n  if (!mod['hot']) {\n    return;\n  }\n\n  if (!(0, core_1.isDevMode)()) {\n    console.error(`[NG HMR] Cannot use HMR when Angular is running in production mode. To prevent production mode, do not call 'enableProdMode()'.`);\n    return;\n  }\n\n  mod['hot'].accept();\n  mod['hot'].dispose(() => {\n    if (typeof ng === 'undefined') {\n      console.warn(`[NG HMR] Cannot find global 'ng'. Likely this is caused because scripts optimization is enabled.`);\n      return;\n    }\n\n    if (!ng.getInjector) {\n      // View Engine\n      return;\n    } // Reset JIT compiled components cache\n\n\n    (0, core_1.ÉµresetCompiledComponents)();\n    const appRoot = getAppRoot();\n\n    if (!appRoot) {\n      return;\n    }\n\n    const appRef = getApplicationRef(appRoot);\n\n    if (!appRef) {\n      return;\n    } // Inputs that are hidden should be ignored\n\n\n    const oldInputs = document.querySelectorAll('input:not([type=\"hidden\"]), textarea');\n    const oldOptions = document.querySelectorAll('option'); // Create new application\n\n    appRef.components.forEach(cp => {\n      const element = cp.location.nativeElement;\n      const parentNode = element.parentNode;\n      parentNode.insertBefore(document.createElement(element.tagName), element);\n      parentNode.removeChild(element);\n    }); // Destroy old application, injectors, <style..., etc..\n\n    const platformRef = getPlatformRef(appRoot);\n\n    if (platformRef) {\n      platformRef.destroy();\n    } // Restore all inputs and options\n\n\n    const bodyElement = document.body;\n\n    if (oldInputs.length + oldOptions.length === 0 || !bodyElement) {\n      return;\n    } // Use a `MutationObserver` to wait until the app-root element has been bootstrapped.\n    // ie: when the ng-version attribute is added.\n\n\n    new MutationObserver((_mutationsList, observer) => {\n      observer.disconnect();\n      const newAppRoot = getAppRoot();\n\n      if (!newAppRoot) {\n        return;\n      }\n\n      const newAppRef = getApplicationRef(newAppRoot);\n\n      if (!newAppRef) {\n        return;\n      } // Wait until the application isStable to restore the form values\n\n\n      newAppRef.isStable.pipe((0, operators_1.filter)(isStable => !!isStable), (0, operators_1.take)(1)).subscribe(() => restoreFormValues(oldInputs, oldOptions));\n    }).observe(bodyElement, {\n      attributes: true,\n      subtree: true,\n      attributeFilter: ['ng-version']\n    });\n  });\n}\n\nexports.default = default_1;\n\nfunction getAppRoot() {\n  const appRoot = document.querySelector('[ng-version]');\n\n  if (!appRoot) {\n    console.warn('[NG HMR] Cannot find the application root component.');\n    return undefined;\n  }\n\n  return appRoot;\n}\n\nfunction getToken(appRoot, token) {\n  return typeof ng === 'object' && ng.getInjector(appRoot).get(token) || undefined;\n}\n\nfunction getApplicationRef(appRoot) {\n  const appRef = getToken(appRoot, core_1.ApplicationRef);\n\n  if (!appRef) {\n    console.warn(`[NG HMR] Cannot get 'ApplicationRef'.`);\n    return undefined;\n  }\n\n  return appRef;\n}\n\nfunction getPlatformRef(appRoot) {\n  const platformRef = getToken(appRoot, core_1.PlatformRef);\n\n  if (!platformRef) {\n    console.warn(`[NG HMR] Cannot get 'PlatformRef'.`);\n    return undefined;\n  }\n\n  return platformRef;\n}\n\nfunction dispatchEvents(element) {\n  element.dispatchEvent(new Event('input', {\n    bubbles: true,\n    cancelable: true\n  }));\n  element.blur();\n  element.dispatchEvent(new KeyboardEvent('keyup', {\n    key: 'Enter'\n  }));\n}\n\nfunction restoreFormValues(oldInputs, oldOptions) {\n  // Restore input that are not hidden\n  const newInputs = document.querySelectorAll('input:not([type=\"hidden\"]), textarea');\n\n  if (newInputs.length && newInputs.length === oldInputs.length) {\n    console.log('[NG HMR] Restoring input/textarea values.');\n\n    for (let index = 0; index < newInputs.length; index++) {\n      const newElement = newInputs[index];\n      const oldElement = oldInputs[index];\n\n      switch (oldElement.type) {\n        case 'button':\n        case 'image':\n        case 'submit':\n        case 'reset':\n          // These types don't need any value change.\n          continue;\n\n        case 'radio':\n        case 'checkbox':\n          newElement.checked = oldElement.checked;\n          break;\n\n        case 'color':\n        case 'date':\n        case 'datetime-local':\n        case 'email':\n        case 'hidden':\n        case 'month':\n        case 'number':\n        case 'password':\n        case 'range':\n        case 'search':\n        case 'tel':\n        case 'text':\n        case 'textarea':\n        case 'time':\n        case 'url':\n        case 'week':\n          newElement.value = oldElement.value;\n          break;\n\n        case 'file':\n          // Ignored due: Uncaught DOMException: Failed to set the 'value' property on 'HTMLInputElement':\n          // This input element accepts a filename, which may only be programmatically set to the empty string.\n          break;\n\n        default:\n          console.warn('[NG HMR] Unknown input type ' + oldElement.type + '.');\n          continue;\n      }\n\n      dispatchEvents(newElement);\n    }\n  } else if (oldInputs.length) {\n    console.warn('[NG HMR] Cannot restore input/textarea values.');\n  } // Restore option\n\n\n  const newOptions = document.querySelectorAll('option');\n\n  if (newOptions.length && newOptions.length === oldOptions.length) {\n    console.log('[NG HMR] Restoring selected options.');\n\n    for (let index = 0; index < newOptions.length; index++) {\n      const newElement = newOptions[index];\n      newElement.selected = oldOptions[index].selected;\n      dispatchEvents(newElement);\n    }\n  } else if (oldOptions.length) {\n    console.warn('[NG HMR] Cannot restore selected options.');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}