{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Pipe, NgModule } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar FormlySelectOptionsPipe = /*#__PURE__*/(function () {\n  var FormlySelectOptionsPipe = /*#__PURE__*/function () {\n    function FormlySelectOptionsPipe() {\n      _classCallCheck(this, FormlySelectOptionsPipe);\n    }\n\n    _createClass(FormlySelectOptionsPipe, [{\n      key: \"transform\",\n      value:\n      /**\n       * @param {?} options\n       * @param {?=} field\n       * @return {?}\n       */\n      function transform(options, field) {\n        var _this = this;\n\n        if (!(options instanceof Observable)) {\n          options = of(options);\n        }\n\n        return (\n          /** @type {?} */\n          options.pipe(map(\n          /**\n          * @param {?} value\n          * @return {?}\n          */\n          function (value) {\n            return _this.toOptions(value, field || {});\n          }))\n        );\n      }\n      /**\n       * @private\n       * @param {?} options\n       * @param {?} field\n       * @return {?}\n       */\n\n    }, {\n      key: \"toOptions\",\n      value: function toOptions(options, field) {\n        var _this2 = this;\n\n        /** @type {?} */\n        var gOptions = [];\n        /** @type {?} */\n\n        var groups = {};\n        /** @type {?} */\n\n        var to = field.templateOptions || {};\n        to._flatOptions = true;\n        options.map(\n        /**\n        * @param {?} option\n        * @return {?}\n        */\n        function (option) {\n          if (!_this2.getGroupProp(option, to)) {\n            gOptions.push(_this2.toOption(option, to));\n          } else {\n            to._flatOptions = false;\n\n            if (!groups[_this2.getGroupProp(option, to)]) {\n              groups[_this2.getGroupProp(option, to)] = [];\n              gOptions.push({\n                label: _this2.getGroupProp(option, to),\n                group: groups[_this2.getGroupProp(option, to)]\n              });\n            }\n\n            groups[_this2.getGroupProp(option, to)].push(_this2.toOption(option, to));\n          }\n        });\n        return gOptions;\n      }\n      /**\n       * @private\n       * @param {?} item\n       * @param {?} to\n       * @return {?}\n       */\n\n    }, {\n      key: \"toOption\",\n      value: function toOption(item, to) {\n        return {\n          label: this.getLabelProp(item, to),\n          value: this.getValueProp(item, to),\n          disabled: this.getDisabledProp(item, to) || false\n        };\n      }\n      /**\n       * @private\n       * @param {?} item\n       * @param {?} to\n       * @return {?}\n       */\n\n    }, {\n      key: \"getLabelProp\",\n      value: function getLabelProp(item, to) {\n        if (typeof to.labelProp === 'function') {\n          return to.labelProp(item);\n        }\n\n        if (this.shouldUseLegacyOption(item, to)) {\n          console.warn(\"NgxFormly: legacy select option '{key, value}' is deprecated since v5.5, use '{value, label}' instead.\");\n          return item.value;\n        }\n\n        return item[to.labelProp || 'label'];\n      }\n      /**\n       * @private\n       * @param {?} item\n       * @param {?} to\n       * @return {?}\n       */\n\n    }, {\n      key: \"getValueProp\",\n      value: function getValueProp(item, to) {\n        if (typeof to.valueProp === 'function') {\n          return to.valueProp(item);\n        }\n\n        if (this.shouldUseLegacyOption(item, to)) {\n          return item.key;\n        }\n\n        return item[to.valueProp || 'value'];\n      }\n      /**\n       * @private\n       * @param {?} item\n       * @param {?} to\n       * @return {?}\n       */\n\n    }, {\n      key: \"getDisabledProp\",\n      value: function getDisabledProp(item, to) {\n        if (typeof to.disabledProp === 'function') {\n          return to.disabledProp(item);\n        }\n\n        return item[to.disabledProp || 'disabled'];\n      }\n      /**\n       * @private\n       * @param {?} item\n       * @param {?} to\n       * @return {?}\n       */\n\n    }, {\n      key: \"getGroupProp\",\n      value: function getGroupProp(item, to) {\n        if (typeof to.groupProp === 'function') {\n          return to.groupProp(item);\n        }\n\n        return item[to.groupProp || 'group'];\n      }\n      /**\n       * @private\n       * @param {?} item\n       * @param {?} to\n       * @return {?}\n       */\n\n    }, {\n      key: \"shouldUseLegacyOption\",\n      value: function shouldUseLegacyOption(item, to) {\n        return !to.valueProp && !to.labelProp && item != null && typeof item === 'object' && 'key' in item && 'value' in item;\n      }\n    }]);\n\n    return FormlySelectOptionsPipe;\n  }();\n\n  FormlySelectOptionsPipe.ɵfac = function FormlySelectOptionsPipe_Factory(t) {\n    return new (t || FormlySelectOptionsPipe)();\n  };\n\n  FormlySelectOptionsPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"formlySelectOptions\",\n    type: FormlySelectOptionsPipe,\n    pure: true\n  });\n  return FormlySelectOptionsPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar FormlySelectModule = /*#__PURE__*/(function () {\n  var FormlySelectModule = /*#__PURE__*/_createClass(function FormlySelectModule() {\n    _classCallCheck(this, FormlySelectModule);\n  });\n\n  FormlySelectModule.ɵfac = function FormlySelectModule_Factory(t) {\n    return new (t || FormlySelectModule)();\n  };\n\n  FormlySelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FormlySelectModule\n  });\n  FormlySelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return FormlySelectModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlySelectModule, {\n    declarations: [FormlySelectOptionsPipe],\n    exports: [FormlySelectOptionsPipe]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { FormlySelectModule, FormlySelectOptionsPipe }; //# sourceMappingURL=ngx-formly-core-select.js.map","map":null,"metadata":{},"sourceType":"module"}