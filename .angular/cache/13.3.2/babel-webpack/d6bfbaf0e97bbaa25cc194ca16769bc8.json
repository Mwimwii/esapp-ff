{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./sidebar.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./sidebar.component.scss?ngResource\";\nimport { Component } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport * as SettingsActions from 'src/app/store/settings/actions';\nimport * as Reducers from 'src/app/store/reducers';\n\nvar SidebarComponent = /*#__PURE__*/function () {\n  function SidebarComponent(store) {\n    var _this = this;\n\n    _classCallCheck(this, SidebarComponent);\n\n    this.store = store;\n    this.settings = {};\n    this.defaultColor = '#28A745';\n    this.window = window;\n    this.store.pipe(select(Reducers.getSettings)).subscribe(function (state) {\n      _this.settings = state;\n      _this.theme = state.theme === 'dark';\n    });\n  }\n\n  _createClass(SidebarComponent, [{\n    key: \"toggleSettings\",\n    value: function toggleSettings() {\n      this.store.dispatch(new SettingsActions.SetStateAction({\n        isSidebarOpen: !this.settings.isSidebarOpen\n      }));\n    }\n  }, {\n    key: \"togglePreselectedThemes\",\n    value: function togglePreselectedThemes() {\n      this.store.dispatch(new SettingsActions.SetStateAction({\n        isPreselectedOpen: !this.settings.isPreselectedOpen\n      }));\n    }\n  }, {\n    key: \"settingChange\",\n    value: function settingChange(value, setting) {\n      this.store.dispatch(new SettingsActions.SetStateAction(_defineProperty({}, setting, value)));\n    }\n  }, {\n    key: \"settingChangeTheme\",\n    value: function settingChangeTheme(value, setting) {\n      this.store.dispatch(new SettingsActions.SetStateAction(_defineProperty({}, setting, value ? 'dark' : 'default')));\n    }\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(value) {\n      this.store.dispatch(new SettingsActions.SetStateAction({\n        leftMenuWidth: value\n      }));\n    }\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(nextTheme) {\n      this.store.dispatch(new SettingsActions.SetStateAction({\n        theme: nextTheme\n      }));\n    }\n  }, {\n    key: \"setPrimaryColor\",\n    value: function setPrimaryColor(e) {\n      var color = e.target ? e.target.value : e;\n\n      var addStyles = function addStyles() {\n        var styleElement = document.querySelector('#primaryColor');\n\n        if (styleElement) {\n          styleElement.remove();\n        }\n\n        var body = document.querySelector('body');\n        var styleEl = document.createElement('style');\n        var css = document.createTextNode(\":root { --vb-color-primary: \".concat(color, \";}\"));\n        styleEl.setAttribute('id', 'primaryColor');\n        styleEl.appendChild(css);\n        body.appendChild(styleEl);\n      };\n\n      addStyles();\n      this.store.dispatch(new SettingsActions.SetStateAction({\n        primaryColor: color\n      }));\n    }\n  }, {\n    key: \"resetColor\",\n    value: function resetColor() {\n      this.setPrimaryColor(this.defaultColor);\n    }\n  }]);\n\n  return SidebarComponent;\n}();\n\nSidebarComponent.ctorParameters = function () {\n  return [{\n    type: Store\n  }];\n};\n\nSidebarComponent = __decorate([Component({\n  selector: 'vb-sidebar',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n}), __metadata(\"design:paramtypes\", [Store])], SidebarComponent);\nexport { SidebarComponent };","map":null,"metadata":{},"sourceType":"module"}