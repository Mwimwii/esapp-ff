{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _inherits from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport * as i3 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, Self, Directive, Input, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { Subject, from } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IconService, IconDirective } from '@ant-design/icons-angular';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { DOCUMENT } from '@angular/common';\nimport { BarsOutline, CalendarOutline, CaretUpFill, CaretUpOutline, CaretDownFill, CaretDownOutline, CheckCircleFill, CheckCircleOutline, CheckOutline, ClockCircleOutline, CloseCircleOutline, CloseCircleFill, CloseOutline, CopyOutline, DoubleLeftOutline, DoubleRightOutline, DownOutline, EditOutline, EllipsisOutline, ExclamationCircleFill, ExclamationCircleOutline, EyeOutline, FileFill, FileOutline, FilterFill, InfoCircleFill, InfoCircleOutline, LeftOutline, LoadingOutline, PaperClipOutline, QuestionCircleOutline, RightOutline, RotateRightOutline, RotateLeftOutline, StarFill, SearchOutline, UploadOutline, VerticalAlignTopOutline, UpOutline, SwapRightOutline, ZoomInOutline, ZoomOutOutline } from '@ant-design/icons-angular/icons';\nimport * as i1 from '@angular/platform-browser';\nimport * as i2 from 'ng-zorro-antd/core/config';\nimport * as i4 from '@angular/common/http';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar NZ_ICONS_USED_BY_ZORRO = [BarsOutline, CalendarOutline, CaretUpFill, CaretUpOutline, CaretDownFill, CaretDownOutline, CheckCircleFill, CheckCircleOutline, CheckOutline, ClockCircleOutline, CloseCircleOutline, CloseCircleFill, CloseOutline, CopyOutline, DoubleLeftOutline, DoubleRightOutline, DownOutline, EditOutline, EllipsisOutline, ExclamationCircleFill, ExclamationCircleOutline, EyeOutline, FileFill, FileOutline, FilterFill, InfoCircleFill, InfoCircleOutline, LeftOutline, LoadingOutline, PaperClipOutline, QuestionCircleOutline, RightOutline, RotateRightOutline, RotateLeftOutline, StarFill, SearchOutline, StarFill, UploadOutline, VerticalAlignTopOutline, UpOutline, SwapRightOutline, ZoomInOutline, ZoomOutOutline];\nvar NZ_ICONS = new InjectionToken('nz_icons');\nvar NZ_ICON_DEFAULT_TWOTONE_COLOR = new InjectionToken('nz_icon_default_twotone_color');\nvar DEFAULT_TWOTONE_COLOR = '#1890ff';\n/**\n * It should be a global singleton, otherwise registered icons could not be found.\n */\n\nvar NzIconService = /*#__PURE__*/(function () {\n  var NzIconService = /*#__PURE__*/function (_IconService) {\n    _inherits(NzIconService, _IconService);\n\n    var _super = _createSuper(NzIconService);\n\n    function NzIconService(rendererFactory, sanitizer, nzConfigService, platform, handler, _document, icons) {\n      var _this;\n\n      _classCallCheck(this, NzIconService);\n\n      _this = _super.call(this, rendererFactory, handler, _document, sanitizer, [].concat(NZ_ICONS_USED_BY_ZORRO, _toConsumableArray(icons || [])));\n      _this.nzConfigService = nzConfigService;\n      _this.platform = platform;\n      _this.configUpdated$ = new Subject();\n      _this.iconfontCache = new Set();\n      _this.subscription = null;\n\n      _this.onConfigChange();\n\n      _this.configDefaultTwotoneColor();\n\n      _this.configDefaultTheme();\n\n      return _this;\n    }\n\n    _createClass(NzIconService, [{\n      key: \"_disableDynamicLoading\",\n      get: function get() {\n        return !this.platform.isBrowser;\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.subscription) {\n          this.subscription.unsubscribe();\n          this.subscription = null;\n        }\n      }\n    }, {\n      key: \"normalizeSvgElement\",\n      value: function normalizeSvgElement(svg) {\n        if (!svg.getAttribute('viewBox')) {\n          this._renderer.setAttribute(svg, 'viewBox', '0 0 1024 1024');\n        }\n\n        if (!svg.getAttribute('width') || !svg.getAttribute('height')) {\n          this._renderer.setAttribute(svg, 'width', '1em');\n\n          this._renderer.setAttribute(svg, 'height', '1em');\n        }\n\n        if (!svg.getAttribute('fill')) {\n          this._renderer.setAttribute(svg, 'fill', 'currentColor');\n        }\n      }\n    }, {\n      key: \"fetchFromIconfont\",\n      value: function fetchFromIconfont(opt) {\n        var scriptUrl = opt.scriptUrl;\n\n        if (this._document && !this.iconfontCache.has(scriptUrl)) {\n          var script = this._renderer.createElement('script');\n\n          this._renderer.setAttribute(script, 'src', scriptUrl);\n\n          this._renderer.setAttribute(script, 'data-namespace', scriptUrl.replace(/^(https?|http):/g, ''));\n\n          this._renderer.appendChild(this._document.body, script);\n\n          this.iconfontCache.add(scriptUrl);\n        }\n      }\n    }, {\n      key: \"createIconfontIcon\",\n      value: function createIconfontIcon(type) {\n        return this._createSVGElementFromString(\"<svg><use xlink:href=\\\"\".concat(type, \"\\\"></svg>\"));\n      }\n    }, {\n      key: \"onConfigChange\",\n      value: function onConfigChange() {\n        var _this2 = this;\n\n        this.subscription = this.nzConfigService.getConfigChangeEventForComponent('icon').subscribe(function () {\n          _this2.configDefaultTwotoneColor();\n\n          _this2.configDefaultTheme();\n\n          _this2.configUpdated$.next();\n        });\n      }\n    }, {\n      key: \"configDefaultTheme\",\n      value: function configDefaultTheme() {\n        var iconConfig = this.getConfig();\n        this.defaultTheme = iconConfig.nzTheme || 'outline';\n      }\n    }, {\n      key: \"configDefaultTwotoneColor\",\n      value: function configDefaultTwotoneColor() {\n        var iconConfig = this.getConfig();\n        var defaultTwotoneColor = iconConfig.nzTwotoneColor || DEFAULT_TWOTONE_COLOR;\n        var primaryColor = DEFAULT_TWOTONE_COLOR;\n\n        if (defaultTwotoneColor) {\n          if (defaultTwotoneColor.startsWith('#')) {\n            primaryColor = defaultTwotoneColor;\n          } else {\n            warn('Twotone color must be a hex color!');\n          }\n        }\n\n        this.twoToneColor = {\n          primaryColor: primaryColor\n        };\n      }\n    }, {\n      key: \"getConfig\",\n      value: function getConfig() {\n        return this.nzConfigService.getConfigForComponent('icon') || {};\n      }\n    }]);\n\n    return NzIconService;\n  }(IconService);\n\n  NzIconService.ɵfac = function NzIconService_Factory(t) {\n    return new (t || NzIconService)(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.DomSanitizer), i0.ɵɵinject(i2.NzConfigService), i0.ɵɵinject(i3.Platform), i0.ɵɵinject(i4.HttpBackend, 8), i0.ɵɵinject(DOCUMENT, 8), i0.ɵɵinject(NZ_ICONS, 8));\n  };\n\n  NzIconService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NzIconService,\n    factory: NzIconService.ɵfac,\n    providedIn: 'root'\n  });\n  return NzIconService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar NZ_ICONS_PATCH = new InjectionToken('nz_icons_patch');\nvar NzIconPatchService = /*#__PURE__*/(function () {\n  var NzIconPatchService = /*#__PURE__*/function () {\n    function NzIconPatchService(extraIcons, rootIconService) {\n      _classCallCheck(this, NzIconPatchService);\n\n      this.extraIcons = extraIcons;\n      this.rootIconService = rootIconService;\n      this.patched = false;\n    }\n\n    _createClass(NzIconPatchService, [{\n      key: \"doPatch\",\n      value: function doPatch() {\n        var _this3 = this;\n\n        if (this.patched) {\n          return;\n        }\n\n        this.extraIcons.forEach(function (iconDefinition) {\n          return _this3.rootIconService.addIcon(iconDefinition);\n        });\n        this.patched = true;\n      }\n    }]);\n\n    return NzIconPatchService;\n  }();\n\n  NzIconPatchService.ɵfac = function NzIconPatchService_Factory(t) {\n    return new (t || NzIconPatchService)(i0.ɵɵinject(NZ_ICONS_PATCH, 2), i0.ɵɵinject(NzIconService));\n  };\n\n  NzIconPatchService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NzIconPatchService,\n    factory: NzIconPatchService.ɵfac\n  });\n  return NzIconPatchService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar NzIconDirective = /*#__PURE__*/(function () {\n  var NzIconDirective = /*#__PURE__*/function (_IconDirective) {\n    _inherits(NzIconDirective, _IconDirective);\n\n    var _super2 = _createSuper(NzIconDirective);\n\n    function NzIconDirective(ngZone, changeDetectorRef, elementRef, iconService, renderer, iconPatch) {\n      var _this4;\n\n      _classCallCheck(this, NzIconDirective);\n\n      _this4 = _super2.call(this, iconService, elementRef, renderer);\n      _this4.ngZone = ngZone;\n      _this4.changeDetectorRef = changeDetectorRef;\n      _this4.iconService = iconService;\n      _this4.renderer = renderer;\n      _this4.cacheClassName = null;\n      _this4.nzRotate = 0;\n      _this4.spin = false;\n      _this4.destroy$ = new Subject();\n\n      if (iconPatch) {\n        iconPatch.doPatch();\n      }\n\n      _this4.el = elementRef.nativeElement;\n      return _this4;\n    }\n\n    _createClass(NzIconDirective, [{\n      key: \"nzSpin\",\n      set: function set(value) {\n        this.spin = value;\n      }\n    }, {\n      key: \"nzType\",\n      set: function set(value) {\n        this.type = value;\n      }\n    }, {\n      key: \"nzTheme\",\n      set: function set(value) {\n        this.theme = value;\n      }\n    }, {\n      key: \"nzTwotoneColor\",\n      set: function set(value) {\n        this.twoToneColor = value;\n      }\n    }, {\n      key: \"nzIconfont\",\n      set: function set(value) {\n        this.iconfont = value;\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var nzType = changes.nzType,\n            nzTwotoneColor = changes.nzTwotoneColor,\n            nzSpin = changes.nzSpin,\n            nzTheme = changes.nzTheme,\n            nzRotate = changes.nzRotate;\n\n        if (nzType || nzTwotoneColor || nzSpin || nzTheme) {\n          this.changeIcon2();\n        } else if (nzRotate) {\n          this.handleRotate(this.el.firstChild);\n        } else {\n          this._setSVGElement(this.iconService.createIconfontIcon(\"#\".concat(this.iconfont)));\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.renderer.setAttribute(this.el, 'class', \"anticon \".concat(this.el.className).trim());\n      }\n      /**\n       * If custom content is provided, try to normalize SVG elements.\n       */\n\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        if (!this.type) {\n          var children = this.el.children;\n          var length = children.length;\n\n          if (!this.type && children.length) {\n            while (length--) {\n              var child = children[length];\n\n              if (child.tagName.toLowerCase() === 'svg') {\n                this.iconService.normalizeSvgElement(child);\n              }\n            }\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroy$.next();\n      }\n      /**\n       * Replacement of `changeIcon` for more modifications.\n       */\n\n    }, {\n      key: \"changeIcon2\",\n      value: function changeIcon2() {\n        var _this5 = this;\n\n        this.setClassName(); // We don't need to re-enter the Angular zone for adding classes or attributes through the renderer.\n\n        this.ngZone.runOutsideAngular(function () {\n          from(_this5._changeIcon()).pipe(takeUntil(_this5.destroy$)).subscribe({\n            next: function next(svgOrRemove) {\n              // The _changeIcon method would call Renderer to remove the element of the old icon,\n              // which would call `markElementAsRemoved` eventually,\n              // so we should call `detectChanges` to tell Angular remove the DOM node.\n              // #7186\n              _this5.changeDetectorRef.detectChanges();\n\n              if (svgOrRemove) {\n                _this5.setSVGData(svgOrRemove);\n\n                _this5.handleSpin(svgOrRemove);\n\n                _this5.handleRotate(svgOrRemove);\n              }\n            },\n            error: warn\n          });\n        });\n      }\n    }, {\n      key: \"handleSpin\",\n      value: function handleSpin(svg) {\n        if (this.spin || this.type === 'loading') {\n          this.renderer.addClass(svg, 'anticon-spin');\n        } else {\n          this.renderer.removeClass(svg, 'anticon-spin');\n        }\n      }\n    }, {\n      key: \"handleRotate\",\n      value: function handleRotate(svg) {\n        if (this.nzRotate) {\n          this.renderer.setAttribute(svg, 'style', \"transform: rotate(\".concat(this.nzRotate, \"deg)\"));\n        } else {\n          this.renderer.removeAttribute(svg, 'style');\n        }\n      }\n    }, {\n      key: \"setClassName\",\n      value: function setClassName() {\n        if (this.cacheClassName) {\n          this.renderer.removeClass(this.el, this.cacheClassName);\n        }\n\n        this.cacheClassName = \"anticon-\".concat(this.type);\n        this.renderer.addClass(this.el, this.cacheClassName);\n      }\n    }, {\n      key: \"setSVGData\",\n      value: function setSVGData(svg) {\n        this.renderer.setAttribute(svg, 'data-icon', this.type);\n        this.renderer.setAttribute(svg, 'aria-hidden', 'true');\n      }\n    }]);\n\n    return NzIconDirective;\n  }(IconDirective);\n\n  NzIconDirective.ɵfac = function NzIconDirective_Factory(t) {\n    return new (t || NzIconDirective)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NzIconService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(NzIconPatchService, 8));\n  };\n\n  NzIconDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NzIconDirective,\n    selectors: [[\"\", \"nz-icon\", \"\"]],\n    hostVars: 2,\n    hostBindings: function NzIconDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"anticon\", true);\n      }\n    },\n    inputs: {\n      nzSpin: \"nzSpin\",\n      nzRotate: \"nzRotate\",\n      nzType: \"nzType\",\n      nzTheme: \"nzTheme\",\n      nzTwotoneColor: \"nzTwotoneColor\",\n      nzIconfont: \"nzIconfont\"\n    },\n    exportAs: [\"nzIcon\"],\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n\n  __decorate([InputBoolean()], NzIconDirective.prototype, \"nzSpin\", null);\n\n  return NzIconDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzIconModule = /*#__PURE__*/(function () {\n  var NzIconModule = /*#__PURE__*/function () {\n    function NzIconModule() {\n      _classCallCheck(this, NzIconModule);\n    }\n\n    _createClass(NzIconModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot(icons) {\n        return {\n          ngModule: NzIconModule,\n          providers: [{\n            provide: NZ_ICONS,\n            useValue: icons\n          }]\n        };\n      }\n    }, {\n      key: \"forChild\",\n      value: function forChild(icons) {\n        return {\n          ngModule: NzIconModule,\n          providers: [NzIconPatchService, {\n            provide: NZ_ICONS_PATCH,\n            useValue: icons\n          }]\n        };\n      }\n    }]);\n\n    return NzIconModule;\n  }();\n\n  NzIconModule.ɵfac = function NzIconModule_Factory(t) {\n    return new (t || NzIconModule)();\n  };\n\n  NzIconModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NzIconModule\n  });\n  NzIconModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[PlatformModule]]\n  });\n  return NzIconModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULT_TWOTONE_COLOR, NZ_ICONS, NZ_ICONS_PATCH, NZ_ICONS_USED_BY_ZORRO, NZ_ICON_DEFAULT_TWOTONE_COLOR, NzIconDirective, NzIconModule, NzIconPatchService, NzIconService }; //# sourceMappingURL=ng-zorro-antd-icon.mjs.map","map":null,"metadata":{},"sourceType":"module"}