{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n\nvar NzResizeObserverFactory = /*#__PURE__*/function () {\n  function NzResizeObserverFactory() {\n    _classCallCheck(this, NzResizeObserverFactory);\n  }\n\n  _createClass(NzResizeObserverFactory, [{\n    key: \"create\",\n    value: function create(callback) {\n      return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n    }\n  }]);\n\n  return NzResizeObserverFactory;\n}();\n\nNzResizeObserverFactory.ɵfac = function NzResizeObserverFactory_Factory(t) {\n  return new (t || NzResizeObserverFactory)();\n};\n\nNzResizeObserverFactory.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NzResizeObserverFactory,\n  factory: NzResizeObserverFactory.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzResizeObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/** An injectable service that allows watching elements for changes to their content. */\n\n\nvar NzResizeObserver = /*#__PURE__*/function () {\n  function NzResizeObserver(nzResizeObserverFactory) {\n    _classCallCheck(this, NzResizeObserver);\n\n    this.nzResizeObserverFactory = nzResizeObserverFactory;\n    /** Keeps track of the existing ResizeObservers so they can be reused. */\n\n    this.observedElements = new Map();\n  }\n\n  _createClass(NzResizeObserver, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this = this;\n\n      this.observedElements.forEach(function (_, element) {\n        return _this.cleanupObserver(element);\n      });\n    }\n  }, {\n    key: \"observe\",\n    value: function observe(elementOrRef) {\n      var _this2 = this;\n\n      var element = coerceElement(elementOrRef);\n      return new Observable(function (observer) {\n        var stream = _this2.observeElement(element);\n\n        var subscription = stream.subscribe(observer);\n        return function () {\n          subscription.unsubscribe();\n\n          _this2.unobserveElement(element);\n        };\n      });\n    }\n    /**\n     * Observes the given element by using the existing ResizeObserver if available, or creating a\n     * new one if not.\n     */\n\n  }, {\n    key: \"observeElement\",\n    value: function observeElement(element) {\n      if (!this.observedElements.has(element)) {\n        var stream = new Subject();\n        var observer = this.nzResizeObserverFactory.create(function (mutations) {\n          return stream.next(mutations);\n        });\n\n        if (observer) {\n          observer.observe(element);\n        }\n\n        this.observedElements.set(element, {\n          observer: observer,\n          stream: stream,\n          count: 1\n        });\n      } else {\n        this.observedElements.get(element).count++;\n      }\n\n      return this.observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n     * observing this element.\n     */\n\n  }, {\n    key: \"unobserveElement\",\n    value: function unobserveElement(element) {\n      if (this.observedElements.has(element)) {\n        this.observedElements.get(element).count--;\n\n        if (!this.observedElements.get(element).count) {\n          this.cleanupObserver(element);\n        }\n      }\n    }\n    /** Clean up the underlying ResizeObserver for the specified element. */\n\n  }, {\n    key: \"cleanupObserver\",\n    value: function cleanupObserver(element) {\n      if (this.observedElements.has(element)) {\n        var _this$observedElement = this.observedElements.get(element),\n            observer = _this$observedElement.observer,\n            stream = _this$observedElement.stream;\n\n        if (observer) {\n          observer.disconnect();\n        }\n\n        stream.complete();\n        this.observedElements.delete(element);\n      }\n    }\n  }]);\n\n  return NzResizeObserver;\n}();\n\nNzResizeObserver.ɵfac = function NzResizeObserver_Factory(t) {\n  return new (t || NzResizeObserver)(i0.ɵɵinject(NzResizeObserverFactory));\n};\n\nNzResizeObserver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NzResizeObserver,\n  factory: NzResizeObserver.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzResizeObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NzResizeObserverFactory\n    }];\n  }, null);\n})();\n\nvar NzResizeObserverDirective = /*#__PURE__*/function () {\n  function NzResizeObserverDirective(nzResizeObserver, elementRef) {\n    _classCallCheck(this, NzResizeObserverDirective);\n\n    this.nzResizeObserver = nzResizeObserver;\n    this.elementRef = elementRef;\n    this.nzResizeObserve = new EventEmitter();\n    this.nzResizeObserverDisabled = false;\n    this.currentSubscription = null;\n  }\n\n  _createClass(NzResizeObserverDirective, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      this.unsubscribe();\n      this.currentSubscription = this.nzResizeObserver.observe(this.elementRef).subscribe(this.nzResizeObserve);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _a;\n\n      (_a = this.currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      if (!this.currentSubscription && !this.nzResizeObserverDisabled) {\n        this.subscribe();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzResizeObserve = changes.nzResizeObserve;\n\n      if (nzResizeObserve) {\n        if (this.nzResizeObserverDisabled) {\n          this.unsubscribe();\n        } else {\n          this.subscribe();\n        }\n      }\n    }\n  }]);\n\n  return NzResizeObserverDirective;\n}();\n\nNzResizeObserverDirective.ɵfac = function NzResizeObserverDirective_Factory(t) {\n  return new (t || NzResizeObserverDirective)(i0.ɵɵdirectiveInject(NzResizeObserver), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nNzResizeObserverDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzResizeObserverDirective,\n  selectors: [[\"\", \"nzResizeObserver\", \"\"]],\n  inputs: {\n    nzResizeObserverDisabled: \"nzResizeObserverDisabled\"\n  },\n  outputs: {\n    nzResizeObserve: \"nzResizeObserve\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n__decorate([InputBoolean()], NzResizeObserverDirective.prototype, \"nzResizeObserverDisabled\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzResizeObserverDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzResizeObserver]'\n    }]\n  }], function () {\n    return [{\n      type: NzResizeObserver\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    nzResizeObserve: [{\n      type: Output\n    }],\n    nzResizeObserverDisabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzResizeObserverModule = /*#__PURE__*/_createClass(function NzResizeObserverModule() {\n  _classCallCheck(this, NzResizeObserverModule);\n});\n\nNzResizeObserverModule.ɵfac = function NzResizeObserverModule_Factory(t) {\n  return new (t || NzResizeObserverModule)();\n};\n\nNzResizeObserverModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzResizeObserverModule,\n  declarations: [NzResizeObserverDirective],\n  exports: [NzResizeObserverDirective]\n});\nNzResizeObserverModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [NzResizeObserverFactory]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzResizeObserverModule, [{\n    type: NgModule,\n    args: [{\n      providers: [NzResizeObserverFactory],\n      declarations: [NzResizeObserverDirective],\n      exports: [NzResizeObserverDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzResizeObserver, NzResizeObserverDirective, NzResizeObserverFactory, NzResizeObserverModule }; //# sourceMappingURL=ng-zorro-antd-cdk-resize-observer.mjs.map","map":null,"metadata":{},"sourceType":"module"}