{"ast":null,"code":"import { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\n\nvar FileValueAccessor =\n/** @class */\nfunction () {\n  function FileValueAccessor() {\n    this.onChange = function (_) {};\n\n    this.onTouched = function () {};\n  }\n\n  FileValueAccessor.prototype.writeValue = function (value) {};\n\n  FileValueAccessor.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  FileValueAccessor.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n\n  FileValueAccessor.ɵfac = function FileValueAccessor_Factory(t) {\n    return new (t || FileValueAccessor)();\n  };\n\n  FileValueAccessor.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: FileValueAccessor,\n    selectors: [[\"input\", \"type\", \"file\"]],\n    hostBindings: function FileValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function FileValueAccessor_change_HostBindingHandler($event) {\n          return ctx.onChange($event.target.files);\n        })(\"blur\", function FileValueAccessor_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        });\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: FileValueAccessor,\n      multi: true\n    }])]\n  });\n  return FileValueAccessor;\n}();\n\nexport { FileValueAccessor };","map":null,"metadata":{},"sourceType":"module"}