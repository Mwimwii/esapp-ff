{"ast":null,"code":"import _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport * as i0 from '@angular/core';\nimport { Directive, Injectable, forwardRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Input, Inject, ViewChild, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { ReplaySubject, Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i1 from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar _c0 = [\"*\"];\nvar _c1 = [\"inputElement\"];\nvar _c2 = [\"nz-radio\", \"\"];\nvar NzRadioButtonDirective = /*#__PURE__*/(function () {\n  var NzRadioButtonDirective = /*#__PURE__*/_createClass(function NzRadioButtonDirective() {\n    _classCallCheck(this, NzRadioButtonDirective);\n  });\n\n  NzRadioButtonDirective.ɵfac = function NzRadioButtonDirective_Factory(t) {\n    return new (t || NzRadioButtonDirective)();\n  };\n\n  NzRadioButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NzRadioButtonDirective,\n    selectors: [[\"\", \"nz-radio-button\", \"\"]]\n  });\n  return NzRadioButtonDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzRadioService = /*#__PURE__*/(function () {\n  var NzRadioService = /*#__PURE__*/function () {\n    function NzRadioService() {\n      _classCallCheck(this, NzRadioService);\n\n      this.selected$ = new ReplaySubject(1);\n      this.touched$ = new Subject();\n      this.disabled$ = new ReplaySubject(1);\n      this.name$ = new ReplaySubject(1);\n    }\n\n    _createClass(NzRadioService, [{\n      key: \"touch\",\n      value: function touch() {\n        this.touched$.next();\n      }\n    }, {\n      key: \"select\",\n      value: function select(value) {\n        this.selected$.next(value);\n      }\n    }, {\n      key: \"setDisabled\",\n      value: function setDisabled(value) {\n        this.disabled$.next(value);\n      }\n    }, {\n      key: \"setName\",\n      value: function setName(value) {\n        this.name$.next(value);\n      }\n    }]);\n\n    return NzRadioService;\n  }();\n\n  NzRadioService.ɵfac = function NzRadioService_Factory(t) {\n    return new (t || NzRadioService)();\n  };\n\n  NzRadioService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NzRadioService,\n    factory: NzRadioService.ɵfac\n  });\n  return NzRadioService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar NzRadioGroupComponent = /*#__PURE__*/(function () {\n  var NzRadioGroupComponent = /*#__PURE__*/function () {\n    function NzRadioGroupComponent(cdr, nzRadioService, directionality) {\n      _classCallCheck(this, NzRadioGroupComponent);\n\n      this.cdr = cdr;\n      this.nzRadioService = nzRadioService;\n      this.directionality = directionality;\n      this.value = null;\n      this.destroy$ = new Subject();\n\n      this.onChange = function () {};\n\n      this.onTouched = function () {};\n\n      this.nzDisabled = false;\n      this.nzButtonStyle = 'outline';\n      this.nzSize = 'default';\n      this.nzName = null;\n      this.dir = 'ltr';\n    }\n\n    _createClass(NzRadioGroupComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        var _a;\n\n        this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(function (value) {\n          if (_this.value !== value) {\n            _this.value = value;\n\n            _this.onChange(_this.value);\n          }\n        });\n        this.nzRadioService.touched$.pipe(takeUntil(this.destroy$)).subscribe(function () {\n          Promise.resolve().then(function () {\n            return _this.onTouched();\n          });\n        });\n        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n          _this.dir = direction;\n\n          _this.cdr.detectChanges();\n        });\n        this.dir = this.directionality.value;\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var nzDisabled = changes.nzDisabled,\n            nzName = changes.nzName;\n\n        if (nzDisabled) {\n          this.nzRadioService.setDisabled(this.nzDisabled);\n        }\n\n        if (nzName) {\n          this.nzRadioService.setName(this.nzName);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n        this.nzRadioService.select(value);\n        this.cdr.markForCheck();\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.nzDisabled = isDisabled;\n        this.nzRadioService.setDisabled(isDisabled);\n        this.cdr.markForCheck();\n      }\n    }]);\n\n    return NzRadioGroupComponent;\n  }();\n\n  NzRadioGroupComponent.ɵfac = function NzRadioGroupComponent_Factory(t) {\n    return new (t || NzRadioGroupComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(NzRadioService), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n  };\n\n  NzRadioGroupComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzRadioGroupComponent,\n    selectors: [[\"nz-radio-group\"]],\n    hostAttrs: [1, \"ant-radio-group\"],\n    hostVars: 8,\n    hostBindings: function NzRadioGroupComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ant-radio-group-large\", ctx.nzSize === \"large\")(\"ant-radio-group-small\", ctx.nzSize === \"small\")(\"ant-radio-group-solid\", ctx.nzButtonStyle === \"solid\")(\"ant-radio-group-rtl\", ctx.dir === \"rtl\");\n      }\n    },\n    inputs: {\n      nzDisabled: \"nzDisabled\",\n      nzButtonStyle: \"nzButtonStyle\",\n      nzSize: \"nzSize\",\n      nzName: \"nzName\"\n    },\n    exportAs: [\"nzRadioGroup\"],\n    features: [i0.ɵɵProvidersFeature([NzRadioService, {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return NzRadioGroupComponent;\n      }),\n      multi: true\n    }]), i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function NzRadioGroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzRadioGroupComponent.prototype, \"nzDisabled\", void 0);\n\n  return NzRadioGroupComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar NzRadioComponent = /*#__PURE__*/(function () {\n  var NzRadioComponent = /*#__PURE__*/function () {\n    function NzRadioComponent(ngZone, elementRef, cdr, focusMonitor, directionality, nzRadioService, nzRadioButtonDirective) {\n      _classCallCheck(this, NzRadioComponent);\n\n      this.ngZone = ngZone;\n      this.elementRef = elementRef;\n      this.cdr = cdr;\n      this.focusMonitor = focusMonitor;\n      this.directionality = directionality;\n      this.nzRadioService = nzRadioService;\n      this.nzRadioButtonDirective = nzRadioButtonDirective;\n      this.isNgModel = false;\n      this.destroy$ = new Subject();\n      this.isChecked = false;\n      this.name = null;\n      this.isRadioButton = !!this.nzRadioButtonDirective;\n\n      this.onChange = function () {};\n\n      this.onTouched = function () {};\n\n      this.nzValue = null;\n      this.nzDisabled = false;\n      this.nzAutoFocus = false;\n      this.dir = 'ltr';\n    }\n\n    _createClass(NzRadioComponent, [{\n      key: \"focus\",\n      value: function focus() {\n        this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.inputElement.nativeElement.blur();\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(disabled) {\n        this.nzDisabled = disabled;\n        this.cdr.markForCheck();\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.isChecked = value;\n        this.cdr.markForCheck();\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.isNgModel = true;\n        this.onChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        if (this.nzRadioService) {\n          this.nzRadioService.name$.pipe(takeUntil(this.destroy$)).subscribe(function (name) {\n            _this2.name = name;\n\n            _this2.cdr.markForCheck();\n          });\n          this.nzRadioService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(function (disabled) {\n            _this2.nzDisabled = disabled;\n\n            _this2.cdr.markForCheck();\n          });\n          this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(function (value) {\n            var isChecked = _this2.isChecked;\n            _this2.isChecked = _this2.nzValue === value; // We don't have to run `onChange()` on each `nz-radio` button whenever the `selected$` emits.\n            // If we have 8 `nz-radio` buttons within the `nz-radio-group` and they're all connected with\n            // `ngModel` or `formControl` then `onChange()` will be called 8 times for each `nz-radio` button.\n            // We prevent this by checking if `isChecked` has been changed or not.\n\n            if (_this2.isNgModel && isChecked !== _this2.isChecked && // We're only intereted if `isChecked` has been changed to `false` value to emit `false` to the ascendant form,\n            // since we already emit `true` within the `setupClickListener`.\n            _this2.isChecked === false) {\n              _this2.onChange(false);\n            }\n\n            _this2.cdr.markForCheck();\n          });\n        }\n\n        this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe(function (focusOrigin) {\n          if (!focusOrigin) {\n            Promise.resolve().then(function () {\n              return _this2.onTouched();\n            });\n\n            if (_this2.nzRadioService) {\n              _this2.nzRadioService.touch();\n            }\n          }\n        });\n        this.directionality.change.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n          _this2.dir = direction;\n\n          _this2.cdr.detectChanges();\n        });\n        this.dir = this.directionality.value;\n        this.setupClickListener();\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        if (this.nzAutoFocus) {\n          this.focus();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.focusMonitor.stopMonitoring(this.elementRef);\n      }\n    }, {\n      key: \"setupClickListener\",\n      value: function setupClickListener() {\n        var _this3 = this;\n\n        this.ngZone.runOutsideAngular(function () {\n          fromEvent(_this3.elementRef.nativeElement, 'click').pipe(takeUntil(_this3.destroy$)).subscribe(function (event) {\n            /** prevent label click triggered twice. **/\n            event.stopPropagation();\n            event.preventDefault();\n\n            if (_this3.nzDisabled || _this3.isChecked) {\n              return;\n            }\n\n            _this3.ngZone.run(function () {\n              var _a;\n\n              (_a = _this3.nzRadioService) === null || _a === void 0 ? void 0 : _a.select(_this3.nzValue);\n\n              if (_this3.isNgModel) {\n                _this3.isChecked = true;\n\n                _this3.onChange(true);\n              }\n\n              _this3.cdr.markForCheck();\n            });\n          });\n        });\n      }\n    }]);\n\n    return NzRadioComponent;\n  }();\n\n  NzRadioComponent.ɵfac = function NzRadioComponent_Factory(t) {\n    return new (t || NzRadioComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(NzRadioService, 8), i0.ɵɵdirectiveInject(NzRadioButtonDirective, 8));\n  };\n\n  NzRadioComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzRadioComponent,\n    selectors: [[\"\", \"nz-radio\", \"\"], [\"\", \"nz-radio-button\", \"\"]],\n    viewQuery: function NzRadioComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n      }\n    },\n    hostVars: 16,\n    hostBindings: function NzRadioComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ant-radio-wrapper\", !ctx.isRadioButton)(\"ant-radio-button-wrapper\", ctx.isRadioButton)(\"ant-radio-wrapper-checked\", ctx.isChecked && !ctx.isRadioButton)(\"ant-radio-button-wrapper-checked\", ctx.isChecked && ctx.isRadioButton)(\"ant-radio-wrapper-disabled\", ctx.nzDisabled && !ctx.isRadioButton)(\"ant-radio-button-wrapper-disabled\", ctx.nzDisabled && ctx.isRadioButton)(\"ant-radio-wrapper-rtl\", !ctx.isRadioButton && ctx.dir === \"rtl\")(\"ant-radio-button-wrapper-rtl\", ctx.isRadioButton && ctx.dir === \"rtl\");\n      }\n    },\n    inputs: {\n      nzValue: \"nzValue\",\n      nzDisabled: \"nzDisabled\",\n      nzAutoFocus: \"nzAutoFocus\"\n    },\n    exportAs: [\"nzRadio\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return NzRadioComponent;\n      }),\n      multi: true\n    }])],\n    attrs: _c2,\n    ngContentSelectors: _c0,\n    decls: 6,\n    vars: 24,\n    consts: [[\"type\", \"radio\", 3, \"disabled\", \"checked\"], [\"inputElement\", \"\"]],\n    template: function NzRadioComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"span\");\n        i0.ɵɵelement(1, \"input\", 0, 1)(3, \"span\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"span\");\n        i0.ɵɵprojection(5);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ant-radio\", !ctx.isRadioButton)(\"ant-radio-checked\", ctx.isChecked && !ctx.isRadioButton)(\"ant-radio-disabled\", ctx.nzDisabled && !ctx.isRadioButton)(\"ant-radio-button\", ctx.isRadioButton)(\"ant-radio-button-checked\", ctx.isChecked && ctx.isRadioButton)(\"ant-radio-button-disabled\", ctx.nzDisabled && ctx.isRadioButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"ant-radio-input\", !ctx.isRadioButton)(\"ant-radio-button-input\", ctx.isRadioButton);\n        i0.ɵɵproperty(\"disabled\", ctx.nzDisabled)(\"checked\", ctx.isChecked);\n        i0.ɵɵattribute(\"autofocus\", ctx.nzAutoFocus ? \"autofocus\" : null)(\"name\", ctx.name);\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"ant-radio-inner\", !ctx.isRadioButton)(\"ant-radio-button-inner\", ctx.isRadioButton);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzRadioComponent.prototype, \"nzDisabled\", void 0);\n\n  __decorate([InputBoolean()], NzRadioComponent.prototype, \"nzAutoFocus\", void 0);\n\n  return NzRadioComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzRadioModule = /*#__PURE__*/(function () {\n  var NzRadioModule = /*#__PURE__*/_createClass(function NzRadioModule() {\n    _classCallCheck(this, NzRadioModule);\n  });\n\n  NzRadioModule.ɵfac = function NzRadioModule_Factory(t) {\n    return new (t || NzRadioModule)();\n  };\n\n  NzRadioModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NzRadioModule\n  });\n  NzRadioModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, FormsModule]]\n  });\n  return NzRadioModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzRadioButtonDirective, NzRadioComponent, NzRadioGroupComponent, NzRadioModule, NzRadioService }; //# sourceMappingURL=ng-zorro-antd-radio.mjs.map","map":null,"metadata":{},"sourceType":"module"}