{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport * as i1$2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayConfig, ConnectionPositionPair, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, EventEmitter, Optional, Output, forwardRef, Directive, Inject, TemplateRef, Host, ContentChildren, ViewChildren, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport * as i2$1 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport * as i1 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i2 from 'ng-zorro-antd/input';\nimport { NzInputModule } from 'ng-zorro-antd/input';\nimport { __decorate } from 'tslib';\nimport { Subject, fromEvent, Subscription, defer, merge } from 'rxjs';\nimport { filter, takeUntil, tap, delay, take, switchMap } from 'rxjs/operators';\nimport { scrollIntoView, InputBoolean } from 'ng-zorro-antd/core/util';\nimport { UP_ARROW, DOWN_ARROW, ESCAPE, TAB, ENTER } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { slideMotion } from 'ng-zorro-antd/core/animation';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nfunction NzAutocompleteOptgroupComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.nzLabel);\n  }\n}\n\nvar _c0 = [[[\"nz-auto-option\"]]];\nvar _c1 = [\"nz-auto-option\"];\nvar _c2 = [\"*\"];\nvar _c3 = [\"panel\"];\nvar _c4 = [\"content\"];\n\nfunction NzAutocompleteComponent_ng_template_0_4_ng_template_0_Template(rf, ctx) {}\n\nfunction NzAutocompleteComponent_ng_template_0_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzAutocompleteComponent_ng_template_0_4_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\n\nfunction NzAutocompleteComponent_ng_template_0_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n  }\n}\n\nfunction NzAutocompleteComponent_ng_template_0_ng_template_7_nz_auto_option_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"nz-auto-option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var option_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"nzValue\", option_r9)(\"nzLabel\", option_r9 && option_r9.label ? option_r9.label : option_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r9 && option_r9.label ? option_r9.label : option_r9, \" \");\n  }\n}\n\nfunction NzAutocompleteComponent_ng_template_0_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzAutocompleteComponent_ng_template_0_ng_template_7_nz_auto_option_0_Template, 2, 3, \"nz-auto-option\", 7);\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r6.nzDataSource);\n  }\n}\n\nfunction NzAutocompleteComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 0, 1);\n    i0.ɵɵlistener(\"@slideMotion.done\", function NzAutocompleteComponent_ng_template_0_Template_div_animation_slideMotion_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      var ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onAnimationEvent($event);\n    });\n    i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3);\n    i0.ɵɵtemplate(4, NzAutocompleteComponent_ng_template_0_4_Template, 1, 0, null, 4);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(5, NzAutocompleteComponent_ng_template_0_ng_template_5_Template, 1, 0, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(7, NzAutocompleteComponent_ng_template_0_ng_template_7_Template, 1, 1, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n  }\n\n  if (rf & 2) {\n    var _r3 = i0.ɵɵreference(6);\n\n    var _r5 = i0.ɵɵreference(8);\n\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-select-dropdown-hidden\", !ctx_r0.showPanel)(\"ant-select-dropdown-rtl\", ctx_r0.dir === \"rtl\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.nzOverlayClassName)(\"ngStyle\", ctx_r0.nzOverlayStyle)(\"nzNoAnimation\", ctx_r0.noAnimation == null ? null : ctx_r0.noAnimation.nzNoAnimation)(\"@slideMotion\", undefined)(\"@.disabled\", ctx_r0.noAnimation == null ? null : ctx_r0.noAnimation.nzNoAnimation);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.nzDataSource ? _r5 : _r3);\n  }\n}\n\nvar NzAutocompleteOptgroupComponent = /*#__PURE__*/(function () {\n  var NzAutocompleteOptgroupComponent = /*#__PURE__*/_createClass(function NzAutocompleteOptgroupComponent() {\n    _classCallCheck(this, NzAutocompleteOptgroupComponent);\n  });\n\n  NzAutocompleteOptgroupComponent.ɵfac = function NzAutocompleteOptgroupComponent_Factory(t) {\n    return new (t || NzAutocompleteOptgroupComponent)();\n  };\n\n  NzAutocompleteOptgroupComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzAutocompleteOptgroupComponent,\n    selectors: [[\"nz-auto-optgroup\"]],\n    inputs: {\n      nzLabel: \"nzLabel\"\n    },\n    exportAs: [\"nzAutoOptgroup\"],\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"ant-select-item\", \"ant-select-item-group\"], [4, \"nzStringTemplateOutlet\"]],\n    template: function NzAutocompleteOptgroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, NzAutocompleteOptgroupComponent_ng_container_1_Template, 2, 1, \"ng-container\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵprojection(2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx.nzLabel);\n      }\n    },\n    directives: [i1.NzStringTemplateOutletDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzAutocompleteOptgroupComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar NzOptionSelectionChange = /*#__PURE__*/_createClass(function NzOptionSelectionChange(source) {\n  var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  _classCallCheck(this, NzOptionSelectionChange);\n\n  this.source = source;\n  this.isUserInput = isUserInput;\n});\n\nvar NzAutocompleteOptionComponent = /*#__PURE__*/(function () {\n  var NzAutocompleteOptionComponent = /*#__PURE__*/function () {\n    function NzAutocompleteOptionComponent(ngZone, changeDetectorRef, element, nzAutocompleteOptgroupComponent) {\n      _classCallCheck(this, NzAutocompleteOptionComponent);\n\n      this.ngZone = ngZone;\n      this.changeDetectorRef = changeDetectorRef;\n      this.element = element;\n      this.nzAutocompleteOptgroupComponent = nzAutocompleteOptgroupComponent;\n      this.nzDisabled = false;\n      this.selectionChange = new EventEmitter();\n      this.mouseEntered = new EventEmitter();\n      this.active = false;\n      this.selected = false;\n      this.destroy$ = new Subject();\n    }\n\n    _createClass(NzAutocompleteOptionComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        this.ngZone.runOutsideAngular(function () {\n          fromEvent(_this.element.nativeElement, 'mouseenter').pipe(filter(function () {\n            return _this.mouseEntered.observers.length > 0;\n          }), takeUntil(_this.destroy$)).subscribe(function () {\n            _this.ngZone.run(function () {\n              return _this.mouseEntered.emit(_this);\n            });\n          });\n          fromEvent(_this.element.nativeElement, 'mousedown').pipe(takeUntil(_this.destroy$)).subscribe(function (event) {\n            return event.preventDefault();\n          });\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroy$.next();\n      }\n    }, {\n      key: \"select\",\n      value: function select() {\n        var emit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.selected = true;\n        this.changeDetectorRef.markForCheck();\n\n        if (emit) {\n          this.emitSelectionChangeEvent();\n        }\n      }\n    }, {\n      key: \"deselect\",\n      value: function deselect() {\n        this.selected = false;\n        this.changeDetectorRef.markForCheck();\n        this.emitSelectionChangeEvent();\n      }\n      /** Git display label */\n\n    }, {\n      key: \"getLabel\",\n      value: function getLabel() {\n        return this.nzLabel || this.nzValue.toString();\n      }\n      /** Set active (only styles) */\n\n    }, {\n      key: \"setActiveStyles\",\n      value: function setActiveStyles() {\n        if (!this.active) {\n          this.active = true;\n          this.changeDetectorRef.markForCheck();\n        }\n      }\n      /** Unset active (only styles) */\n\n    }, {\n      key: \"setInactiveStyles\",\n      value: function setInactiveStyles() {\n        if (this.active) {\n          this.active = false;\n          this.changeDetectorRef.markForCheck();\n        }\n      }\n    }, {\n      key: \"scrollIntoViewIfNeeded\",\n      value: function scrollIntoViewIfNeeded() {\n        scrollIntoView(this.element.nativeElement);\n      }\n    }, {\n      key: \"selectViaInteraction\",\n      value: function selectViaInteraction() {\n        if (!this.nzDisabled) {\n          this.selected = !this.selected;\n\n          if (this.selected) {\n            this.setActiveStyles();\n          } else {\n            this.setInactiveStyles();\n          }\n\n          this.emitSelectionChangeEvent(true);\n          this.changeDetectorRef.markForCheck();\n        }\n      }\n    }, {\n      key: \"emitSelectionChangeEvent\",\n      value: function emitSelectionChangeEvent() {\n        var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        this.selectionChange.emit(new NzOptionSelectionChange(this, isUserInput));\n      }\n    }]);\n\n    return NzAutocompleteOptionComponent;\n  }();\n\n  NzAutocompleteOptionComponent.ɵfac = function NzAutocompleteOptionComponent_Factory(t) {\n    return new (t || NzAutocompleteOptionComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NzAutocompleteOptgroupComponent, 8));\n  };\n\n  NzAutocompleteOptionComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzAutocompleteOptionComponent,\n    selectors: [[\"nz-auto-option\"]],\n    hostAttrs: [\"role\", \"menuitem\", 1, \"ant-select-item\", \"ant-select-item-option\"],\n    hostVars: 10,\n    hostBindings: function NzAutocompleteOptionComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function NzAutocompleteOptionComponent_click_HostBindingHandler() {\n          return ctx.selectViaInteraction();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-selected\", ctx.selected.toString())(\"aria-disabled\", ctx.nzDisabled.toString());\n        i0.ɵɵclassProp(\"ant-select-item-option-grouped\", ctx.nzAutocompleteOptgroupComponent)(\"ant-select-item-option-selected\", ctx.selected)(\"ant-select-item-option-active\", ctx.active)(\"ant-select-item-option-disabled\", ctx.nzDisabled);\n      }\n    },\n    inputs: {\n      nzValue: \"nzValue\",\n      nzLabel: \"nzLabel\",\n      nzDisabled: \"nzDisabled\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\",\n      mouseEntered: \"mouseEntered\"\n    },\n    exportAs: [\"nzAutoOption\"],\n    ngContentSelectors: _c2,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"ant-select-item-option-content\"]],\n    template: function NzAutocompleteOptionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzAutocompleteOptionComponent.prototype, \"nzDisabled\", void 0);\n\n  return NzAutocompleteOptionComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NZ_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return NzAutocompleteTriggerDirective;\n  }),\n  multi: true\n};\n\nfunction getNzAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `nz-autocomplete`. ' + 'Make sure that the id passed to the `nzAutocomplete` is correct and that ' + \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n\nvar NzAutocompleteTriggerDirective = /*#__PURE__*/(function () {\n  var NzAutocompleteTriggerDirective = /*#__PURE__*/function () {\n    function NzAutocompleteTriggerDirective(ngZone, elementRef, overlay, viewContainerRef, nzInputGroupWhitSuffixOrPrefixDirective, document) {\n      _classCallCheck(this, NzAutocompleteTriggerDirective);\n\n      this.ngZone = ngZone;\n      this.elementRef = elementRef;\n      this.overlay = overlay;\n      this.viewContainerRef = viewContainerRef;\n      this.nzInputGroupWhitSuffixOrPrefixDirective = nzInputGroupWhitSuffixOrPrefixDirective;\n      this.document = document;\n\n      this.onChange = function () {};\n\n      this.onTouched = function () {};\n\n      this.panelOpen = false;\n      this.destroy$ = new Subject();\n      this.overlayRef = null;\n      this.portal = null;\n      this.previousValue = null;\n    }\n    /** Current active option */\n\n\n    _createClass(NzAutocompleteTriggerDirective, [{\n      key: \"activeOption\",\n      get: function get() {\n        if (this.nzAutocomplete && this.nzAutocomplete.options.length) {\n          return this.nzAutocomplete.activeItem;\n        } else {\n          return null;\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this2 = this;\n\n        if (this.nzAutocomplete) {\n          this.nzAutocomplete.animationStateChange.pipe(takeUntil(this.destroy$)).subscribe(function (event) {\n            if (event.toState === 'void') {\n              if (_this2.overlayRef) {\n                _this2.overlayRef.dispose();\n\n                _this2.overlayRef = null;\n              }\n            }\n          });\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.destroyPanel();\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        var _this3 = this;\n\n        this.ngZone.runOutsideAngular(function () {\n          return Promise.resolve(null).then(function () {\n            return _this3.setTriggerValue(value);\n          });\n        });\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        var element = this.elementRef.nativeElement;\n        element.disabled = isDisabled;\n        this.closePanel();\n      }\n    }, {\n      key: \"openPanel\",\n      value: function openPanel() {\n        this.previousValue = this.elementRef.nativeElement.value;\n        this.attachOverlay();\n        this.updateStatus();\n      }\n    }, {\n      key: \"closePanel\",\n      value: function closePanel() {\n        if (this.panelOpen) {\n          this.nzAutocomplete.isOpen = this.panelOpen = false;\n\n          if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.selectionChangeSubscription.unsubscribe();\n            this.overlayOutsideClickSubscription.unsubscribe();\n            this.optionsChangeSubscription.unsubscribe();\n            this.portal = null;\n          }\n        }\n      }\n    }, {\n      key: \"handleKeydown\",\n      value: function handleKeydown(event) {\n        var keyCode = event.keyCode;\n        var isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n        if (keyCode === ESCAPE) {\n          event.preventDefault();\n        }\n\n        if (this.panelOpen && (keyCode === ESCAPE || keyCode === TAB)) {\n          // Reset value when tab / ESC close\n          if (this.activeOption && this.activeOption.getLabel() !== this.previousValue) {\n            this.setTriggerValue(this.previousValue);\n          }\n\n          this.closePanel();\n        } else if (this.panelOpen && keyCode === ENTER) {\n          if (this.nzAutocomplete.showPanel) {\n            event.preventDefault();\n\n            if (this.activeOption) {\n              this.activeOption.selectViaInteraction();\n            } else {\n              this.closePanel();\n            }\n          }\n        } else if (this.panelOpen && isArrowKey && this.nzAutocomplete.showPanel) {\n          event.stopPropagation();\n          event.preventDefault();\n\n          if (keyCode === UP_ARROW) {\n            this.nzAutocomplete.setPreviousItemActive();\n          } else {\n            this.nzAutocomplete.setNextItemActive();\n          }\n\n          if (this.activeOption) {\n            this.activeOption.scrollIntoViewIfNeeded();\n          }\n\n          this.doBackfill();\n        }\n      }\n    }, {\n      key: \"handleInput\",\n      value: function handleInput(event) {\n        var target = event.target;\n        var document = this.document;\n        var value = target.value;\n\n        if (target.type === 'number') {\n          value = value === '' ? null : parseFloat(value);\n        }\n\n        if (this.previousValue !== value) {\n          this.previousValue = value;\n          this.onChange(value);\n\n          if (this.canOpen() && document.activeElement === event.target) {\n            this.openPanel();\n          }\n        }\n      }\n    }, {\n      key: \"handleFocus\",\n      value: function handleFocus() {\n        if (this.canOpen()) {\n          this.openPanel();\n        }\n      }\n    }, {\n      key: \"handleBlur\",\n      value: function handleBlur() {\n        this.onTouched();\n      }\n      /**\n       * Subscription data source changes event\n       */\n\n    }, {\n      key: \"subscribeOptionsChange\",\n      value: function subscribeOptionsChange() {\n        var _this4 = this;\n\n        var optionChanges = this.nzAutocomplete.options.changes.pipe(tap(function () {\n          return _this4.positionStrategy.reapplyLastPosition();\n        }), delay(0));\n        return optionChanges.subscribe(function () {\n          _this4.resetActiveItem();\n\n          if (_this4.panelOpen) {\n            _this4.overlayRef.updatePosition();\n          }\n        });\n      }\n      /**\n       * Subscription option changes event and set the value\n       */\n\n    }, {\n      key: \"subscribeSelectionChange\",\n      value: function subscribeSelectionChange() {\n        var _this5 = this;\n\n        return this.nzAutocomplete.selectionChange.subscribe(function (option) {\n          _this5.setValueAndClose(option);\n        });\n      }\n    }, {\n      key: \"subscribeOverlayOutsideClick\",\n      value: function subscribeOverlayOutsideClick() {\n        var _this6 = this;\n\n        return this.overlayRef.outsidePointerEvents().pipe(filter(function (e) {\n          return !_this6.elementRef.nativeElement.contains(e.target);\n        })).subscribe(function () {\n          _this6.closePanel();\n        });\n      }\n    }, {\n      key: \"attachOverlay\",\n      value: function attachOverlay() {\n        var _this7 = this;\n\n        if (!this.nzAutocomplete) {\n          throw getNzAutocompleteMissingPanelError();\n        }\n\n        if (!this.portal && this.nzAutocomplete.template) {\n          this.portal = new TemplatePortal(this.nzAutocomplete.template, this.viewContainerRef);\n        }\n\n        if (!this.overlayRef) {\n          this.overlayRef = this.overlay.create(this.getOverlayConfig());\n        }\n\n        if (this.overlayRef && !this.overlayRef.hasAttached()) {\n          this.overlayRef.attach(this.portal);\n          this.selectionChangeSubscription = this.subscribeSelectionChange();\n          this.optionsChangeSubscription = this.subscribeOptionsChange();\n          this.overlayOutsideClickSubscription = this.subscribeOverlayOutsideClick();\n          this.overlayRef.detachments().pipe(takeUntil(this.destroy$)).subscribe(function () {\n            _this7.closePanel();\n          });\n        }\n\n        this.nzAutocomplete.isOpen = this.panelOpen = true;\n      }\n    }, {\n      key: \"updateStatus\",\n      value: function updateStatus() {\n        if (this.overlayRef) {\n          this.overlayRef.updateSize({\n            width: this.nzAutocomplete.nzWidth || this.getHostWidth()\n          });\n        }\n\n        this.nzAutocomplete.setVisibility();\n        this.resetActiveItem();\n\n        if (this.activeOption) {\n          this.activeOption.scrollIntoViewIfNeeded();\n        }\n      }\n    }, {\n      key: \"destroyPanel\",\n      value: function destroyPanel() {\n        if (this.overlayRef) {\n          this.closePanel();\n        }\n      }\n    }, {\n      key: \"getOverlayConfig\",\n      value: function getOverlayConfig() {\n        return new OverlayConfig({\n          positionStrategy: this.getOverlayPosition(),\n          disposeOnNavigation: true,\n          scrollStrategy: this.overlay.scrollStrategies.reposition(),\n          // default host element width\n          width: this.nzAutocomplete.nzWidth || this.getHostWidth()\n        });\n      }\n    }, {\n      key: \"getConnectedElement\",\n      value: function getConnectedElement() {\n        return this.nzInputGroupWhitSuffixOrPrefixDirective ? this.nzInputGroupWhitSuffixOrPrefixDirective.elementRef : this.elementRef;\n      }\n    }, {\n      key: \"getHostWidth\",\n      value: function getHostWidth() {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n      }\n    }, {\n      key: \"getOverlayPosition\",\n      value: function getOverlayPosition() {\n        var positions = [new ConnectionPositionPair({\n          originX: 'start',\n          originY: 'bottom'\n        }, {\n          overlayX: 'start',\n          overlayY: 'top'\n        }), new ConnectionPositionPair({\n          originX: 'start',\n          originY: 'top'\n        }, {\n          overlayX: 'start',\n          overlayY: 'bottom'\n        })];\n        this.positionStrategy = this.overlay.position().flexibleConnectedTo(this.getConnectedElement()).withFlexibleDimensions(false).withPush(false).withPositions(positions).withTransformOriginOn('.ant-select-dropdown');\n        return this.positionStrategy;\n      }\n    }, {\n      key: \"resetActiveItem\",\n      value: function resetActiveItem() {\n        var index = this.nzAutocomplete.getOptionIndex(this.previousValue);\n        this.nzAutocomplete.clearSelectedOptions(null, true);\n\n        if (index !== -1) {\n          this.nzAutocomplete.setActiveItem(index);\n          this.nzAutocomplete.activeItem.select(false);\n        } else {\n          this.nzAutocomplete.setActiveItem(this.nzAutocomplete.nzDefaultActiveFirstOption ? 0 : -1);\n        }\n      }\n    }, {\n      key: \"setValueAndClose\",\n      value: function setValueAndClose(option) {\n        var value = option.nzValue;\n        this.setTriggerValue(option.getLabel());\n        this.onChange(value);\n        this.elementRef.nativeElement.focus();\n        this.closePanel();\n      }\n    }, {\n      key: \"setTriggerValue\",\n      value: function setTriggerValue(value) {\n        var option = this.nzAutocomplete.getOption(value);\n        var displayValue = option ? option.getLabel() : value;\n        this.elementRef.nativeElement.value = displayValue != null ? displayValue : '';\n\n        if (!this.nzAutocomplete.nzBackfill) {\n          this.previousValue = displayValue;\n        }\n      }\n    }, {\n      key: \"doBackfill\",\n      value: function doBackfill() {\n        if (this.nzAutocomplete.nzBackfill && this.nzAutocomplete.activeItem) {\n          this.setTriggerValue(this.nzAutocomplete.activeItem.getLabel());\n        }\n      }\n    }, {\n      key: \"canOpen\",\n      value: function canOpen() {\n        var element = this.elementRef.nativeElement;\n        return !element.readOnly && !element.disabled;\n      }\n    }]);\n\n    return NzAutocompleteTriggerDirective;\n  }();\n\n  NzAutocompleteTriggerDirective.ɵfac = function NzAutocompleteTriggerDirective_Factory(t) {\n    return new (t || NzAutocompleteTriggerDirective)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.NzInputGroupWhitSuffixOrPrefixDirective, 8), i0.ɵɵdirectiveInject(DOCUMENT, 8));\n  };\n\n  NzAutocompleteTriggerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NzAutocompleteTriggerDirective,\n    selectors: [[\"input\", \"nzAutocomplete\", \"\"], [\"textarea\", \"nzAutocomplete\", \"\"]],\n    hostAttrs: [\"autocomplete\", \"off\", \"aria-autocomplete\", \"list\"],\n    hostBindings: function NzAutocompleteTriggerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focusin\", function NzAutocompleteTriggerDirective_focusin_HostBindingHandler() {\n          return ctx.handleFocus();\n        })(\"blur\", function NzAutocompleteTriggerDirective_blur_HostBindingHandler() {\n          return ctx.handleBlur();\n        })(\"input\", function NzAutocompleteTriggerDirective_input_HostBindingHandler($event) {\n          return ctx.handleInput($event);\n        })(\"keydown\", function NzAutocompleteTriggerDirective_keydown_HostBindingHandler($event) {\n          return ctx.handleKeydown($event);\n        });\n      }\n    },\n    inputs: {\n      nzAutocomplete: \"nzAutocomplete\"\n    },\n    exportAs: [\"nzAutocompleteTrigger\"],\n    features: [i0.ɵɵProvidersFeature([NZ_AUTOCOMPLETE_VALUE_ACCESSOR])]\n  });\n  return NzAutocompleteTriggerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar NzAutocompleteComponent = /*#__PURE__*/(function () {\n  var NzAutocompleteComponent = /*#__PURE__*/function () {\n    function NzAutocompleteComponent(changeDetectorRef, ngZone, directionality, noAnimation) {\n      var _this8 = this;\n\n      _classCallCheck(this, NzAutocompleteComponent);\n\n      this.changeDetectorRef = changeDetectorRef;\n      this.ngZone = ngZone;\n      this.directionality = directionality;\n      this.noAnimation = noAnimation;\n      this.nzOverlayClassName = '';\n      this.nzOverlayStyle = {};\n      this.nzDefaultActiveFirstOption = true;\n      this.nzBackfill = false;\n\n      this.compareWith = function (o1, o2) {\n        return o1 === o2;\n      };\n\n      this.selectionChange = new EventEmitter();\n      this.showPanel = true;\n      this.isOpen = false;\n      this.activeItem = null;\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n      this.animationStateChange = new EventEmitter();\n      this.activeItemIndex = -1;\n      this.selectionChangeSubscription = Subscription.EMPTY;\n      this.optionMouseEnterSubscription = Subscription.EMPTY;\n      this.dataSourceChangeSubscription = Subscription.EMPTY;\n      /** Options changes listener */\n\n      this.optionSelectionChanges = defer(function () {\n        if (_this8.options) {\n          return merge.apply(void 0, _toConsumableArray(_this8.options.map(function (option) {\n            return option.selectionChange;\n          })));\n        }\n\n        return _this8.ngZone.onStable.asObservable().pipe(take(1), switchMap(function () {\n          return _this8.optionSelectionChanges;\n        }));\n      });\n      this.optionMouseEnter = defer(function () {\n        if (_this8.options) {\n          return merge.apply(void 0, _toConsumableArray(_this8.options.map(function (option) {\n            return option.mouseEntered;\n          })));\n        }\n\n        return _this8.ngZone.onStable.asObservable().pipe(take(1), switchMap(function () {\n          return _this8.optionMouseEnter;\n        }));\n      });\n    }\n    /**\n     * Options accessor, its source may be content or dataSource\n     */\n\n\n    _createClass(NzAutocompleteComponent, [{\n      key: \"options\",\n      get: function get() {\n        // first dataSource\n        if (this.nzDataSource) {\n          return this.fromDataSourceOptions;\n        } else {\n          return this.fromContentOptions;\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this9 = this;\n\n        var _a;\n\n        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n          _this9.dir = direction;\n\n          _this9.changeDetectorRef.detectChanges();\n        });\n        this.dir = this.directionality.value;\n      }\n    }, {\n      key: \"onAnimationEvent\",\n      value: function onAnimationEvent(event) {\n        this.animationStateChange.emit(event);\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        if (!this.nzDataSource) {\n          this.optionsInit();\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        if (this.nzDataSource) {\n          this.optionsInit();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.dataSourceChangeSubscription.unsubscribe();\n        this.selectionChangeSubscription.unsubscribe();\n        this.optionMouseEnterSubscription.unsubscribe(); // Caretaker note: we have to set these subscriptions to `null` since these will be closed subscriptions, but they\n        // still keep references to destinations (which are `SafeSubscriber`s). Destinations keep referencing `next` functions,\n        // which we pass, for instance, to `this.optionSelectionChanges.subscribe(...)`.\n\n        this.dataSourceChangeSubscription = this.selectionChangeSubscription = this.optionMouseEnterSubscription = null;\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    }, {\n      key: \"setVisibility\",\n      value: function setVisibility() {\n        this.showPanel = !!this.options.length;\n        this.changeDetectorRef.markForCheck();\n      }\n    }, {\n      key: \"setActiveItem\",\n      value: function setActiveItem(index) {\n        var activeItem = this.options.get(index);\n\n        if (activeItem && !activeItem.active) {\n          this.activeItem = activeItem;\n          this.activeItemIndex = index;\n          this.clearSelectedOptions(this.activeItem);\n          this.activeItem.setActiveStyles();\n        } else {\n          this.activeItem = null;\n          this.activeItemIndex = -1;\n          this.clearSelectedOptions();\n        }\n\n        this.changeDetectorRef.markForCheck();\n      }\n    }, {\n      key: \"setNextItemActive\",\n      value: function setNextItemActive() {\n        var nextIndex = this.activeItemIndex + 1 <= this.options.length - 1 ? this.activeItemIndex + 1 : 0;\n        this.setActiveItem(nextIndex);\n      }\n    }, {\n      key: \"setPreviousItemActive\",\n      value: function setPreviousItemActive() {\n        var previousIndex = this.activeItemIndex - 1 < 0 ? this.options.length - 1 : this.activeItemIndex - 1;\n        this.setActiveItem(previousIndex);\n      }\n    }, {\n      key: \"getOptionIndex\",\n      value: function getOptionIndex(value) {\n        var _this10 = this;\n\n        return this.options.reduce(function (result, current, index) {\n          return result === -1 ? _this10.compareWith(value, current.nzValue) ? index : -1 : result;\n        }, -1);\n      }\n    }, {\n      key: \"getOption\",\n      value: function getOption(value) {\n        var _this11 = this;\n\n        return this.options.find(function (item) {\n          return _this11.compareWith(value, item.nzValue);\n        }) || null;\n      }\n    }, {\n      key: \"optionsInit\",\n      value: function optionsInit() {\n        var _this12 = this;\n\n        this.setVisibility();\n        this.subscribeOptionChanges();\n        var changes = this.nzDataSource ? this.fromDataSourceOptions.changes : this.fromContentOptions.changes; // async\n\n        this.dataSourceChangeSubscription = changes.subscribe(function (e) {\n          if (!e.dirty && _this12.isOpen) {\n            setTimeout(function () {\n              return _this12.setVisibility();\n            });\n          }\n\n          _this12.subscribeOptionChanges();\n        });\n      }\n      /**\n       * Clear the status of options\n       */\n\n    }, {\n      key: \"clearSelectedOptions\",\n      value: function clearSelectedOptions(skip) {\n        var deselect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        this.options.forEach(function (option) {\n          if (option !== skip) {\n            if (deselect) {\n              option.deselect();\n            }\n\n            option.setInactiveStyles();\n          }\n        });\n      }\n    }, {\n      key: \"subscribeOptionChanges\",\n      value: function subscribeOptionChanges() {\n        var _this13 = this;\n\n        this.selectionChangeSubscription.unsubscribe();\n        this.selectionChangeSubscription = this.optionSelectionChanges.pipe(filter(function (event) {\n          return event.isUserInput;\n        })).subscribe(function (event) {\n          event.source.select();\n          event.source.setActiveStyles();\n          _this13.activeItem = event.source;\n          _this13.activeItemIndex = _this13.getOptionIndex(_this13.activeItem.nzValue);\n\n          _this13.clearSelectedOptions(event.source, true);\n\n          _this13.selectionChange.emit(event.source);\n        });\n        this.optionMouseEnterSubscription.unsubscribe();\n        this.optionMouseEnterSubscription = this.optionMouseEnter.subscribe(function (event) {\n          event.setActiveStyles();\n          _this13.activeItem = event;\n          _this13.activeItemIndex = _this13.getOptionIndex(_this13.activeItem.nzValue);\n\n          _this13.clearSelectedOptions(event);\n        });\n      }\n    }]);\n\n    return NzAutocompleteComponent;\n  }();\n\n  NzAutocompleteComponent.ɵfac = function NzAutocompleteComponent_Factory(t) {\n    return new (t || NzAutocompleteComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$2.Directionality, 8), i0.ɵɵdirectiveInject(i2$1.NzNoAnimationDirective, 9));\n  };\n\n  NzAutocompleteComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzAutocompleteComponent,\n    selectors: [[\"nz-autocomplete\"]],\n    contentQueries: function NzAutocompleteComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, NzAutocompleteOptionComponent, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fromContentOptions = _t);\n      }\n    },\n    viewQuery: function NzAutocompleteComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TemplateRef, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(NzAutocompleteOptionComponent, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fromDataSourceOptions = _t);\n      }\n    },\n    inputs: {\n      nzWidth: \"nzWidth\",\n      nzOverlayClassName: \"nzOverlayClassName\",\n      nzOverlayStyle: \"nzOverlayStyle\",\n      nzDefaultActiveFirstOption: \"nzDefaultActiveFirstOption\",\n      nzBackfill: \"nzBackfill\",\n      compareWith: \"compareWith\",\n      nzDataSource: \"nzDataSource\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\"\n    },\n    exportAs: [\"nzAutocomplete\"],\n    ngContentSelectors: _c2,\n    decls: 1,\n    vars: 0,\n    consts: [[1, \"ant-select-dropdown\", \"ant-select-dropdown-placement-bottomLeft\", 3, \"ngClass\", \"ngStyle\", \"nzNoAnimation\"], [\"panel\", \"\"], [2, \"max-height\", \"256px\", \"overflow-y\", \"auto\", \"overflow-anchor\", \"none\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\"], [4, \"ngTemplateOutlet\"], [\"contentTemplate\", \"\"], [\"optionsTemplate\", \"\"], [3, \"nzValue\", \"nzLabel\", 4, \"ngFor\", \"ngForOf\"], [3, \"nzValue\", \"nzLabel\"]],\n    template: function NzAutocompleteComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, NzAutocompleteComponent_ng_template_0_Template, 9, 10, \"ng-template\");\n      }\n    },\n    directives: [NzAutocompleteOptionComponent, i4.NgClass, i4.NgStyle, i2$1.NzNoAnimationDirective, i4.NgTemplateOutlet, i4.NgForOf],\n    encapsulation: 2,\n    data: {\n      animation: [slideMotion]\n    },\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzAutocompleteComponent.prototype, \"nzDefaultActiveFirstOption\", void 0);\n\n  __decorate([InputBoolean()], NzAutocompleteComponent.prototype, \"nzBackfill\", void 0);\n\n  return NzAutocompleteComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzAutocompleteModule = /*#__PURE__*/(function () {\n  var NzAutocompleteModule = /*#__PURE__*/_createClass(function NzAutocompleteModule() {\n    _classCallCheck(this, NzAutocompleteModule);\n  });\n\n  NzAutocompleteModule.ɵfac = function NzAutocompleteModule_Factory(t) {\n    return new (t || NzAutocompleteModule)();\n  };\n\n  NzAutocompleteModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NzAutocompleteModule\n  });\n  NzAutocompleteModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, OverlayModule, FormsModule, NzOutletModule, NzNoAnimationModule, NzInputModule]]\n  });\n  return NzAutocompleteModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NZ_AUTOCOMPLETE_VALUE_ACCESSOR, NzAutocompleteComponent, NzAutocompleteModule, NzAutocompleteOptgroupComponent, NzAutocompleteOptionComponent, NzAutocompleteTriggerDirective, NzOptionSelectionChange, getNzAutocompleteMissingPanelError }; //# sourceMappingURL=ng-zorro-antd-auto-complete.mjs.map","map":null,"metadata":{},"sourceType":"module"}