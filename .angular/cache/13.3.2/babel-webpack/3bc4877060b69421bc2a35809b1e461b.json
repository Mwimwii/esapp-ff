{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { __decorate } from 'tslib';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, NgModule, Host, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, Injectable } from '@angular/core';\nimport { Subject, BehaviorSubject, merge, fromEvent, EMPTY, combineLatest, Subscription } from 'rxjs';\nimport { mapTo, map, switchMap, filter, auditTime, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\nimport * as i1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport { POSITION_MAP, NzOverlayModule } from 'ng-zorro-antd/core/overlay';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i2 from '@angular/cdk/overlay';\nimport { OverlayModule, ConnectionPositionPair } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i2$1 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i1$1 from 'ng-zorro-antd/button';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport * as i3$1 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport * as i1$2 from 'ng-zorro-antd/menu';\nimport { MenuService, NzIsMenuInsideDropDownToken, NzMenuModule } from 'ng-zorro-antd/menu';\nimport { slideMotion } from 'ng-zorro-antd/core/animation';\n\nfunction NzDropdownMenuComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵlistener(\"@slideMotion.done\", function NzDropdownMenuComponent_ng_template_0_Template_div_animation_slideMotion_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      var ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.onAnimationEvent($event);\n    })(\"mouseenter\", function NzDropdownMenuComponent_ng_template_0_Template_div_mouseenter_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      var ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.setMouseState(true);\n    })(\"mouseleave\", function NzDropdownMenuComponent_ng_template_0_Template_div_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      var ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.setMouseState(false);\n    });\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-dropdown-rtl\", ctx_r0.dir === \"rtl\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.nzOverlayClassName)(\"ngStyle\", ctx_r0.nzOverlayStyle)(\"@slideMotion\", undefined)(\"@.disabled\", ctx_r0.noAnimation == null ? null : ctx_r0.noAnimation.nzNoAnimation)(\"nzNoAnimation\", ctx_r0.noAnimation == null ? null : ctx_r0.noAnimation.nzNoAnimation);\n  }\n}\n\nvar _c0 = [\"*\"];\nvar NZ_CONFIG_MODULE_NAME = 'dropDown';\nvar listOfPositions$1 = [POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight, POSITION_MAP.topRight, POSITION_MAP.topLeft];\n\nvar NzDropDownDirective = /*#__PURE__*/function () {\n  function NzDropDownDirective(nzConfigService, elementRef, overlay, renderer, viewContainerRef, platform) {\n    _classCallCheck(this, NzDropDownDirective);\n\n    this.nzConfigService = nzConfigService;\n    this.elementRef = elementRef;\n    this.overlay = overlay;\n    this.renderer = renderer;\n    this.viewContainerRef = viewContainerRef;\n    this.platform = platform;\n    this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n    this.overlayRef = null;\n    this.destroy$ = new Subject();\n    this.positionStrategy = this.overlay.position().flexibleConnectedTo(this.elementRef.nativeElement).withLockedPosition().withTransformOriginOn('.ant-dropdown');\n    this.inputVisible$ = new BehaviorSubject(false);\n    this.nzTrigger$ = new BehaviorSubject('hover');\n    this.overlayClose$ = new Subject();\n    this.nzDropdownMenu = null;\n    this.nzTrigger = 'hover';\n    this.nzMatchWidthElement = null;\n    this.nzBackdrop = false;\n    this.nzClickHide = true;\n    this.nzDisabled = false;\n    this.nzVisible = false;\n    this.nzOverlayClassName = '';\n    this.nzOverlayStyle = {};\n    this.nzPlacement = 'bottomLeft';\n    this.nzVisibleChange = new EventEmitter();\n  }\n\n  _createClass(NzDropDownDirective, [{\n    key: \"setDropdownMenuValue\",\n    value: function setDropdownMenuValue(key, value) {\n      if (this.nzDropdownMenu) {\n        this.nzDropdownMenu.setValue(key, value);\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      if (this.nzDropdownMenu) {\n        var nativeElement = this.elementRef.nativeElement;\n        /** host mouse state **/\n\n        var hostMouseState$ = merge(fromEvent(nativeElement, 'mouseenter').pipe(mapTo(true)), fromEvent(nativeElement, 'mouseleave').pipe(mapTo(false)));\n        /** menu mouse state **/\n\n        var menuMouseState$ = this.nzDropdownMenu.mouseState$;\n        /** merged mouse state **/\n\n        var mergedMouseState$ = merge(menuMouseState$, hostMouseState$);\n        /** host click state **/\n\n        var hostClickState$ = fromEvent(nativeElement, 'click').pipe(map(function () {\n          return !_this.nzVisible;\n        }));\n        /** visible state switch by nzTrigger **/\n\n        var visibleStateByTrigger$ = this.nzTrigger$.pipe(switchMap(function (trigger) {\n          if (trigger === 'hover') {\n            return mergedMouseState$;\n          } else if (trigger === 'click') {\n            return hostClickState$;\n          } else {\n            return EMPTY;\n          }\n        }));\n        var descendantMenuItemClick$ = this.nzDropdownMenu.descendantMenuItemClick$.pipe(filter(function () {\n          return _this.nzClickHide;\n        }), mapTo(false));\n        var domTriggerVisible$ = merge(visibleStateByTrigger$, descendantMenuItemClick$, this.overlayClose$).pipe(filter(function () {\n          return !_this.nzDisabled;\n        }));\n        var visible$ = merge(this.inputVisible$, domTriggerVisible$);\n        combineLatest([visible$, this.nzDropdownMenu.isChildSubMenuOpen$]).pipe(map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              visible = _ref2[0],\n              sub = _ref2[1];\n\n          return visible || sub;\n        }), auditTime(150), distinctUntilChanged(), filter(function () {\n          return _this.platform.isBrowser;\n        }), takeUntil(this.destroy$)).subscribe(function (visible) {\n          var element = _this.nzMatchWidthElement ? _this.nzMatchWidthElement.nativeElement : nativeElement;\n          var triggerWidth = element.getBoundingClientRect().width;\n\n          if (_this.nzVisible !== visible) {\n            _this.nzVisibleChange.emit(visible);\n          }\n\n          _this.nzVisible = visible;\n\n          if (visible) {\n            /** set up overlayRef **/\n            if (!_this.overlayRef) {\n              /** new overlay **/\n              _this.overlayRef = _this.overlay.create({\n                positionStrategy: _this.positionStrategy,\n                minWidth: triggerWidth,\n                disposeOnNavigation: true,\n                hasBackdrop: _this.nzBackdrop && _this.nzTrigger === 'click',\n                scrollStrategy: _this.overlay.scrollStrategies.reposition()\n              });\n              merge(_this.overlayRef.backdropClick(), _this.overlayRef.detachments(), _this.overlayRef.outsidePointerEvents().pipe(filter(function (e) {\n                return !_this.elementRef.nativeElement.contains(e.target);\n              })), _this.overlayRef.keydownEvents().pipe(filter(function (e) {\n                return e.keyCode === ESCAPE && !hasModifierKey(e);\n              }))).pipe(takeUntil(_this.destroy$)).subscribe(function () {\n                _this.overlayClose$.next(false);\n              });\n            } else {\n              /** update overlay config **/\n              var overlayConfig = _this.overlayRef.getConfig();\n\n              overlayConfig.minWidth = triggerWidth;\n            }\n            /** open dropdown with animation **/\n\n\n            _this.positionStrategy.withPositions([POSITION_MAP[_this.nzPlacement]].concat(listOfPositions$1));\n            /** reset portal if needed **/\n\n\n            if (!_this.portal || _this.portal.templateRef !== _this.nzDropdownMenu.templateRef) {\n              _this.portal = new TemplatePortal(_this.nzDropdownMenu.templateRef, _this.viewContainerRef);\n            }\n\n            _this.overlayRef.attach(_this.portal);\n          } else {\n            /** detach overlayRef if needed **/\n            if (_this.overlayRef) {\n              _this.overlayRef.detach();\n            }\n          }\n        });\n        this.nzDropdownMenu.animationStateChange$.pipe(takeUntil(this.destroy$)).subscribe(function (event) {\n          if (event.toState === 'void') {\n            if (_this.overlayRef) {\n              _this.overlayRef.dispose();\n            }\n\n            _this.overlayRef = null;\n          }\n        });\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n\n      if (this.overlayRef) {\n        this.overlayRef.dispose();\n        this.overlayRef = null;\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzVisible = changes.nzVisible,\n          nzDisabled = changes.nzDisabled,\n          nzOverlayClassName = changes.nzOverlayClassName,\n          nzOverlayStyle = changes.nzOverlayStyle,\n          nzTrigger = changes.nzTrigger;\n\n      if (nzTrigger) {\n        this.nzTrigger$.next(this.nzTrigger);\n      }\n\n      if (nzVisible) {\n        this.inputVisible$.next(this.nzVisible);\n      }\n\n      if (nzDisabled) {\n        var nativeElement = this.elementRef.nativeElement;\n\n        if (this.nzDisabled) {\n          this.renderer.setAttribute(nativeElement, 'disabled', '');\n          this.inputVisible$.next(false);\n        } else {\n          this.renderer.removeAttribute(nativeElement, 'disabled');\n        }\n      }\n\n      if (nzOverlayClassName) {\n        this.setDropdownMenuValue('nzOverlayClassName', this.nzOverlayClassName);\n      }\n\n      if (nzOverlayStyle) {\n        this.setDropdownMenuValue('nzOverlayStyle', this.nzOverlayStyle);\n      }\n    }\n  }]);\n\n  return NzDropDownDirective;\n}();\n\nNzDropDownDirective.ɵfac = function NzDropDownDirective_Factory(t) {\n  return new (t || NzDropDownDirective)(i0.ɵɵdirectiveInject(i1.NzConfigService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Overlay), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i3.Platform));\n};\n\nNzDropDownDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzDropDownDirective,\n  selectors: [[\"\", \"nz-dropdown\", \"\"]],\n  hostAttrs: [1, \"ant-dropdown-trigger\"],\n  inputs: {\n    nzDropdownMenu: \"nzDropdownMenu\",\n    nzTrigger: \"nzTrigger\",\n    nzMatchWidthElement: \"nzMatchWidthElement\",\n    nzBackdrop: \"nzBackdrop\",\n    nzClickHide: \"nzClickHide\",\n    nzDisabled: \"nzDisabled\",\n    nzVisible: \"nzVisible\",\n    nzOverlayClassName: \"nzOverlayClassName\",\n    nzOverlayStyle: \"nzOverlayStyle\",\n    nzPlacement: \"nzPlacement\"\n  },\n  outputs: {\n    nzVisibleChange: \"nzVisibleChange\"\n  },\n  exportAs: [\"nzDropdown\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n__decorate([WithConfig(), InputBoolean()], NzDropDownDirective.prototype, \"nzBackdrop\", void 0);\n\n__decorate([InputBoolean()], NzDropDownDirective.prototype, \"nzClickHide\", void 0);\n\n__decorate([InputBoolean()], NzDropDownDirective.prototype, \"nzDisabled\", void 0);\n\n__decorate([InputBoolean()], NzDropDownDirective.prototype, \"nzVisible\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzDropDownDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-dropdown]',\n      exportAs: 'nzDropdown',\n      host: {\n        class: 'ant-dropdown-trigger'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1.NzConfigService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i2.Overlay\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i3.Platform\n    }];\n  }, {\n    nzDropdownMenu: [{\n      type: Input\n    }],\n    nzTrigger: [{\n      type: Input\n    }],\n    nzMatchWidthElement: [{\n      type: Input\n    }],\n    nzBackdrop: [{\n      type: Input\n    }],\n    nzClickHide: [{\n      type: Input\n    }],\n    nzDisabled: [{\n      type: Input\n    }],\n    nzVisible: [{\n      type: Input\n    }],\n    nzOverlayClassName: [{\n      type: Input\n    }],\n    nzOverlayStyle: [{\n      type: Input\n    }],\n    nzPlacement: [{\n      type: Input\n    }],\n    nzVisibleChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzContextMenuServiceModule = /*#__PURE__*/_createClass(function NzContextMenuServiceModule() {\n  _classCallCheck(this, NzContextMenuServiceModule);\n});\n\nNzContextMenuServiceModule.ɵfac = function NzContextMenuServiceModule_Factory(t) {\n  return new (t || NzContextMenuServiceModule)();\n};\n\nNzContextMenuServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzContextMenuServiceModule\n});\nNzContextMenuServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzContextMenuServiceModule, [{\n    type: NgModule\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzDropDownADirective = /*#__PURE__*/_createClass(function NzDropDownADirective() {\n  _classCallCheck(this, NzDropDownADirective);\n});\n\nNzDropDownADirective.ɵfac = function NzDropDownADirective_Factory(t) {\n  return new (t || NzDropDownADirective)();\n};\n\nNzDropDownADirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzDropDownADirective,\n  selectors: [[\"a\", \"nz-dropdown\", \"\"]],\n  hostAttrs: [1, \"ant-dropdown-link\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzDropDownADirective, [{\n    type: Directive,\n    args: [{\n      selector: 'a[nz-dropdown]',\n      host: {\n        class: 'ant-dropdown-link'\n      }\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzDropdownButtonDirective = /*#__PURE__*/function () {\n  function NzDropdownButtonDirective(renderer, nzButtonGroupComponent, elementRef) {\n    _classCallCheck(this, NzDropdownButtonDirective);\n\n    this.renderer = renderer;\n    this.nzButtonGroupComponent = nzButtonGroupComponent;\n    this.elementRef = elementRef;\n  }\n\n  _createClass(NzDropdownButtonDirective, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var parentElement = this.renderer.parentNode(this.elementRef.nativeElement);\n\n      if (this.nzButtonGroupComponent && parentElement) {\n        this.renderer.addClass(parentElement, 'ant-dropdown-button');\n      }\n    }\n  }]);\n\n  return NzDropdownButtonDirective;\n}();\n\nNzDropdownButtonDirective.ɵfac = function NzDropdownButtonDirective_Factory(t) {\n  return new (t || NzDropdownButtonDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1$1.NzButtonGroupComponent, 9), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nNzDropdownButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzDropdownButtonDirective,\n  selectors: [[\"\", \"nz-button\", \"\", \"nz-dropdown\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzDropdownButtonDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-button][nz-dropdown]'\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i1$1.NzButtonGroupComponent,\n      decorators: [{\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n\nvar NzDropdownMenuComponent = /*#__PURE__*/function () {\n  function NzDropdownMenuComponent(cdr, elementRef, renderer, viewContainerRef, nzMenuService, directionality, noAnimation) {\n    _classCallCheck(this, NzDropdownMenuComponent);\n\n    this.cdr = cdr;\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.viewContainerRef = viewContainerRef;\n    this.nzMenuService = nzMenuService;\n    this.directionality = directionality;\n    this.noAnimation = noAnimation;\n    this.mouseState$ = new BehaviorSubject(false);\n    this.isChildSubMenuOpen$ = this.nzMenuService.isChildSubMenuOpen$;\n    this.descendantMenuItemClick$ = this.nzMenuService.descendantMenuItemClick$;\n    this.animationStateChange$ = new EventEmitter();\n    this.nzOverlayClassName = '';\n    this.nzOverlayStyle = {};\n    this.dir = 'ltr';\n    this.destroy$ = new Subject();\n  }\n\n  _createClass(NzDropdownMenuComponent, [{\n    key: \"onAnimationEvent\",\n    value: function onAnimationEvent(event) {\n      this.animationStateChange$.emit(event);\n    }\n  }, {\n    key: \"setMouseState\",\n    value: function setMouseState(visible) {\n      this.mouseState$.next(visible);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(key, value) {\n      this[key] = value;\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      var _a;\n\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n        _this2.dir = direction;\n\n        _this2.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), this.elementRef.nativeElement);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }]);\n\n  return NzDropdownMenuComponent;\n}();\n\nNzDropdownMenuComponent.ɵfac = function NzDropdownMenuComponent_Factory(t) {\n  return new (t || NzDropdownMenuComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1$2.MenuService), i0.ɵɵdirectiveInject(i2$1.Directionality, 8), i0.ɵɵdirectiveInject(i3$1.NzNoAnimationDirective, 9));\n};\n\nNzDropdownMenuComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzDropdownMenuComponent,\n  selectors: [[\"nz-dropdown-menu\"]],\n  viewQuery: function NzDropdownMenuComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TemplateRef, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    }\n  },\n  exportAs: [\"nzDropdownMenu\"],\n  features: [i0.ɵɵProvidersFeature([MenuService,\n  /** menu is inside dropdown-menu component **/\n  {\n    provide: NzIsMenuInsideDropDownToken,\n    useValue: true\n  }])],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  consts: [[1, \"ant-dropdown\", 3, \"ngClass\", \"ngStyle\", \"nzNoAnimation\", \"mouseenter\", \"mouseleave\"]],\n  template: function NzDropdownMenuComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, NzDropdownMenuComponent_ng_template_0_Template, 2, 7, \"ng-template\");\n    }\n  },\n  directives: [i4.NgClass, i4.NgStyle, i3$1.NzNoAnimationDirective],\n  encapsulation: 2,\n  data: {\n    animation: [slideMotion]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzDropdownMenuComponent, [{\n    type: Component,\n    args: [{\n      selector: \"nz-dropdown-menu\",\n      exportAs: \"nzDropdownMenu\",\n      animations: [slideMotion],\n      providers: [MenuService,\n      /** menu is inside dropdown-menu component **/\n      {\n        provide: NzIsMenuInsideDropDownToken,\n        useValue: true\n      }],\n      template: \"\\n    <ng-template>\\n      <div\\n        class=\\\"ant-dropdown\\\"\\n        [class.ant-dropdown-rtl]=\\\"dir === 'rtl'\\\"\\n        [ngClass]=\\\"nzOverlayClassName\\\"\\n        [ngStyle]=\\\"nzOverlayStyle\\\"\\n        @slideMotion\\n        (@slideMotion.done)=\\\"onAnimationEvent($event)\\\"\\n        [@.disabled]=\\\"noAnimation?.nzNoAnimation\\\"\\n        [nzNoAnimation]=\\\"noAnimation?.nzNoAnimation\\\"\\n        (mouseenter)=\\\"setMouseState(true)\\\"\\n        (mouseleave)=\\\"setMouseState(false)\\\"\\n      >\\n        <ng-content></ng-content>\\n      </div>\\n    </ng-template>\\n  \",\n      preserveWhitespaces: false,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i1$2.MenuService\n    }, {\n      type: i2$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3$1.NzNoAnimationDirective,\n      decorators: [{\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    templateRef: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzDropDownModule = /*#__PURE__*/_createClass(function NzDropDownModule() {\n  _classCallCheck(this, NzDropDownModule);\n});\n\nNzDropDownModule.ɵfac = function NzDropDownModule_Factory(t) {\n  return new (t || NzDropDownModule)();\n};\n\nNzDropDownModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzDropDownModule,\n  declarations: [NzDropDownDirective, NzDropDownADirective, NzDropdownMenuComponent, NzDropdownButtonDirective],\n  imports: [BidiModule, CommonModule, OverlayModule, FormsModule, NzButtonModule, NzMenuModule, NzIconModule, NzNoAnimationModule, PlatformModule, NzOverlayModule, NzContextMenuServiceModule, NzOutletModule],\n  exports: [NzMenuModule, NzDropDownDirective, NzDropDownADirective, NzDropdownMenuComponent, NzDropdownButtonDirective]\n});\nNzDropDownModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[BidiModule, CommonModule, OverlayModule, FormsModule, NzButtonModule, NzMenuModule, NzIconModule, NzNoAnimationModule, PlatformModule, NzOverlayModule, NzContextMenuServiceModule, NzOutletModule], NzMenuModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzDropDownModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, CommonModule, OverlayModule, FormsModule, NzButtonModule, NzMenuModule, NzIconModule, NzNoAnimationModule, PlatformModule, NzOverlayModule, NzContextMenuServiceModule, NzOutletModule],\n      entryComponents: [NzDropdownMenuComponent],\n      declarations: [NzDropDownDirective, NzDropDownADirective, NzDropdownMenuComponent, NzDropdownButtonDirective],\n      exports: [NzMenuModule, NzDropDownDirective, NzDropDownADirective, NzDropdownMenuComponent, NzDropdownButtonDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar listOfPositions = [new ConnectionPositionPair({\n  originX: 'start',\n  originY: 'top'\n}, {\n  overlayX: 'start',\n  overlayY: 'top'\n}), new ConnectionPositionPair({\n  originX: 'start',\n  originY: 'top'\n}, {\n  overlayX: 'start',\n  overlayY: 'bottom'\n}), new ConnectionPositionPair({\n  originX: 'start',\n  originY: 'top'\n}, {\n  overlayX: 'end',\n  overlayY: 'bottom'\n}), new ConnectionPositionPair({\n  originX: 'start',\n  originY: 'top'\n}, {\n  overlayX: 'end',\n  overlayY: 'top'\n})];\n\nvar NzContextMenuService = /*#__PURE__*/function () {\n  function NzContextMenuService(ngZone, overlay) {\n    _classCallCheck(this, NzContextMenuService);\n\n    this.ngZone = ngZone;\n    this.overlay = overlay;\n    this.overlayRef = null;\n    this.closeSubscription = Subscription.EMPTY;\n  }\n\n  _createClass(NzContextMenuService, [{\n    key: \"create\",\n    value: function create($event, nzDropdownMenuComponent) {\n      var _this3 = this;\n\n      this.close(true);\n      var x = $event.x,\n          y = $event.y;\n\n      if ($event instanceof MouseEvent) {\n        $event.preventDefault();\n      }\n\n      var positionStrategy = this.overlay.position().flexibleConnectedTo({\n        x: x,\n        y: y\n      }).withPositions(listOfPositions).withTransformOriginOn('.ant-dropdown');\n      this.overlayRef = this.overlay.create({\n        positionStrategy: positionStrategy,\n        disposeOnNavigation: true,\n        scrollStrategy: this.overlay.scrollStrategies.close()\n      });\n      this.closeSubscription = new Subscription();\n      this.closeSubscription.add(nzDropdownMenuComponent.descendantMenuItemClick$.subscribe(function () {\n        return _this3.close();\n      }));\n      this.closeSubscription.add(this.ngZone.runOutsideAngular(function () {\n        return fromEvent(document, 'click').pipe(filter(function (event) {\n          return !!_this3.overlayRef && !_this3.overlayRef.overlayElement.contains(event.target);\n        }),\n        /** handle firefox contextmenu event **/\n        filter(function (event) {\n          return event.button !== 2;\n        }), take(1)).subscribe(function () {\n          return _this3.ngZone.run(function () {\n            return _this3.close();\n          });\n        });\n      }));\n      this.overlayRef.attach(new TemplatePortal(nzDropdownMenuComponent.templateRef, nzDropdownMenuComponent.viewContainerRef));\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var clear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.overlayRef) {\n        this.overlayRef.detach();\n\n        if (clear) {\n          this.overlayRef.dispose();\n        }\n\n        this.overlayRef = null;\n        this.closeSubscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return NzContextMenuService;\n}();\n\nNzContextMenuService.ɵfac = function NzContextMenuService_Factory(t) {\n  return new (t || NzContextMenuService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.Overlay));\n};\n\nNzContextMenuService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NzContextMenuService,\n  factory: NzContextMenuService.ɵfac,\n  providedIn: NzContextMenuServiceModule\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzContextMenuService, [{\n    type: Injectable,\n    args: [{\n      providedIn: NzContextMenuServiceModule\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i2.Overlay\n    }];\n  }, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzContextMenuService, NzContextMenuServiceModule, NzDropDownADirective, NzDropDownDirective, NzDropDownModule, NzDropdownButtonDirective, NzDropdownMenuComponent }; //# sourceMappingURL=ng-zorro-antd-dropdown.mjs.map","map":null,"metadata":{},"sourceType":"module"}