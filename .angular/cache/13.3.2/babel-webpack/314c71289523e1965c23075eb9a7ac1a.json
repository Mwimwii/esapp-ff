{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { __awaiter } from \"tslib\";\nimport { FormGroup } from '@angular/forms';\nimport { EsappRequestHandlerService } from '../../../esapp-request-handler.service';\nimport { NzNotificationService } from 'ng-zorro-antd/notification';\nimport { Geolocation } from '@capacitor/geolocation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../esapp-request-handler.service\";\nimport * as i2 from \"ng-zorro-antd/notification\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"ng-zorro-antd/form\";\nimport * as i5 from \"@ngx-formly/core\";\nexport var AppFarmerRegistrationFormComponent = /*#__PURE__*/(function () {\n  var AppFarmerRegistrationFormComponent = /*#__PURE__*/function () {\n    function AppFarmerRegistrationFormComponent(http, notification) {\n      var _this = this;\n\n      _classCallCheck(this, AppFarmerRegistrationFormComponent);\n\n      this.http = http;\n      this.notification = notification;\n\n      this.setCurrentPosition = function () {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _this2 = this;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Geolocation.getCurrentPosition().then(function (_ref) {\n                    var coords = _ref.coords;\n                    _this2.longintude = coords.longitude;\n                    _this2.latitude = coords.latitude;\n                  });\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      };\n\n      this.model = {};\n      this.form = new FormGroup({});\n\n      this.genericField = function (kval, klabel, kplaceholder) {\n        var required = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _this.required;\n        return {\n          key: kval,\n          type: \"input\",\n          templateOptions: {\n            type: \"text\",\n            label: klabel,\n            placeholder: kplaceholder,\n            required: required\n          }\n        };\n      };\n\n      this.genericSectionLabel = function (klabel) {\n        var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var sep_tag = '';\n\n        if (separator) {\n          sep_tag = '<hr />';\n        }\n\n        return {\n          className: 'section-label',\n          template: \"\".concat(sep_tag, \"<strong>\").concat(klabel, \":</strong></div><br />\")\n        };\n      };\n\n      this.required = true;\n      this.fields = [// Group 1 Fields\n      this.genericSectionLabel('Farmer Names'), {\n        fieldGroupClassName: 'row',\n        fieldGroup: [{\n          key: 'title',\n          type: 'select',\n          templateOptions: {\n            label: 'Title',\n            options: [{\n              value: 'Mr.',\n              label: 'Mr'\n            }, {\n              value: 'Mrs.',\n              label: 'Mrs'\n            }, {\n              value: 'Ms.',\n              label: 'Ms'\n            }, {\n              value: 'Miss.',\n              label: 'Miss'\n            }, {\n              value: 'Dr.',\n              label: 'Dr'\n            }, {\n              value: 'Prof.',\n              label: 'Prof'\n            }]\n          },\n          className: 'col-1'\n        }, Object.assign({\n          className: 'col-3'\n        }, this.genericField('firstName', 'First Name', 'Jonathan')), Object.assign({\n          className: 'col-3'\n        }, this.genericField('other_names', 'Other Name', 'P', false)), Object.assign({\n          className: 'col-3'\n        }, this.genericField('last_name', 'Last Name', 'Mwamba'))]\n      }, this.genericSectionLabel('Farmer Identification', true), {\n        fieldGroupClassName: 'row',\n        fieldGroup: [{\n          key: 'sex',\n          type: 'select',\n          templateOptions: {\n            type: 'select',\n            label: 'Sex',\n            placeholder: 'Select Sex',\n            options: [{\n              value: 'Male',\n              label: 'Male'\n            }, {\n              value: 'Female',\n              label: 'Female'\n            }]\n          },\n          className: 'col-4'\n        }, {\n          className: 'col-4',\n          key: 'dob',\n          type: 'input',\n          templateOptions: {\n            type: 'date',\n            label: 'Date of Birth',\n            required: this.required\n          }\n        }, Object.assign({\n          className: 'col-4'\n        }, this.genericField('nrc', 'NRC', '123435/10/1'))]\n      }, this.genericSectionLabel('Household', true), {\n        fieldGroupClassName: 'row',\n        fieldGroup: [{\n          key: 'marital_status',\n          type: 'select',\n          templateOptions: {\n            type: 'text',\n            label: 'Marital Status',\n            placeholder: 'Select Marital Status',\n            options: [{\n              value: 'Single',\n              label: 'Single'\n            }, {\n              value: 'Married',\n              label: 'Married'\n            }, {\n              value: 'Divorced',\n              label: 'Divorced'\n            }, {\n              value: 'Widowed',\n              label: 'Widowed'\n            }, {\n              value: 'Separated',\n              label: 'Separated'\n            }, {\n              value: 'Other',\n              label: 'Other'\n            }]\n          },\n          className: 'col-3'\n        }, {\n          key: 'relationship_to_household_head',\n          type: 'select',\n          className: 'col-3',\n          templateOptions: {\n            type: 'text',\n            label: 'Relationship to Household Head',\n            placeholder: 'Select Relationship to Household Head',\n            options: [{\n              value: 'Head of Household',\n              label: 'Head of Household'\n            }, {\n              value: 'Spouse',\n              label: 'Spouse'\n            }, {\n              value: 'Parent',\n              label: 'Parent'\n            }, {\n              value: 'Sibling',\n              label: 'Sibling'\n            }, {\n              value: 'Child',\n              label: 'Child'\n            }, {\n              value: 'Other',\n              label: 'Other'\n            }]\n          }\n        }, {\n          className: 'col-3',\n          key: 'household_size',\n          type: 'input',\n          templateOptions: {\n            type: 'number',\n            label: 'Household Size',\n            placeholder: 'Enter Household Size'\n          }\n        }]\n      }, this.genericSectionLabel('Location and Village'), {\n        fieldGroupClassName: 'row',\n        fieldGroup: [Object.assign({\n          className: 'col-3'\n        }, this.genericField('village', 'Village', 'Enter a Village')), Object.assign({\n          className: 'col-3'\n        }, this.genericField('chiefdom', 'Chiefdom', 'Enter a Chiefdom')), Object.assign({\n          className: 'col-3'\n        }, this.genericField('block', 'Block', 'Enter a Block')), Object.assign({\n          className: 'col-3'\n        }, this.genericField('zone', 'Zone', 'Enter a Zone'))]\n      }, this.genericField('commodity', 'Commodity', 'Enter a Commodity'), this.genericField('contact_number', 'Contact Number', '0977738827')];\n    }\n\n    _createClass(AppFarmerRegistrationFormComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.setCurrentPosition();\n      }\n    }, {\n      key: \"submit\",\n      value: function submit(model) {\n        this.model = Object.assign(Object.assign({}, this.model), {\n          faabs_group_id: 1,\n          registration_date: this.getDate(),\n          age: this.calcAge(this === null || this === void 0 ? void 0 : this.model['dob']),\n          status: 1,\n          latitude: this.latitude.toString(),\n          longintude: this.longintude.toString(),\n          created_by: 1,\n          updated_by: 1\n        });\n        this.notification.success('Farmer Registered', 'Farmer successfully registered!');\n\n        if (this.form.valid) {\n          this.http.postDataAuthenticated('/category-a-farmers', this.model).subscribe(function (data) {\n            return console.log;\n          }, function (error) {\n            return console.error;\n          });\n        }\n      } // Todo: Move to a service util\n\n    }, {\n      key: \"getDate\",\n      value: function getDate() {\n        var now = new Date();\n        return now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate();\n      }\n    }, {\n      key: \"calcAge\",\n      value: function calcAge(dob) {\n        var dob_date = new Date(dob);\n        var today = new Date();\n        var age = today.getFullYear() - dob_date.getFullYear();\n        var m = today.getMonth() - dob_date.getMonth();\n\n        if (m < 0 || m === 0 && today.getDate() < dob_date.getDate()) {\n          age--;\n        }\n\n        return age;\n      }\n    }]);\n\n    return AppFarmerRegistrationFormComponent;\n  }();\n\n  AppFarmerRegistrationFormComponent.ɵfac = function AppFarmerRegistrationFormComponent_Factory(t) {\n    return new (t || AppFarmerRegistrationFormComponent)(i0.ɵɵdirectiveInject(i1.EsappRequestHandlerService), i0.ɵɵdirectiveInject(i2.NzNotificationService));\n  };\n\n  AppFarmerRegistrationFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppFarmerRegistrationFormComponent,\n    selectors: [[\"app-farmer-registration-form\"]],\n    decls: 9,\n    vars: 5,\n    consts: [[1, \"container\"], [\"nz-form\", \"\", 3, \"formGroup\", \"nzLayout\", \"ngSubmit\"], [3, \"form\", \"fields\", \"model\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"type\", \"reset\", 1, \"btn\", \"btn-danger\", \"ml-2\"]],\n    template: function AppFarmerRegistrationFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"br\")(2, \"hr\");\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function AppFarmerRegistrationFormComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.submit(ctx.model);\n        });\n        i0.ɵɵelementStart(4, \"formly-form\", 2)(5, \"button\", 3);\n        i0.ɵɵtext(6, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 4);\n        i0.ɵɵtext(8, \"Reset\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.form)(\"nzLayout\", \"vertical\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"form\", ctx.form)(\"fields\", ctx.fields)(\"model\", ctx.model);\n      }\n    },\n    directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i4.NzFormDirective, i3.FormGroupDirective, i5.FormlyForm],\n    styles: [\"\"]\n  });\n  return AppFarmerRegistrationFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
