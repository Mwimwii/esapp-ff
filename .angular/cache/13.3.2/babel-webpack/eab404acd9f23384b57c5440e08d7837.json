{"ast":null,"code":"import _inherits from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _toConsumableArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _defineProperty from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\admin\\\\Documents\\\\work\\\\ESAPP\\\\esapp-mobile\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as i3$1 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, EventEmitter, Host, Optional, Output, Injectable, SkipSelf, forwardRef, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from 'ng-zorro-antd/core/highlight';\nimport { NzHighlightModule } from 'ng-zorro-antd/core/highlight';\nimport * as i4$1 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport * as i2 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i3 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { __decorate } from 'tslib';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i1 from 'ng-zorro-antd/core/tree';\nimport { NzTreeBaseService, NzTreeBase, flattenTreeData, NzTreeHigherOrderServiceToken } from 'ng-zorro-antd/core/tree';\nexport { NzTreeNode } from 'ng-zorro-antd/core/tree';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport * as i2$1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nfunction NzTreeIndentComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\");\n  }\n\n  if (rf & 2) {\n    var i_r2 = ctx.index;\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-tree-indent-unit\", !ctx_r0.nzSelectMode)(\"ant-select-tree-indent-unit\", ctx_r0.nzSelectMode)(\"ant-select-tree-indent-unit-start\", ctx_r0.nzSelectMode && ctx_r0.nzIsStart[i_r2])(\"ant-tree-indent-unit-start\", !ctx_r0.nzSelectMode && ctx_r0.nzIsStart[i_r2])(\"ant-select-tree-indent-unit-end\", ctx_r0.nzSelectMode && ctx_r0.nzIsEnd[i_r2])(\"ant-tree-indent-unit-end\", !ctx_r0.nzSelectMode && ctx_r0.nzIsEnd[i_r2]);\n  }\n}\n\nvar _c0 = [\"builtin\", \"\"];\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"ant-select-tree-switcher-icon\", ctx_r5.nzSelectMode)(\"ant-tree-switcher-icon\", !ctx_r5.nzSelectMode);\n  }\n}\n\nvar _c1 = function _c1(a0, a1) {\n  return {\n    $implicit: a0,\n    origin: a1\n  };\n};\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template, 2, 4, \"ng-container\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r4.nzExpandedIcon)(\"nzStringTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c1, ctx_r4.context, ctx_r4.context.origin));\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template, 2, 5, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n\n    var _r2 = i0.ɵɵreference(3);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isLoading)(\"ngIfElse\", _r2);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 7);\n  }\n\n  if (rf & 2) {\n    var ctx_r8 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"nzType\", ctx_r8.isSwitcherOpen ? \"minus-square\" : \"plus-square\");\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 8);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_1_Template, 1, 1, \"i\", 5);\n    i0.ɵɵtemplate(2, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_2_Template, 1, 0, \"i\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.isShowLineIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.isShowLineIcon);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template, 3, 2, \"ng-container\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r6.nzExpandedIcon)(\"nzStringTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c1, ctx_r6.context, ctx_r6.context.origin));\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template, 2, 5, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n\n    var _r2 = i0.ɵɵreference(3);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isLoading)(\"ngIfElse\", _r2);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 9);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"nzSpin\", true);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_template_0_Template(rf, ctx) {}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"nzType\", ctx_r4.icon);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"span\");\n    i0.ɵɵtemplate(2, NzTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template, 1, 1, \"i\", 5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"ant-tree-icon__open\", ctx_r2.isSwitcherOpen)(\"ant-tree-icon__close\", ctx_r2.isSwitcherClose)(\"ant-tree-icon_loading\", ctx_r2.isLoading)(\"ant-select-tree-iconEle\", ctx_r2.selectMode)(\"ant-tree-iconEle\", !ctx_r2.selectMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"ant-select-tree-iconEle\", ctx_r2.selectMode)(\"ant-select-tree-icon__customize\", ctx_r2.selectMode)(\"ant-tree-iconEle\", !ctx_r2.selectMode)(\"ant-tree-icon__customize\", !ctx_r2.selectMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.icon);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_nz_tree_drop_indicator_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-tree-drop-indicator\", 7);\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"dropPosition\", ctx_r3.dragPosition)(\"level\", ctx_r3.context.level);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeTitleComponent_ng_container_1_span_1_Template, 3, 19, \"span\", 2);\n    i0.ɵɵelement(2, \"span\", 3);\n    i0.ɵɵpipe(3, \"nzHighlight\");\n    i0.ɵɵtemplate(4, NzTreeNodeTitleComponent_ng_container_1_nz_tree_drop_indicator_4_Template, 1, 2, \"nz-tree-drop-indicator\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.icon && ctx_r1.showIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind4(3, 3, ctx_r1.title, ctx_r1.matchedValue, \"i\", \"font-highlight\"), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.showIndicator);\n  }\n}\n\nfunction NzTreeNodeBuiltinComponent_nz_tree_node_switcher_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"nz-tree-node-switcher\", 4);\n    i0.ɵɵlistener(\"click\", function NzTreeNodeBuiltinComponent_nz_tree_node_switcher_1_Template_nz_tree_node_switcher_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      var ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.clickExpand($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nzShowExpand\", ctx_r0.nzShowExpand)(\"nzShowLine\", ctx_r0.nzShowLine)(\"nzExpandedIcon\", ctx_r0.nzExpandedIcon)(\"nzSelectMode\", ctx_r0.nzSelectMode)(\"context\", ctx_r0.nzTreeNode)(\"isLeaf\", ctx_r0.isLeaf)(\"isExpanded\", ctx_r0.isExpanded)(\"isLoading\", ctx_r0.isLoading);\n  }\n}\n\nfunction NzTreeNodeBuiltinComponent_nz_tree_node_checkbox_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"nz-tree-node-checkbox\", 5);\n    i0.ɵɵlistener(\"click\", function NzTreeNodeBuiltinComponent_nz_tree_node_checkbox_2_Template_nz_tree_node_checkbox_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      var ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.clickCheckBox($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nzSelectMode\", ctx_r1.nzSelectMode)(\"isChecked\", ctx_r1.isChecked)(\"isHalfChecked\", ctx_r1.isHalfChecked)(\"isDisabled\", ctx_r1.isDisabled)(\"isDisableCheckbox\", ctx_r1.isDisableCheckbox);\n  }\n}\n\nvar _c2 = [\"nzTreeTemplate\"];\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_ng_template_1_Template(rf, ctx) {}\n\nvar _c3 = function _c3(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var node_r5 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n\n    var _r2 = i0.ɵɵreference(9);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c3, node_r5));\n  }\n}\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 8);\n    i0.ɵɵtemplate(1, NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_Template, 2, 4, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r0.nzVirtualHeight);\n    i0.ɵɵclassProp(\"ant-select-tree-list-holder-inner\", ctx_r0.nzSelectMode)(\"ant-tree-list-holder-inner\", !ctx_r0.nzSelectMode);\n    i0.ɵɵproperty(\"itemSize\", ctx_r0.nzVirtualItemSize)(\"minBufferPx\", ctx_r0.nzVirtualMinBufferPx)(\"maxBufferPx\", ctx_r0.nzVirtualMaxBufferPx);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"cdkVirtualForOf\", ctx_r0.nzFlattenNodes)(\"cdkVirtualForTrackBy\", ctx_r0.trackByFlattenNode);\n  }\n}\n\nfunction NzTreeComponent_div_7_ng_container_1_ng_template_1_Template(rf, ctx) {}\n\nfunction NzTreeComponent_div_7_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeComponent_div_7_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var node_r8 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n\n    var _r2 = i0.ɵɵreference(9);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c3, node_r8));\n  }\n}\n\nfunction NzTreeComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, NzTreeComponent_div_7_ng_container_1_Template, 2, 4, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-select-tree-list-holder-inner\", ctx_r1.nzSelectMode)(\"ant-tree-list-holder-inner\", !ctx_r1.nzSelectMode);\n    i0.ɵɵproperty(\"@.disabled\", ctx_r1.beforeInit || (ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))(\"nzNoAnimation\", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)(\"@treeCollapseMotion\", ctx_r1.nzFlattenNodes.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.nzFlattenNodes)(\"ngForTrackBy\", ctx_r1.trackByFlattenNode);\n  }\n}\n\nfunction NzTreeComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"nz-tree-node\", 13);\n    i0.ɵɵlistener(\"nzExpandChange\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzExpandChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.eventTriggerChanged($event);\n    })(\"nzClick\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.eventTriggerChanged($event);\n    })(\"nzDblClick\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzDblClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.eventTriggerChanged($event);\n    })(\"nzContextMenu\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzContextMenu_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.eventTriggerChanged($event);\n    })(\"nzCheckBoxChange\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzCheckBoxChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.eventTriggerChanged($event);\n    })(\"nzOnDragStart\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragStart_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.eventTriggerChanged($event);\n    })(\"nzOnDragEnter\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragEnter_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.eventTriggerChanged($event);\n    })(\"nzOnDragOver\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragOver_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.eventTriggerChanged($event);\n    })(\"nzOnDragLeave\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragLeave_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.eventTriggerChanged($event);\n    })(\"nzOnDragEnd\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragEnd_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.eventTriggerChanged($event);\n    })(\"nzOnDrop\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDrop_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.eventTriggerChanged($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var treeNode_r10 = ctx.$implicit;\n    var ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"icon\", treeNode_r10.icon)(\"title\", treeNode_r10.title)(\"isLoading\", treeNode_r10.isLoading)(\"isSelected\", treeNode_r10.isSelected)(\"isDisabled\", treeNode_r10.isDisabled)(\"isMatched\", treeNode_r10.isMatched)(\"isExpanded\", treeNode_r10.isExpanded)(\"isLeaf\", treeNode_r10.isLeaf)(\"isStart\", treeNode_r10.isStart)(\"isEnd\", treeNode_r10.isEnd)(\"isChecked\", treeNode_r10.isChecked)(\"isHalfChecked\", treeNode_r10.isHalfChecked)(\"isDisableCheckbox\", treeNode_r10.isDisableCheckbox)(\"isSelectable\", treeNode_r10.isSelectable)(\"canHide\", treeNode_r10.canHide)(\"nzTreeNode\", treeNode_r10)(\"nzSelectMode\", ctx_r3.nzSelectMode)(\"nzShowLine\", ctx_r3.nzShowLine)(\"nzExpandedIcon\", ctx_r3.nzExpandedIcon)(\"nzDraggable\", ctx_r3.nzDraggable)(\"nzCheckable\", ctx_r3.nzCheckable)(\"nzShowExpand\", ctx_r3.nzShowExpand)(\"nzAsyncData\", ctx_r3.nzAsyncData)(\"nzSearchValue\", ctx_r3.nzSearchValue)(\"nzHideUnMatched\", ctx_r3.nzHideUnMatched)(\"nzBeforeDrop\", ctx_r3.nzBeforeDrop)(\"nzShowIcon\", ctx_r3.nzShowIcon)(\"nzTreeTemplate\", ctx_r3.nzTreeTemplate || ctx_r3.nzTreeTemplateChild);\n  }\n}\n\nvar NzTreeDropIndicatorComponent = /*#__PURE__*/function () {\n  function NzTreeDropIndicatorComponent(cdr) {\n    _classCallCheck(this, NzTreeDropIndicatorComponent);\n\n    this.cdr = cdr;\n    this.level = 1;\n    this.direction = 'ltr';\n    this.style = {};\n  }\n\n  _createClass(NzTreeDropIndicatorComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(_changes) {\n      this.renderIndicator(this.dropPosition, this.direction);\n    }\n  }, {\n    key: \"renderIndicator\",\n    value: function renderIndicator(dropPosition) {\n      var _style;\n\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ltr';\n      var offset = 4;\n      var startPosition = direction === 'ltr' ? 'left' : 'right';\n      var endPosition = direction === 'ltr' ? 'right' : 'left';\n      var style = (_style = {}, _defineProperty(_style, startPosition, \"\".concat(offset, \"px\")), _defineProperty(_style, endPosition, '0px'), _style);\n\n      switch (dropPosition) {\n        case -1:\n          style.top = \"\".concat(-3, \"px\");\n          break;\n\n        case 1:\n          style.bottom = \"\".concat(-3, \"px\");\n          break;\n\n        case 0:\n          // dropPosition === 0\n          style.bottom = \"\".concat(-3, \"px\");\n          style[startPosition] = \"\".concat(offset + 24, \"px\");\n          break;\n\n        default:\n          style.display = 'none';\n          break;\n      }\n\n      this.style = style;\n      this.cdr.markForCheck();\n    }\n  }]);\n\n  return NzTreeDropIndicatorComponent;\n}();\n\nNzTreeDropIndicatorComponent.ɵfac = function NzTreeDropIndicatorComponent_Factory(t) {\n  return new (t || NzTreeDropIndicatorComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nNzTreeDropIndicatorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeDropIndicatorComponent,\n  selectors: [[\"nz-tree-drop-indicator\"]],\n  hostVars: 4,\n  hostBindings: function NzTreeDropIndicatorComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleMap(ctx.style);\n      i0.ɵɵclassProp(\"ant-tree-drop-indicator\", true);\n    }\n  },\n  inputs: {\n    dropPosition: \"dropPosition\",\n    level: \"level\",\n    direction: \"direction\"\n  },\n  exportAs: [\"NzTreeDropIndicator\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function NzTreeDropIndicatorComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeDropIndicatorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-drop-indicator',\n      exportAs: 'NzTreeDropIndicator',\n      template: \"\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-tree-drop-indicator]': 'true',\n        '[style]': 'style'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    dropPosition: [{\n      type: Input\n    }],\n    level: [{\n      type: Input\n    }],\n    direction: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeIndentComponent = /*#__PURE__*/function () {\n  function NzTreeIndentComponent() {\n    _classCallCheck(this, NzTreeIndentComponent);\n\n    this.nzTreeLevel = 0;\n    this.nzIsStart = [];\n    this.nzIsEnd = [];\n    this.nzSelectMode = false;\n    this.listOfUnit = [];\n  }\n\n  _createClass(NzTreeIndentComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzTreeLevel = changes.nzTreeLevel;\n\n      if (nzTreeLevel) {\n        this.listOfUnit = _toConsumableArray(new Array(nzTreeLevel.currentValue || 0));\n      }\n    }\n  }]);\n\n  return NzTreeIndentComponent;\n}();\n\nNzTreeIndentComponent.ɵfac = function NzTreeIndentComponent_Factory(t) {\n  return new (t || NzTreeIndentComponent)();\n};\n\nNzTreeIndentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeIndentComponent,\n  selectors: [[\"nz-tree-indent\"]],\n  hostVars: 5,\n  hostBindings: function NzTreeIndentComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-hidden\", true);\n      i0.ɵɵclassProp(\"ant-tree-indent\", !ctx.nzSelectMode)(\"ant-select-tree-indent\", ctx.nzSelectMode);\n    }\n  },\n  inputs: {\n    nzTreeLevel: \"nzTreeLevel\",\n    nzIsStart: \"nzIsStart\",\n    nzIsEnd: \"nzIsEnd\",\n    nzSelectMode: \"nzSelectMode\"\n  },\n  exportAs: [\"nzTreeIndent\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"ant-tree-indent-unit\", \"ant-select-tree-indent-unit\", \"ant-select-tree-indent-unit-start\", \"ant-tree-indent-unit-start\", \"ant-select-tree-indent-unit-end\", \"ant-tree-indent-unit-end\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function NzTreeIndentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NzTreeIndentComponent_span_0_Template, 1, 12, \"span\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.listOfUnit);\n    }\n  },\n  directives: [i7.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeIndentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-indent',\n      exportAs: 'nzTreeIndent',\n      template: \"\\n    <span\\n      [class.ant-tree-indent-unit]=\\\"!nzSelectMode\\\"\\n      [class.ant-select-tree-indent-unit]=\\\"nzSelectMode\\\"\\n      [class.ant-select-tree-indent-unit-start]=\\\"nzSelectMode && nzIsStart[i]\\\"\\n      [class.ant-tree-indent-unit-start]=\\\"!nzSelectMode && nzIsStart[i]\\\"\\n      [class.ant-select-tree-indent-unit-end]=\\\"nzSelectMode && nzIsEnd[i]\\\"\\n      [class.ant-tree-indent-unit-end]=\\\"!nzSelectMode && nzIsEnd[i]\\\"\\n      *ngFor=\\\"let _ of listOfUnit; let i = index\\\"\\n    ></span>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[attr.aria-hidden]': 'true',\n        '[class.ant-tree-indent]': '!nzSelectMode',\n        '[class.ant-select-tree-indent]': 'nzSelectMode'\n      }\n    }]\n  }], null, {\n    nzTreeLevel: [{\n      type: Input\n    }],\n    nzIsStart: [{\n      type: Input\n    }],\n    nzIsEnd: [{\n      type: Input\n    }],\n    nzSelectMode: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeNodeBuiltinCheckboxComponent = /*#__PURE__*/_createClass(function NzTreeNodeBuiltinCheckboxComponent() {\n  _classCallCheck(this, NzTreeNodeBuiltinCheckboxComponent);\n\n  this.nzSelectMode = false;\n});\n\nNzTreeNodeBuiltinCheckboxComponent.ɵfac = function NzTreeNodeBuiltinCheckboxComponent_Factory(t) {\n  return new (t || NzTreeNodeBuiltinCheckboxComponent)();\n};\n\nNzTreeNodeBuiltinCheckboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeBuiltinCheckboxComponent,\n  selectors: [[\"nz-tree-node-checkbox\", \"builtin\", \"\"]],\n  hostVars: 16,\n  hostBindings: function NzTreeNodeBuiltinCheckboxComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-select-tree-checkbox\", ctx.nzSelectMode)(\"ant-select-tree-checkbox-checked\", ctx.nzSelectMode && ctx.isChecked)(\"ant-select-tree-checkbox-indeterminate\", ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-select-tree-checkbox-disabled\", ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox))(\"ant-tree-checkbox\", !ctx.nzSelectMode)(\"ant-tree-checkbox-checked\", !ctx.nzSelectMode && ctx.isChecked)(\"ant-tree-checkbox-indeterminate\", !ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-tree-checkbox-disabled\", !ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox));\n    }\n  },\n  inputs: {\n    nzSelectMode: \"nzSelectMode\",\n    isChecked: \"isChecked\",\n    isHalfChecked: \"isHalfChecked\",\n    isDisabled: \"isDisabled\",\n    isDisableCheckbox: \"isDisableCheckbox\"\n  },\n  attrs: _c0,\n  decls: 1,\n  vars: 4,\n  template: function NzTreeNodeBuiltinCheckboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"span\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-tree-checkbox-inner\", !ctx.nzSelectMode)(\"ant-select-tree-checkbox-inner\", ctx.nzSelectMode);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeBuiltinCheckboxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-checkbox[builtin]',\n      template: \"\\n    <span [class.ant-tree-checkbox-inner]=\\\"!nzSelectMode\\\" [class.ant-select-tree-checkbox-inner]=\\\"nzSelectMode\\\"></span>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-select-tree-checkbox]': \"nzSelectMode\",\n        '[class.ant-select-tree-checkbox-checked]': \"nzSelectMode && isChecked\",\n        '[class.ant-select-tree-checkbox-indeterminate]': \"nzSelectMode && isHalfChecked\",\n        '[class.ant-select-tree-checkbox-disabled]': \"nzSelectMode && (isDisabled || isDisableCheckbox)\",\n        '[class.ant-tree-checkbox]': \"!nzSelectMode\",\n        '[class.ant-tree-checkbox-checked]': \"!nzSelectMode && isChecked\",\n        '[class.ant-tree-checkbox-indeterminate]': \"!nzSelectMode && isHalfChecked\",\n        '[class.ant-tree-checkbox-disabled]': \"!nzSelectMode && (isDisabled || isDisableCheckbox)\"\n      }\n    }]\n  }], null, {\n    nzSelectMode: [{\n      type: Input\n    }],\n    isChecked: [{\n      type: Input\n    }],\n    isHalfChecked: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    isDisableCheckbox: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeNodeSwitcherComponent = /*#__PURE__*/function () {\n  function NzTreeNodeSwitcherComponent() {\n    _classCallCheck(this, NzTreeNodeSwitcherComponent);\n\n    this.nzSelectMode = false;\n  }\n\n  _createClass(NzTreeNodeSwitcherComponent, [{\n    key: \"isShowLineIcon\",\n    get: function get() {\n      return !this.isLeaf && !!this.nzShowLine;\n    }\n  }, {\n    key: \"isShowSwitchIcon\",\n    get: function get() {\n      return !this.isLeaf && !this.nzShowLine;\n    }\n  }, {\n    key: \"isSwitcherOpen\",\n    get: function get() {\n      return !!this.isExpanded && !this.isLeaf;\n    }\n  }, {\n    key: \"isSwitcherClose\",\n    get: function get() {\n      return !this.isExpanded && !this.isLeaf;\n    }\n  }]);\n\n  return NzTreeNodeSwitcherComponent;\n}();\n\nNzTreeNodeSwitcherComponent.ɵfac = function NzTreeNodeSwitcherComponent_Factory(t) {\n  return new (t || NzTreeNodeSwitcherComponent)();\n};\n\nNzTreeNodeSwitcherComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeSwitcherComponent,\n  selectors: [[\"nz-tree-node-switcher\"]],\n  hostVars: 16,\n  hostBindings: function NzTreeNodeSwitcherComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-select-tree-switcher\", ctx.nzSelectMode)(\"ant-select-tree-switcher-noop\", ctx.nzSelectMode && ctx.isLeaf)(\"ant-select-tree-switcher_open\", ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-select-tree-switcher_close\", ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-tree-switcher\", !ctx.nzSelectMode)(\"ant-tree-switcher-noop\", !ctx.nzSelectMode && ctx.isLeaf)(\"ant-tree-switcher_open\", !ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-tree-switcher_close\", !ctx.nzSelectMode && ctx.isSwitcherClose);\n    }\n  },\n  inputs: {\n    nzShowExpand: \"nzShowExpand\",\n    nzShowLine: \"nzShowLine\",\n    nzExpandedIcon: \"nzExpandedIcon\",\n    nzSelectMode: \"nzSelectMode\",\n    context: \"context\",\n    isLeaf: \"isLeaf\",\n    isLoading: \"isLoading\",\n    isExpanded: \"isExpanded\"\n  },\n  decls: 4,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"loadingTemplate\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"nz-icon\", \"\", \"nzType\", \"caret-down\"], [\"nz-icon\", \"\", \"class\", \"ant-tree-switcher-line-icon\", 3, \"nzType\", 4, \"ngIf\"], [\"nz-icon\", \"\", \"nzType\", \"file\", \"class\", \"ant-tree-switcher-line-icon\", 4, \"ngIf\"], [\"nz-icon\", \"\", 1, \"ant-tree-switcher-line-icon\", 3, \"nzType\"], [\"nz-icon\", \"\", \"nzType\", \"file\", 1, \"ant-tree-switcher-line-icon\"], [\"nz-icon\", \"\", \"nzType\", \"loading\", 1, \"ant-tree-switcher-loading-icon\", 3, \"nzSpin\"]],\n  template: function NzTreeNodeSwitcherComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NzTreeNodeSwitcherComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_Template, 2, 2, \"ng-container\", 0);\n      i0.ɵɵtemplate(2, NzTreeNodeSwitcherComponent_ng_template_2_Template, 1, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isShowSwitchIcon);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.nzShowLine);\n    }\n  },\n  directives: [i7.NgIf, i2.NzStringTemplateOutletDirective, i3.NzIconDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeSwitcherComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-switcher',\n      template: \"\\n    <ng-container *ngIf=\\\"isShowSwitchIcon\\\">\\n      <ng-container *ngIf=\\\"!isLoading; else loadingTemplate\\\">\\n        <ng-container *nzStringTemplateOutlet=\\\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\\\">\\n          <i\\n            nz-icon\\n            nzType=\\\"caret-down\\\"\\n            [class.ant-select-tree-switcher-icon]=\\\"nzSelectMode\\\"\\n            [class.ant-tree-switcher-icon]=\\\"!nzSelectMode\\\"\\n          ></i>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"nzShowLine\\\">\\n      <ng-container *ngIf=\\\"!isLoading; else loadingTemplate\\\">\\n        <ng-container *nzStringTemplateOutlet=\\\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\\\">\\n          <i\\n            *ngIf=\\\"isShowLineIcon\\\"\\n            nz-icon\\n            [nzType]=\\\"isSwitcherOpen ? 'minus-square' : 'plus-square'\\\"\\n            class=\\\"ant-tree-switcher-line-icon\\\"\\n          ></i>\\n          <i *ngIf=\\\"!isShowLineIcon\\\" nz-icon nzType=\\\"file\\\" class=\\\"ant-tree-switcher-line-icon\\\"></i>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n    <ng-template #loadingTemplate>\\n      <i nz-icon nzType=\\\"loading\\\" [nzSpin]=\\\"true\\\" class=\\\"ant-tree-switcher-loading-icon\\\"></i>\\n    </ng-template>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-select-tree-switcher]': 'nzSelectMode',\n        '[class.ant-select-tree-switcher-noop]': 'nzSelectMode && isLeaf',\n        '[class.ant-select-tree-switcher_open]': 'nzSelectMode && isSwitcherOpen',\n        '[class.ant-select-tree-switcher_close]': 'nzSelectMode && isSwitcherClose',\n        '[class.ant-tree-switcher]': '!nzSelectMode',\n        '[class.ant-tree-switcher-noop]': '!nzSelectMode && isLeaf',\n        '[class.ant-tree-switcher_open]': '!nzSelectMode && isSwitcherOpen',\n        '[class.ant-tree-switcher_close]': '!nzSelectMode && isSwitcherClose'\n      }\n    }]\n  }], null, {\n    nzShowExpand: [{\n      type: Input\n    }],\n    nzShowLine: [{\n      type: Input\n    }],\n    nzExpandedIcon: [{\n      type: Input\n    }],\n    nzSelectMode: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    isLeaf: [{\n      type: Input\n    }],\n    isLoading: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeNodeTitleComponent = /*#__PURE__*/function () {\n  function NzTreeNodeTitleComponent(cdr) {\n    _classCallCheck(this, NzTreeNodeTitleComponent);\n\n    this.cdr = cdr;\n    this.treeTemplate = null;\n    this.selectMode = false; // Drag indicator\n\n    this.showIndicator = true;\n  }\n\n  _createClass(NzTreeNodeTitleComponent, [{\n    key: \"canDraggable\",\n    get: function get() {\n      return this.draggable && !this.isDisabled ? true : null;\n    }\n  }, {\n    key: \"matchedValue\",\n    get: function get() {\n      return this.isMatched ? this.searchValue : '';\n    }\n  }, {\n    key: \"isSwitcherOpen\",\n    get: function get() {\n      return this.isExpanded && !this.isLeaf;\n    }\n  }, {\n    key: \"isSwitcherClose\",\n    get: function get() {\n      return !this.isExpanded && !this.isLeaf;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var showIndicator = changes.showIndicator,\n          dragPosition = changes.dragPosition;\n\n      if (showIndicator || dragPosition) {\n        this.cdr.markForCheck();\n      }\n    }\n  }]);\n\n  return NzTreeNodeTitleComponent;\n}();\n\nNzTreeNodeTitleComponent.ɵfac = function NzTreeNodeTitleComponent_Factory(t) {\n  return new (t || NzTreeNodeTitleComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nNzTreeNodeTitleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeTitleComponent,\n  selectors: [[\"nz-tree-node-title\"]],\n  hostVars: 21,\n  hostBindings: function NzTreeNodeTitleComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"title\", ctx.title)(\"draggable\", ctx.canDraggable)(\"aria-grabbed\", ctx.canDraggable);\n      i0.ɵɵclassProp(\"draggable\", ctx.canDraggable)(\"ant-select-tree-node-content-wrapper\", ctx.selectMode)(\"ant-select-tree-node-content-wrapper-open\", ctx.selectMode && ctx.isSwitcherOpen)(\"ant-select-tree-node-content-wrapper-close\", ctx.selectMode && ctx.isSwitcherClose)(\"ant-select-tree-node-selected\", ctx.selectMode && ctx.isSelected)(\"ant-tree-node-content-wrapper\", !ctx.selectMode)(\"ant-tree-node-content-wrapper-open\", !ctx.selectMode && ctx.isSwitcherOpen)(\"ant-tree-node-content-wrapper-close\", !ctx.selectMode && ctx.isSwitcherClose)(\"ant-tree-node-selected\", !ctx.selectMode && ctx.isSelected);\n    }\n  },\n  inputs: {\n    searchValue: \"searchValue\",\n    treeTemplate: \"treeTemplate\",\n    draggable: \"draggable\",\n    showIcon: \"showIcon\",\n    selectMode: \"selectMode\",\n    context: \"context\",\n    icon: \"icon\",\n    title: \"title\",\n    isLoading: \"isLoading\",\n    isSelected: \"isSelected\",\n    isDisabled: \"isDisabled\",\n    isMatched: \"isMatched\",\n    isExpanded: \"isExpanded\",\n    isLeaf: \"isLeaf\",\n    showIndicator: \"showIndicator\",\n    dragPosition: \"dragPosition\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [3, \"ant-tree-icon__open\", \"ant-tree-icon__close\", \"ant-tree-icon_loading\", \"ant-select-tree-iconEle\", \"ant-tree-iconEle\", 4, \"ngIf\"], [1, \"ant-tree-title\", 3, \"innerHTML\"], [3, \"dropPosition\", \"level\", 4, \"ngIf\"], [\"nz-icon\", \"\", 3, \"nzType\", 4, \"ngIf\"], [\"nz-icon\", \"\", 3, \"nzType\"], [3, \"dropPosition\", \"level\"]],\n  template: function NzTreeNodeTitleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NzTreeNodeTitleComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      i0.ɵɵtemplate(1, NzTreeNodeTitleComponent_ng_container_1_Template, 5, 8, \"ng-container\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.treeTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(3, _c1, ctx.context, ctx.context.origin));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.treeTemplate);\n    }\n  },\n  directives: [NzTreeDropIndicatorComponent, i7.NgTemplateOutlet, i7.NgIf, i3.NzIconDirective],\n  pipes: [i4.NzHighlightPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeTitleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-title',\n      template: \"\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"treeTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{ $implicit: context, origin: context.origin }\\\"\\n    ></ng-template>\\n    <ng-container *ngIf=\\\"!treeTemplate\\\">\\n      <span\\n        *ngIf=\\\"icon && showIcon\\\"\\n        [class.ant-tree-icon__open]=\\\"isSwitcherOpen\\\"\\n        [class.ant-tree-icon__close]=\\\"isSwitcherClose\\\"\\n        [class.ant-tree-icon_loading]=\\\"isLoading\\\"\\n        [class.ant-select-tree-iconEle]=\\\"selectMode\\\"\\n        [class.ant-tree-iconEle]=\\\"!selectMode\\\"\\n      >\\n        <span\\n          [class.ant-select-tree-iconEle]=\\\"selectMode\\\"\\n          [class.ant-select-tree-icon__customize]=\\\"selectMode\\\"\\n          [class.ant-tree-iconEle]=\\\"!selectMode\\\"\\n          [class.ant-tree-icon__customize]=\\\"!selectMode\\\"\\n        >\\n          <i nz-icon *ngIf=\\\"icon\\\" [nzType]=\\\"icon\\\"></i>\\n        </span>\\n      </span>\\n      <span class=\\\"ant-tree-title\\\" [innerHTML]=\\\"title | nzHighlight: matchedValue:'i':'font-highlight'\\\"></span>\\n      <nz-tree-drop-indicator\\n        *ngIf=\\\"showIndicator\\\"\\n        [dropPosition]=\\\"dragPosition\\\"\\n        [level]=\\\"context.level\\\"\\n      ></nz-tree-drop-indicator>\\n    </ng-container>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[attr.title]': 'title',\n        '[attr.draggable]': 'canDraggable',\n        '[attr.aria-grabbed]': 'canDraggable',\n        '[class.draggable]': 'canDraggable',\n        '[class.ant-select-tree-node-content-wrapper]': \"selectMode\",\n        '[class.ant-select-tree-node-content-wrapper-open]': \"selectMode && isSwitcherOpen\",\n        '[class.ant-select-tree-node-content-wrapper-close]': \"selectMode && isSwitcherClose\",\n        '[class.ant-select-tree-node-selected]': \"selectMode && isSelected\",\n        '[class.ant-tree-node-content-wrapper]': \"!selectMode\",\n        '[class.ant-tree-node-content-wrapper-open]': \"!selectMode && isSwitcherOpen\",\n        '[class.ant-tree-node-content-wrapper-close]': \"!selectMode && isSwitcherClose\",\n        '[class.ant-tree-node-selected]': \"!selectMode && isSelected\"\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    searchValue: [{\n      type: Input\n    }],\n    treeTemplate: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input\n    }],\n    showIcon: [{\n      type: Input\n    }],\n    selectMode: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    isLoading: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    isMatched: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }],\n    isLeaf: [{\n      type: Input\n    }],\n    showIndicator: [{\n      type: Input\n    }],\n    dragPosition: [{\n      type: Input\n    }]\n  });\n})();\n\nvar NzTreeNodeBuiltinComponent = /*#__PURE__*/function () {\n  function NzTreeNodeBuiltinComponent(nzTreeService, ngZone, renderer, elementRef, cdr, noAnimation) {\n    _classCallCheck(this, NzTreeNodeBuiltinComponent);\n\n    this.nzTreeService = nzTreeService;\n    this.ngZone = ngZone;\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.cdr = cdr;\n    this.noAnimation = noAnimation;\n    /**\n     * for global property\n     */\n\n    this.icon = '';\n    this.title = '';\n    this.isLoading = false;\n    this.isSelected = false;\n    this.isDisabled = false;\n    this.isMatched = false;\n    this.isStart = [];\n    this.isEnd = [];\n    this.nzHideUnMatched = false;\n    this.nzNoAnimation = false;\n    this.nzSelectMode = false;\n    this.nzShowIcon = false;\n    this.nzTreeTemplate = null;\n    this.nzSearchValue = '';\n    this.nzDraggable = false;\n    this.nzClick = new EventEmitter();\n    this.nzDblClick = new EventEmitter();\n    this.nzContextMenu = new EventEmitter();\n    this.nzCheckBoxChange = new EventEmitter();\n    this.nzExpandChange = new EventEmitter();\n    this.nzOnDragStart = new EventEmitter();\n    this.nzOnDragEnter = new EventEmitter();\n    this.nzOnDragOver = new EventEmitter();\n    this.nzOnDragLeave = new EventEmitter();\n    this.nzOnDrop = new EventEmitter();\n    this.nzOnDragEnd = new EventEmitter();\n    /**\n     * drag var\n     */\n\n    this.destroy$ = new Subject();\n    this.dragPos = 2;\n    this.dragPosClass = {\n      0: 'drag-over',\n      1: 'drag-over-gap-bottom',\n      '-1': 'drag-over-gap-top'\n    };\n    this.draggingKey = null;\n    this.showIndicator = false;\n  }\n  /**\n   * default set\n   */\n\n\n  _createClass(NzTreeNodeBuiltinComponent, [{\n    key: \"displayStyle\",\n    get: function get() {\n      // to hide unmatched nodes\n      return this.nzSearchValue && this.nzHideUnMatched && !this.isMatched && !this.isExpanded && this.canHide ? 'none' : '';\n    }\n  }, {\n    key: \"isSwitcherOpen\",\n    get: function get() {\n      return this.isExpanded && !this.isLeaf;\n    }\n  }, {\n    key: \"isSwitcherClose\",\n    get: function get() {\n      return !this.isExpanded && !this.isLeaf;\n    }\n    /**\n     * collapse node\n     *\n     * @param event\n     */\n\n  }, {\n    key: \"clickExpand\",\n    value: function clickExpand(event) {\n      event.preventDefault();\n\n      if (!this.isLoading && !this.isLeaf) {\n        // set async state\n        if (this.nzAsyncData && this.nzTreeNode.children.length === 0 && !this.isExpanded) {\n          this.nzTreeNode.isLoading = true;\n        }\n\n        this.nzTreeNode.setExpanded(!this.isExpanded);\n      }\n\n      this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n      var eventNext = this.nzTreeService.formatEvent('expand', this.nzTreeNode, event);\n      this.nzExpandChange.emit(eventNext);\n    }\n  }, {\n    key: \"clickSelect\",\n    value: function clickSelect(event) {\n      event.preventDefault();\n\n      if (this.isSelectable && !this.isDisabled) {\n        this.nzTreeNode.isSelected = !this.nzTreeNode.isSelected;\n      }\n\n      this.nzTreeService.setSelectedNodeList(this.nzTreeNode);\n      var eventNext = this.nzTreeService.formatEvent('click', this.nzTreeNode, event);\n      this.nzClick.emit(eventNext);\n    }\n  }, {\n    key: \"dblClick\",\n    value: function dblClick(event) {\n      event.preventDefault();\n      var eventNext = this.nzTreeService.formatEvent('dblclick', this.nzTreeNode, event);\n      this.nzDblClick.emit(eventNext);\n    }\n  }, {\n    key: \"contextMenu\",\n    value: function contextMenu(event) {\n      event.preventDefault();\n      var eventNext = this.nzTreeService.formatEvent('contextmenu', this.nzTreeNode, event);\n      this.nzContextMenu.emit(eventNext);\n    }\n    /**\n     * check node\n     *\n     * @param event\n     */\n\n  }, {\n    key: \"clickCheckBox\",\n    value: function clickCheckBox(event) {\n      event.preventDefault(); // return if node is disabled\n\n      if (this.isDisabled || this.isDisableCheckbox) {\n        return;\n      }\n\n      this.nzTreeNode.isChecked = !this.nzTreeNode.isChecked;\n      this.nzTreeNode.isHalfChecked = false;\n      this.nzTreeService.setCheckedNodeList(this.nzTreeNode);\n      var eventNext = this.nzTreeService.formatEvent('check', this.nzTreeNode, event);\n      this.nzCheckBoxChange.emit(eventNext);\n    }\n  }, {\n    key: \"clearDragClass\",\n    value: function clearDragClass() {\n      var _this = this;\n\n      var dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over', 'drop-target'];\n      dragClass.forEach(function (e) {\n        _this.renderer.removeClass(_this.elementRef.nativeElement, e);\n      });\n    }\n    /**\n     * drag event\n     *\n     * @param e\n     */\n\n  }, {\n    key: \"handleDragStart\",\n    value: function handleDragStart(e) {\n      try {\n        // ie throw error\n        // firefox-need-it\n        e.dataTransfer.setData('text/plain', this.nzTreeNode.key);\n      } catch (error) {// empty\n      }\n\n      this.nzTreeService.setSelectedNode(this.nzTreeNode);\n      this.draggingKey = this.nzTreeNode.key;\n      var eventNext = this.nzTreeService.formatEvent('dragstart', this.nzTreeNode, e);\n      this.nzOnDragStart.emit(eventNext);\n    }\n  }, {\n    key: \"handleDragEnter\",\n    value: function handleDragEnter(e) {\n      var _this2 = this;\n\n      var _a;\n\n      e.preventDefault(); // reset position\n\n      this.showIndicator = this.nzTreeNode.key !== ((_a = this.nzTreeService.getSelectedNode()) === null || _a === void 0 ? void 0 : _a.key);\n      this.renderIndicator(2);\n      this.ngZone.run(function () {\n        var eventNext = _this2.nzTreeService.formatEvent('dragenter', _this2.nzTreeNode, e);\n\n        _this2.nzOnDragEnter.emit(eventNext);\n      });\n    }\n  }, {\n    key: \"handleDragOver\",\n    value: function handleDragOver(e) {\n      e.preventDefault();\n      var dropPosition = this.nzTreeService.calcDropPosition(e);\n\n      if (this.dragPos !== dropPosition) {\n        this.clearDragClass();\n        this.renderIndicator(dropPosition); // leaf node will pass\n\n        if (!(this.dragPos === 0 && this.isLeaf)) {\n          this.renderer.addClass(this.elementRef.nativeElement, this.dragPosClass[this.dragPos]);\n          this.renderer.addClass(this.elementRef.nativeElement, 'drop-target');\n        }\n      }\n\n      var eventNext = this.nzTreeService.formatEvent('dragover', this.nzTreeNode, e);\n      this.nzOnDragOver.emit(eventNext);\n    }\n  }, {\n    key: \"handleDragLeave\",\n    value: function handleDragLeave(e) {\n      e.preventDefault();\n      this.renderIndicator(2);\n      this.clearDragClass();\n      var eventNext = this.nzTreeService.formatEvent('dragleave', this.nzTreeNode, e);\n      this.nzOnDragLeave.emit(eventNext);\n    }\n  }, {\n    key: \"handleDragDrop\",\n    value: function handleDragDrop(e) {\n      var _this3 = this;\n\n      e.preventDefault();\n      e.stopPropagation();\n      this.ngZone.run(function () {\n        _this3.showIndicator = false;\n\n        _this3.clearDragClass();\n\n        var node = _this3.nzTreeService.getSelectedNode();\n\n        if (!node || node && node.key === _this3.nzTreeNode.key || _this3.dragPos === 0 && _this3.isLeaf) {\n          return;\n        } // pass if node is leafNo\n\n\n        var dropEvent = _this3.nzTreeService.formatEvent('drop', _this3.nzTreeNode, e);\n\n        var dragEndEvent = _this3.nzTreeService.formatEvent('dragend', _this3.nzTreeNode, e);\n\n        if (_this3.nzBeforeDrop) {\n          _this3.nzBeforeDrop({\n            dragNode: _this3.nzTreeService.getSelectedNode(),\n            node: _this3.nzTreeNode,\n            pos: _this3.dragPos\n          }).subscribe(function (canDrop) {\n            if (canDrop) {\n              _this3.nzTreeService.dropAndApply(_this3.nzTreeNode, _this3.dragPos);\n            }\n\n            _this3.nzOnDrop.emit(dropEvent);\n\n            _this3.nzOnDragEnd.emit(dragEndEvent);\n          });\n        } else if (_this3.nzTreeNode) {\n          _this3.nzTreeService.dropAndApply(_this3.nzTreeNode, _this3.dragPos);\n\n          _this3.nzOnDrop.emit(dropEvent);\n        }\n      });\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd(e) {\n      var _this4 = this;\n\n      e.preventDefault();\n      this.ngZone.run(function () {\n        // if user do not custom beforeDrop\n        if (!_this4.nzBeforeDrop) {\n          // clear dragging state\n          _this4.draggingKey = null;\n\n          var eventNext = _this4.nzTreeService.formatEvent('dragend', _this4.nzTreeNode, e);\n\n          _this4.nzOnDragEnd.emit(eventNext);\n        }\n      });\n    }\n    /**\n     * Listening to dragging events.\n     */\n\n  }, {\n    key: \"handDragEvent\",\n    value: function handDragEvent() {\n      var _this5 = this;\n\n      this.ngZone.runOutsideAngular(function () {\n        if (_this5.nzDraggable) {\n          var nativeElement = _this5.elementRef.nativeElement;\n          _this5.destroy$ = new Subject();\n          fromEvent(nativeElement, 'dragstart').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragStart(e);\n          });\n          fromEvent(nativeElement, 'dragenter').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragEnter(e);\n          });\n          fromEvent(nativeElement, 'dragover').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragOver(e);\n          });\n          fromEvent(nativeElement, 'dragleave').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragLeave(e);\n          });\n          fromEvent(nativeElement, 'drop').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragDrop(e);\n          });\n          fromEvent(nativeElement, 'dragend').pipe(takeUntil(_this5.destroy$)).subscribe(function (e) {\n            return _this5.handleDragEnd(e);\n          });\n        } else {\n          _this5.destroy$.next();\n\n          _this5.destroy$.complete();\n        }\n      });\n    }\n  }, {\n    key: \"markForCheck\",\n    value: function markForCheck() {\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this6 = this;\n\n      this.nzTreeNode.component = this;\n      this.ngZone.runOutsideAngular(function () {\n        fromEvent(_this6.elementRef.nativeElement, 'mousedown').pipe(takeUntil(_this6.destroy$)).subscribe(function (event) {\n          if (_this6.nzSelectMode) {\n            event.preventDefault();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzDraggable = changes.nzDraggable;\n\n      if (nzDraggable) {\n        this.handDragEvent();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }, {\n    key: \"renderIndicator\",\n    value: function renderIndicator(dropPosition) {\n      var _this7 = this;\n\n      this.ngZone.run(function () {\n        var _a;\n\n        _this7.showIndicator = dropPosition !== 2;\n\n        if (_this7.nzTreeNode.key === ((_a = _this7.nzTreeService.getSelectedNode()) === null || _a === void 0 ? void 0 : _a.key) || dropPosition === 0 && _this7.isLeaf) {\n          return;\n        }\n\n        _this7.dragPos = dropPosition;\n\n        _this7.cdr.markForCheck();\n      });\n    }\n  }]);\n\n  return NzTreeNodeBuiltinComponent;\n}();\n\nNzTreeNodeBuiltinComponent.ɵfac = function NzTreeNodeBuiltinComponent_Factory(t) {\n  return new (t || NzTreeNodeBuiltinComponent)(i0.ɵɵdirectiveInject(i1.NzTreeBaseService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4$1.NzNoAnimationDirective, 9));\n};\n\nNzTreeNodeBuiltinComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeBuiltinComponent,\n  selectors: [[\"nz-tree-node\", \"builtin\", \"\"]],\n  hostVars: 36,\n  hostBindings: function NzTreeNodeBuiltinComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      i0.ɵɵclassProp(\"ant-select-tree-treenode\", ctx.nzSelectMode)(\"ant-select-tree-treenode-disabled\", ctx.nzSelectMode && ctx.isDisabled)(\"ant-select-tree-treenode-switcher-open\", ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-select-tree-treenode-switcher-close\", ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-select-tree-treenode-checkbox-checked\", ctx.nzSelectMode && ctx.isChecked)(\"ant-select-tree-treenode-checkbox-indeterminate\", ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-select-tree-treenode-selected\", ctx.nzSelectMode && ctx.isSelected)(\"ant-select-tree-treenode-loading\", ctx.nzSelectMode && ctx.isLoading)(\"ant-tree-treenode\", !ctx.nzSelectMode)(\"ant-tree-treenode-disabled\", !ctx.nzSelectMode && ctx.isDisabled)(\"ant-tree-treenode-switcher-open\", !ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-tree-treenode-switcher-close\", !ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-tree-treenode-checkbox-checked\", !ctx.nzSelectMode && ctx.isChecked)(\"ant-tree-treenode-checkbox-indeterminate\", !ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-tree-treenode-selected\", !ctx.nzSelectMode && ctx.isSelected)(\"ant-tree-treenode-loading\", !ctx.nzSelectMode && ctx.isLoading)(\"dragging\", ctx.draggingKey === ctx.nzTreeNode.key);\n    }\n  },\n  inputs: {\n    icon: \"icon\",\n    title: \"title\",\n    isLoading: \"isLoading\",\n    isSelected: \"isSelected\",\n    isDisabled: \"isDisabled\",\n    isMatched: \"isMatched\",\n    isExpanded: \"isExpanded\",\n    isLeaf: \"isLeaf\",\n    isChecked: \"isChecked\",\n    isHalfChecked: \"isHalfChecked\",\n    isDisableCheckbox: \"isDisableCheckbox\",\n    isSelectable: \"isSelectable\",\n    canHide: \"canHide\",\n    isStart: \"isStart\",\n    isEnd: \"isEnd\",\n    nzTreeNode: \"nzTreeNode\",\n    nzShowLine: \"nzShowLine\",\n    nzShowExpand: \"nzShowExpand\",\n    nzCheckable: \"nzCheckable\",\n    nzAsyncData: \"nzAsyncData\",\n    nzHideUnMatched: \"nzHideUnMatched\",\n    nzNoAnimation: \"nzNoAnimation\",\n    nzSelectMode: \"nzSelectMode\",\n    nzShowIcon: \"nzShowIcon\",\n    nzExpandedIcon: \"nzExpandedIcon\",\n    nzTreeTemplate: \"nzTreeTemplate\",\n    nzBeforeDrop: \"nzBeforeDrop\",\n    nzSearchValue: \"nzSearchValue\",\n    nzDraggable: \"nzDraggable\"\n  },\n  outputs: {\n    nzClick: \"nzClick\",\n    nzDblClick: \"nzDblClick\",\n    nzContextMenu: \"nzContextMenu\",\n    nzCheckBoxChange: \"nzCheckBoxChange\",\n    nzExpandChange: \"nzExpandChange\",\n    nzOnDragStart: \"nzOnDragStart\",\n    nzOnDragEnter: \"nzOnDragEnter\",\n    nzOnDragOver: \"nzOnDragOver\",\n    nzOnDragLeave: \"nzOnDragLeave\",\n    nzOnDrop: \"nzOnDrop\",\n    nzOnDragEnd: \"nzOnDragEnd\"\n  },\n  exportAs: [\"nzTreeBuiltinNode\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c0,\n  decls: 4,\n  vars: 22,\n  consts: [[3, \"nzTreeLevel\", \"nzSelectMode\", \"nzIsStart\", \"nzIsEnd\"], [3, \"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isExpanded\", \"isLoading\", \"click\", 4, \"ngIf\"], [\"builtin\", \"\", 3, \"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\", \"click\", 4, \"ngIf\"], [3, \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"searchValue\", \"treeTemplate\", \"draggable\", \"showIcon\", \"selectMode\", \"context\", \"showIndicator\", \"dragPosition\", \"dblclick\", \"click\", \"contextmenu\"], [3, \"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isExpanded\", \"isLoading\", \"click\"], [\"builtin\", \"\", 3, \"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\", \"click\"]],\n  template: function NzTreeNodeBuiltinComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"nz-tree-indent\", 0);\n      i0.ɵɵtemplate(1, NzTreeNodeBuiltinComponent_nz_tree_node_switcher_1_Template, 1, 8, \"nz-tree-node-switcher\", 1);\n      i0.ɵɵtemplate(2, NzTreeNodeBuiltinComponent_nz_tree_node_checkbox_2_Template, 1, 5, \"nz-tree-node-checkbox\", 2);\n      i0.ɵɵelementStart(3, \"nz-tree-node-title\", 3);\n      i0.ɵɵlistener(\"dblclick\", function NzTreeNodeBuiltinComponent_Template_nz_tree_node_title_dblclick_3_listener($event) {\n        return ctx.dblClick($event);\n      })(\"click\", function NzTreeNodeBuiltinComponent_Template_nz_tree_node_title_click_3_listener($event) {\n        return ctx.clickSelect($event);\n      })(\"contextmenu\", function NzTreeNodeBuiltinComponent_Template_nz_tree_node_title_contextmenu_3_listener($event) {\n        return ctx.contextMenu($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"nzTreeLevel\", ctx.nzTreeNode.level)(\"nzSelectMode\", ctx.nzSelectMode)(\"nzIsStart\", ctx.isStart)(\"nzIsEnd\", ctx.isEnd);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.nzShowExpand);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.nzCheckable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"icon\", ctx.icon)(\"title\", ctx.title)(\"isLoading\", ctx.isLoading)(\"isSelected\", ctx.isSelected)(\"isDisabled\", ctx.isDisabled)(\"isMatched\", ctx.isMatched)(\"isExpanded\", ctx.isExpanded)(\"isLeaf\", ctx.isLeaf)(\"searchValue\", ctx.nzSearchValue)(\"treeTemplate\", ctx.nzTreeTemplate)(\"draggable\", ctx.nzDraggable)(\"showIcon\", ctx.nzShowIcon)(\"selectMode\", ctx.nzSelectMode)(\"context\", ctx.nzTreeNode)(\"showIndicator\", ctx.showIndicator)(\"dragPosition\", ctx.dragPos);\n    }\n  },\n  directives: [NzTreeIndentComponent, NzTreeNodeSwitcherComponent, NzTreeNodeBuiltinCheckboxComponent, NzTreeNodeTitleComponent, i7.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzShowLine\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzShowExpand\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzCheckable\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzAsyncData\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzHideUnMatched\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzNoAnimation\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzSelectMode\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzShowIcon\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeBuiltinComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node[builtin]',\n      exportAs: 'nzTreeBuiltinNode',\n      template: \"\\n    <nz-tree-indent\\n      [nzTreeLevel]=\\\"nzTreeNode.level\\\"\\n      [nzSelectMode]=\\\"nzSelectMode\\\"\\n      [nzIsStart]=\\\"isStart\\\"\\n      [nzIsEnd]=\\\"isEnd\\\"\\n    ></nz-tree-indent>\\n    <nz-tree-node-switcher\\n      *ngIf=\\\"nzShowExpand\\\"\\n      [nzShowExpand]=\\\"nzShowExpand\\\"\\n      [nzShowLine]=\\\"nzShowLine\\\"\\n      [nzExpandedIcon]=\\\"nzExpandedIcon\\\"\\n      [nzSelectMode]=\\\"nzSelectMode\\\"\\n      [context]=\\\"nzTreeNode\\\"\\n      [isLeaf]=\\\"isLeaf\\\"\\n      [isExpanded]=\\\"isExpanded\\\"\\n      [isLoading]=\\\"isLoading\\\"\\n      (click)=\\\"clickExpand($event)\\\"\\n    ></nz-tree-node-switcher>\\n    <nz-tree-node-checkbox\\n      builtin\\n      *ngIf=\\\"nzCheckable\\\"\\n      (click)=\\\"clickCheckBox($event)\\\"\\n      [nzSelectMode]=\\\"nzSelectMode\\\"\\n      [isChecked]=\\\"isChecked\\\"\\n      [isHalfChecked]=\\\"isHalfChecked\\\"\\n      [isDisabled]=\\\"isDisabled\\\"\\n      [isDisableCheckbox]=\\\"isDisableCheckbox\\\"\\n    ></nz-tree-node-checkbox>\\n    <nz-tree-node-title\\n      [icon]=\\\"icon\\\"\\n      [title]=\\\"title\\\"\\n      [isLoading]=\\\"isLoading\\\"\\n      [isSelected]=\\\"isSelected\\\"\\n      [isDisabled]=\\\"isDisabled\\\"\\n      [isMatched]=\\\"isMatched\\\"\\n      [isExpanded]=\\\"isExpanded\\\"\\n      [isLeaf]=\\\"isLeaf\\\"\\n      [searchValue]=\\\"nzSearchValue\\\"\\n      [treeTemplate]=\\\"nzTreeTemplate\\\"\\n      [draggable]=\\\"nzDraggable\\\"\\n      [showIcon]=\\\"nzShowIcon\\\"\\n      [selectMode]=\\\"nzSelectMode\\\"\\n      [context]=\\\"nzTreeNode\\\"\\n      [showIndicator]=\\\"showIndicator\\\"\\n      [dragPosition]=\\\"dragPos\\\"\\n      (dblclick)=\\\"dblClick($event)\\\"\\n      (click)=\\\"clickSelect($event)\\\"\\n      (contextmenu)=\\\"contextMenu($event)\\\"\\n    ></nz-tree-node-title>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-select-tree-treenode]': \"nzSelectMode\",\n        '[class.ant-select-tree-treenode-disabled]': \"nzSelectMode && isDisabled\",\n        '[class.ant-select-tree-treenode-switcher-open]': \"nzSelectMode && isSwitcherOpen\",\n        '[class.ant-select-tree-treenode-switcher-close]': \"nzSelectMode && isSwitcherClose\",\n        '[class.ant-select-tree-treenode-checkbox-checked]': \"nzSelectMode && isChecked\",\n        '[class.ant-select-tree-treenode-checkbox-indeterminate]': \"nzSelectMode && isHalfChecked\",\n        '[class.ant-select-tree-treenode-selected]': \"nzSelectMode && isSelected\",\n        '[class.ant-select-tree-treenode-loading]': \"nzSelectMode && isLoading\",\n        '[class.ant-tree-treenode]': \"!nzSelectMode\",\n        '[class.ant-tree-treenode-disabled]': \"!nzSelectMode && isDisabled\",\n        '[class.ant-tree-treenode-switcher-open]': \"!nzSelectMode && isSwitcherOpen\",\n        '[class.ant-tree-treenode-switcher-close]': \"!nzSelectMode && isSwitcherClose\",\n        '[class.ant-tree-treenode-checkbox-checked]': \"!nzSelectMode && isChecked\",\n        '[class.ant-tree-treenode-checkbox-indeterminate]': \"!nzSelectMode && isHalfChecked\",\n        '[class.ant-tree-treenode-selected]': \"!nzSelectMode && isSelected\",\n        '[class.ant-tree-treenode-loading]': \"!nzSelectMode && isLoading\",\n        '[class.dragging]': \"draggingKey === nzTreeNode.key\",\n        '[style.display]': 'displayStyle'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1.NzTreeBaseService\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i4$1.NzNoAnimationDirective,\n      decorators: [{\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    icon: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    isLoading: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    isMatched: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }],\n    isLeaf: [{\n      type: Input\n    }],\n    isChecked: [{\n      type: Input\n    }],\n    isHalfChecked: [{\n      type: Input\n    }],\n    isDisableCheckbox: [{\n      type: Input\n    }],\n    isSelectable: [{\n      type: Input\n    }],\n    canHide: [{\n      type: Input\n    }],\n    isStart: [{\n      type: Input\n    }],\n    isEnd: [{\n      type: Input\n    }],\n    nzTreeNode: [{\n      type: Input\n    }],\n    nzShowLine: [{\n      type: Input\n    }],\n    nzShowExpand: [{\n      type: Input\n    }],\n    nzCheckable: [{\n      type: Input\n    }],\n    nzAsyncData: [{\n      type: Input\n    }],\n    nzHideUnMatched: [{\n      type: Input\n    }],\n    nzNoAnimation: [{\n      type: Input\n    }],\n    nzSelectMode: [{\n      type: Input\n    }],\n    nzShowIcon: [{\n      type: Input\n    }],\n    nzExpandedIcon: [{\n      type: Input\n    }],\n    nzTreeTemplate: [{\n      type: Input\n    }],\n    nzBeforeDrop: [{\n      type: Input\n    }],\n    nzSearchValue: [{\n      type: Input\n    }],\n    nzDraggable: [{\n      type: Input\n    }],\n    nzClick: [{\n      type: Output\n    }],\n    nzDblClick: [{\n      type: Output\n    }],\n    nzContextMenu: [{\n      type: Output\n    }],\n    nzCheckBoxChange: [{\n      type: Output\n    }],\n    nzExpandChange: [{\n      type: Output\n    }],\n    nzOnDragStart: [{\n      type: Output\n    }],\n    nzOnDragEnter: [{\n      type: Output\n    }],\n    nzOnDragOver: [{\n      type: Output\n    }],\n    nzOnDragLeave: [{\n      type: Output\n    }],\n    nzOnDrop: [{\n      type: Output\n    }],\n    nzOnDragEnd: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeService = /*#__PURE__*/function (_NzTreeBaseService) {\n  _inherits(NzTreeService, _NzTreeBaseService);\n\n  var _super = _createSuper(NzTreeService);\n\n  function NzTreeService() {\n    _classCallCheck(this, NzTreeService);\n\n    return _super.call(this);\n  }\n\n  return _createClass(NzTreeService);\n}(NzTreeBaseService);\n\nNzTreeService.ɵfac = function NzTreeService_Factory(t) {\n  return new (t || NzTreeService)();\n};\n\nNzTreeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NzTreeService,\n  factory: NzTreeService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction NzTreeServiceFactory(higherOrderService, treeService) {\n  return higherOrderService ? higherOrderService : treeService;\n}\n\nvar NZ_CONFIG_MODULE_NAME = 'tree';\n\nvar NzTreeComponent = /*#__PURE__*/function (_NzTreeBase) {\n  _inherits(NzTreeComponent, _NzTreeBase);\n\n  var _super2 = _createSuper(NzTreeComponent);\n\n  // Handle emit event end\n  function NzTreeComponent(nzTreeService, nzConfigService, cdr, directionality, noAnimation) {\n    var _this8;\n\n    _classCallCheck(this, NzTreeComponent);\n\n    _this8 = _super2.call(this, nzTreeService);\n    _this8.nzConfigService = nzConfigService;\n    _this8.cdr = cdr;\n    _this8.directionality = directionality;\n    _this8.noAnimation = noAnimation;\n    _this8._nzModuleName = NZ_CONFIG_MODULE_NAME;\n    _this8.nzShowIcon = false;\n    _this8.nzHideUnMatched = false;\n    _this8.nzBlockNode = false;\n    _this8.nzExpandAll = false;\n    _this8.nzSelectMode = false;\n    _this8.nzCheckStrictly = false;\n    _this8.nzShowExpand = true;\n    _this8.nzShowLine = false;\n    _this8.nzCheckable = false;\n    _this8.nzAsyncData = false;\n    _this8.nzDraggable = false;\n    _this8.nzMultiple = false;\n    _this8.nzVirtualItemSize = 28;\n    _this8.nzVirtualMaxBufferPx = 500;\n    _this8.nzVirtualMinBufferPx = 28;\n    _this8.nzVirtualHeight = null;\n    _this8.nzData = [];\n    _this8.nzExpandedKeys = [];\n    _this8.nzSelectedKeys = [];\n    _this8.nzCheckedKeys = [];\n    _this8.nzSearchValue = '';\n    _this8.nzFlattenNodes = [];\n    _this8.beforeInit = true;\n    _this8.dir = 'ltr';\n    _this8.nzExpandedKeysChange = new EventEmitter();\n    _this8.nzSelectedKeysChange = new EventEmitter();\n    _this8.nzCheckedKeysChange = new EventEmitter();\n    _this8.nzSearchValueChange = new EventEmitter();\n    _this8.nzClick = new EventEmitter();\n    _this8.nzDblClick = new EventEmitter();\n    _this8.nzContextMenu = new EventEmitter();\n    _this8.nzCheckBoxChange = new EventEmitter();\n    _this8.nzExpandChange = new EventEmitter();\n    _this8.nzOnDragStart = new EventEmitter();\n    _this8.nzOnDragEnter = new EventEmitter();\n    _this8.nzOnDragOver = new EventEmitter();\n    _this8.nzOnDragLeave = new EventEmitter();\n    _this8.nzOnDrop = new EventEmitter();\n    _this8.nzOnDragEnd = new EventEmitter();\n    _this8.HIDDEN_STYLE = {\n      width: 0,\n      height: 0,\n      display: 'flex',\n      overflow: 'hidden',\n      opacity: 0,\n      border: 0,\n      padding: 0,\n      margin: 0\n    };\n    _this8.HIDDEN_NODE_STYLE = {\n      position: 'absolute',\n      pointerEvents: 'none',\n      visibility: 'hidden',\n      height: 0,\n      overflow: 'hidden'\n    };\n    _this8.destroy$ = new Subject();\n\n    _this8.onChange = function () {\n      return null;\n    };\n\n    _this8.onTouched = function () {\n      return null;\n    };\n\n    return _this8;\n  }\n\n  _createClass(NzTreeComponent, [{\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.handleNzData(value);\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Render all properties of nzTree\n     *\n     * @param changes: all changes from @Input\n     */\n\n  }, {\n    key: \"renderTreeProperties\",\n    value: function renderTreeProperties(changes) {\n      var useDefaultExpandedKeys = false;\n      var expandAll = false;\n      var nzData = changes.nzData,\n          nzExpandedKeys = changes.nzExpandedKeys,\n          nzSelectedKeys = changes.nzSelectedKeys,\n          nzCheckedKeys = changes.nzCheckedKeys,\n          nzCheckStrictly = changes.nzCheckStrictly,\n          nzExpandAll = changes.nzExpandAll,\n          nzMultiple = changes.nzMultiple,\n          nzSearchValue = changes.nzSearchValue;\n\n      if (nzExpandAll) {\n        useDefaultExpandedKeys = true;\n        expandAll = this.nzExpandAll;\n      }\n\n      if (nzMultiple) {\n        this.nzTreeService.isMultiple = this.nzMultiple;\n      }\n\n      if (nzCheckStrictly) {\n        this.nzTreeService.isCheckStrictly = this.nzCheckStrictly;\n      }\n\n      if (nzData) {\n        this.handleNzData(this.nzData);\n      }\n\n      if (nzCheckedKeys) {\n        this.handleCheckedKeys(this.nzCheckedKeys);\n      }\n\n      if (nzCheckStrictly) {\n        this.handleCheckedKeys(null);\n      }\n\n      if (nzExpandedKeys || nzExpandAll) {\n        useDefaultExpandedKeys = true;\n        this.handleExpandedKeys(expandAll || this.nzExpandedKeys);\n      }\n\n      if (nzSelectedKeys) {\n        this.handleSelectedKeys(this.nzSelectedKeys, this.nzMultiple);\n      }\n\n      if (nzSearchValue) {\n        if (!(nzSearchValue.firstChange && !this.nzSearchValue)) {\n          useDefaultExpandedKeys = false;\n          this.handleSearchValue(nzSearchValue.currentValue, this.nzSearchFunc);\n          this.nzSearchValueChange.emit(this.nzTreeService.formatEvent('search', null, null));\n        }\n      } // flatten data\n\n\n      var currentExpandedKeys = this.getExpandedNodeList().map(function (v) {\n        return v.key;\n      });\n      var newExpandedKeys = useDefaultExpandedKeys ? expandAll || this.nzExpandedKeys : currentExpandedKeys;\n      this.handleFlattenNodes(this.nzTreeService.rootNodes, newExpandedKeys);\n    }\n  }, {\n    key: \"trackByFlattenNode\",\n    value: function trackByFlattenNode(_, node) {\n      return node.key;\n    } // Deal with properties\n\n    /**\n     * nzData\n     *\n     * @param value\n     */\n\n  }, {\n    key: \"handleNzData\",\n    value: function handleNzData(value) {\n      if (Array.isArray(value)) {\n        var data = this.coerceTreeNodes(value);\n        this.nzTreeService.initTree(data);\n      }\n    }\n  }, {\n    key: \"handleFlattenNodes\",\n    value: function handleFlattenNodes(data) {\n      var expandKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      this.nzTreeService.flattenTreeData(data, expandKeys);\n    }\n  }, {\n    key: \"handleCheckedKeys\",\n    value: function handleCheckedKeys(keys) {\n      this.nzTreeService.conductCheck(keys, this.nzCheckStrictly);\n    }\n  }, {\n    key: \"handleExpandedKeys\",\n    value: function handleExpandedKeys() {\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.nzTreeService.conductExpandedKeys(keys);\n    }\n  }, {\n    key: \"handleSelectedKeys\",\n    value: function handleSelectedKeys(keys, isMulti) {\n      this.nzTreeService.conductSelectedKeys(keys, isMulti);\n    }\n  }, {\n    key: \"handleSearchValue\",\n    value: function handleSearchValue(value, searchFunc) {\n      var _this9 = this;\n\n      var dataList = flattenTreeData(this.nzTreeService.rootNodes, true).map(function (v) {\n        return v.data;\n      });\n\n      var checkIfMatched = function checkIfMatched(node) {\n        if (searchFunc) {\n          return searchFunc(node.origin);\n        }\n\n        return !value || !node.title.toLowerCase().includes(value.toLowerCase()) ? false : true;\n      };\n\n      dataList.forEach(function (v) {\n        v.isMatched = checkIfMatched(v);\n        v.canHide = !v.isMatched;\n\n        if (!v.isMatched) {\n          v.setExpanded(false);\n\n          _this9.nzTreeService.setExpandedNodeList(v);\n        } else {\n          // expand\n          _this9.nzTreeService.expandNodeAllParentBySearch(v);\n        }\n\n        _this9.nzTreeService.setMatchedNodeList(v);\n      });\n    }\n    /**\n     * Handle emit event\n     *\n     * @param event\n     * handle each event\n     */\n\n  }, {\n    key: \"eventTriggerChanged\",\n    value: function eventTriggerChanged(event) {\n      var node = event.node;\n\n      switch (event.eventName) {\n        case 'expand':\n          this.renderTree();\n          this.nzExpandChange.emit(event);\n          break;\n\n        case 'click':\n          this.nzClick.emit(event);\n          break;\n\n        case 'dblclick':\n          this.nzDblClick.emit(event);\n          break;\n\n        case 'contextmenu':\n          this.nzContextMenu.emit(event);\n          break;\n\n        case 'check':\n          // Render checked state with nodes' property `isChecked`\n          this.nzTreeService.setCheckedNodeList(node);\n\n          if (!this.nzCheckStrictly) {\n            this.nzTreeService.conduct(node);\n          } // Cause check method will rerender list, so we need recover it and next the new event to user\n\n\n          var eventNext = this.nzTreeService.formatEvent('check', node, event.event);\n          this.nzCheckBoxChange.emit(eventNext);\n          break;\n\n        case 'dragstart':\n          // if node is expanded\n          if (node.isExpanded) {\n            node.setExpanded(!node.isExpanded);\n            this.renderTree();\n          }\n\n          this.nzOnDragStart.emit(event);\n          break;\n\n        case 'dragenter':\n          var selectedNode = this.nzTreeService.getSelectedNode();\n\n          if (selectedNode && selectedNode.key !== node.key && !node.isExpanded && !node.isLeaf) {\n            node.setExpanded(true);\n            this.renderTree();\n          }\n\n          this.nzOnDragEnter.emit(event);\n          break;\n\n        case 'dragover':\n          this.nzOnDragOver.emit(event);\n          break;\n\n        case 'dragleave':\n          this.nzOnDragLeave.emit(event);\n          break;\n\n        case 'dragend':\n          this.nzOnDragEnd.emit(event);\n          break;\n\n        case 'drop':\n          this.renderTree();\n          this.nzOnDrop.emit(event);\n          break;\n      }\n    }\n    /**\n     * Click expand icon\n     */\n\n  }, {\n    key: \"renderTree\",\n    value: function renderTree() {\n      this.handleFlattenNodes(this.nzTreeService.rootNodes, this.getExpandedNodeList().map(function (v) {\n        return v.key;\n      }));\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this10 = this;\n\n      var _a;\n\n      this.nzTreeService.flattenNodes$.pipe(takeUntil(this.destroy$)).subscribe(function (data) {\n        _this10.nzFlattenNodes = data;\n\n        _this10.cdr.markForCheck();\n      });\n      this.dir = this.directionality.value;\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n        _this10.dir = direction;\n\n        _this10.cdr.detectChanges();\n      });\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.renderTreeProperties(changes);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.beforeInit = false;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }]);\n\n  return NzTreeComponent;\n}(NzTreeBase);\n\nNzTreeComponent.ɵfac = function NzTreeComponent_Factory(t) {\n  return new (t || NzTreeComponent)(i0.ɵɵdirectiveInject(i1.NzTreeBaseService), i0.ɵɵdirectiveInject(i2$1.NzConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3$1.Directionality, 8), i0.ɵɵdirectiveInject(i4$1.NzNoAnimationDirective, 9));\n};\n\nNzTreeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeComponent,\n  selectors: [[\"nz-tree\"]],\n  contentQueries: function NzTreeComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c2, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nzTreeTemplateChild = _t.first);\n    }\n  },\n  viewQuery: function NzTreeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5, CdkVirtualScrollViewport);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);\n    }\n  },\n  hostVars: 20,\n  hostBindings: function NzTreeComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-select-tree\", ctx.nzSelectMode)(\"ant-select-tree-show-line\", ctx.nzSelectMode && ctx.nzShowLine)(\"ant-select-tree-icon-hide\", ctx.nzSelectMode && !ctx.nzShowIcon)(\"ant-select-tree-block-node\", ctx.nzSelectMode && ctx.nzBlockNode)(\"ant-tree\", !ctx.nzSelectMode)(\"ant-tree-rtl\", ctx.dir === \"rtl\")(\"ant-tree-show-line\", !ctx.nzSelectMode && ctx.nzShowLine)(\"ant-tree-icon-hide\", !ctx.nzSelectMode && !ctx.nzShowIcon)(\"ant-tree-block-node\", !ctx.nzSelectMode && ctx.nzBlockNode)(\"draggable-tree\", ctx.nzDraggable);\n    }\n  },\n  inputs: {\n    nzShowIcon: \"nzShowIcon\",\n    nzHideUnMatched: \"nzHideUnMatched\",\n    nzBlockNode: \"nzBlockNode\",\n    nzExpandAll: \"nzExpandAll\",\n    nzSelectMode: \"nzSelectMode\",\n    nzCheckStrictly: \"nzCheckStrictly\",\n    nzShowExpand: \"nzShowExpand\",\n    nzShowLine: \"nzShowLine\",\n    nzCheckable: \"nzCheckable\",\n    nzAsyncData: \"nzAsyncData\",\n    nzDraggable: \"nzDraggable\",\n    nzMultiple: \"nzMultiple\",\n    nzExpandedIcon: \"nzExpandedIcon\",\n    nzVirtualItemSize: \"nzVirtualItemSize\",\n    nzVirtualMaxBufferPx: \"nzVirtualMaxBufferPx\",\n    nzVirtualMinBufferPx: \"nzVirtualMinBufferPx\",\n    nzVirtualHeight: \"nzVirtualHeight\",\n    nzTreeTemplate: \"nzTreeTemplate\",\n    nzBeforeDrop: \"nzBeforeDrop\",\n    nzData: \"nzData\",\n    nzExpandedKeys: \"nzExpandedKeys\",\n    nzSelectedKeys: \"nzSelectedKeys\",\n    nzCheckedKeys: \"nzCheckedKeys\",\n    nzSearchValue: \"nzSearchValue\",\n    nzSearchFunc: \"nzSearchFunc\"\n  },\n  outputs: {\n    nzExpandedKeysChange: \"nzExpandedKeysChange\",\n    nzSelectedKeysChange: \"nzSelectedKeysChange\",\n    nzCheckedKeysChange: \"nzCheckedKeysChange\",\n    nzSearchValueChange: \"nzSearchValueChange\",\n    nzClick: \"nzClick\",\n    nzDblClick: \"nzDblClick\",\n    nzContextMenu: \"nzContextMenu\",\n    nzCheckBoxChange: \"nzCheckBoxChange\",\n    nzExpandChange: \"nzExpandChange\",\n    nzOnDragStart: \"nzOnDragStart\",\n    nzOnDragEnter: \"nzOnDragEnter\",\n    nzOnDragOver: \"nzOnDragOver\",\n    nzOnDragLeave: \"nzOnDragLeave\",\n    nzOnDrop: \"nzOnDrop\",\n    nzOnDragEnd: \"nzOnDragEnd\"\n  },\n  exportAs: [\"nzTree\"],\n  features: [i0.ɵɵProvidersFeature([NzTreeService, {\n    provide: NzTreeBaseService,\n    useFactory: NzTreeServiceFactory,\n    deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n  }, {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return NzTreeComponent;\n    }),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 10,\n  vars: 6,\n  consts: [[3, \"ngStyle\"], [1, \"ant-tree-treenode\", 3, \"ngStyle\"], [1, \"ant-tree-indent\"], [1, \"ant-tree-indent-unit\"], [1, \"ant-tree-list\", 2, \"position\", \"relative\"], [3, \"ant-select-tree-list-holder-inner\", \"ant-tree-list-holder-inner\", \"itemSize\", \"minBufferPx\", \"maxBufferPx\", \"height\", 4, \"ngIf\"], [3, \"ant-select-tree-list-holder-inner\", \"ant-tree-list-holder-inner\", \"nzNoAnimation\", 4, \"ngIf\"], [\"nodeTemplate\", \"\"], [3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\", \"cdkVirtualForTrackBy\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"nzNoAnimation\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"builtin\", \"\", 3, \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"isStart\", \"isEnd\", \"isChecked\", \"isHalfChecked\", \"isDisableCheckbox\", \"isSelectable\", \"canHide\", \"nzTreeNode\", \"nzSelectMode\", \"nzShowLine\", \"nzExpandedIcon\", \"nzDraggable\", \"nzCheckable\", \"nzShowExpand\", \"nzAsyncData\", \"nzSearchValue\", \"nzHideUnMatched\", \"nzBeforeDrop\", \"nzShowIcon\", \"nzTreeTemplate\", \"nzExpandChange\", \"nzClick\", \"nzDblClick\", \"nzContextMenu\", \"nzCheckBoxChange\", \"nzOnDragStart\", \"nzOnDragEnter\", \"nzOnDragOver\", \"nzOnDragLeave\", \"nzOnDragEnd\", \"nzOnDrop\"]],\n  template: function NzTreeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"input\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2);\n      i0.ɵɵelement(4, \"div\", 3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵtemplate(6, NzTreeComponent_cdk_virtual_scroll_viewport_6_Template, 2, 11, \"cdk-virtual-scroll-viewport\", 5);\n      i0.ɵɵtemplate(7, NzTreeComponent_div_7_Template, 2, 9, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, NzTreeComponent_ng_template_8_Template, 1, 28, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx.HIDDEN_STYLE);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx.HIDDEN_NODE_STYLE);\n      i0.ɵɵadvance(3);\n      i0.ɵɵclassProp(\"ant-select-tree-list\", ctx.nzSelectMode);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.nzVirtualHeight);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.nzVirtualHeight);\n    }\n  },\n  directives: [i5.CdkVirtualScrollViewport, NzTreeNodeBuiltinComponent, i7.NgStyle, i7.NgIf, i5.CdkFixedSizeVirtualScroll, i5.CdkVirtualForOf, i7.NgTemplateOutlet, i4$1.NzNoAnimationDirective, i7.NgForOf],\n  encapsulation: 2,\n  data: {\n    animation: [treeCollapseMotion]\n  },\n  changeDetection: 0\n});\n\n__decorate([InputBoolean(), WithConfig()], NzTreeComponent.prototype, \"nzShowIcon\", void 0);\n\n__decorate([InputBoolean(), WithConfig()], NzTreeComponent.prototype, \"nzHideUnMatched\", void 0);\n\n__decorate([InputBoolean(), WithConfig()], NzTreeComponent.prototype, \"nzBlockNode\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzExpandAll\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzSelectMode\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzCheckStrictly\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzShowExpand\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzShowLine\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzCheckable\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzAsyncData\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzDraggable\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzMultiple\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree',\n      exportAs: 'nzTree',\n      animations: [treeCollapseMotion],\n      template: \"\\n    <div>\\n      <input [ngStyle]=\\\"HIDDEN_STYLE\\\" />\\n    </div>\\n    <div class=\\\"ant-tree-treenode\\\" [ngStyle]=\\\"HIDDEN_NODE_STYLE\\\">\\n      <div class=\\\"ant-tree-indent\\\">\\n        <div class=\\\"ant-tree-indent-unit\\\"></div>\\n      </div>\\n    </div>\\n    <div class=\\\"ant-tree-list\\\" [class.ant-select-tree-list]=\\\"nzSelectMode\\\" style=\\\"position: relative\\\">\\n      <cdk-virtual-scroll-viewport\\n        *ngIf=\\\"nzVirtualHeight\\\"\\n        [class.ant-select-tree-list-holder-inner]=\\\"nzSelectMode\\\"\\n        [class.ant-tree-list-holder-inner]=\\\"!nzSelectMode\\\"\\n        [itemSize]=\\\"nzVirtualItemSize\\\"\\n        [minBufferPx]=\\\"nzVirtualMinBufferPx\\\"\\n        [maxBufferPx]=\\\"nzVirtualMaxBufferPx\\\"\\n        [style.height]=\\\"nzVirtualHeight\\\"\\n      >\\n        <ng-container *cdkVirtualFor=\\\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"nodeTemplate\\\" [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"></ng-template>\\n        </ng-container>\\n      </cdk-virtual-scroll-viewport>\\n\\n      <div\\n        *ngIf=\\\"!nzVirtualHeight\\\"\\n        [class.ant-select-tree-list-holder-inner]=\\\"nzSelectMode\\\"\\n        [class.ant-tree-list-holder-inner]=\\\"!nzSelectMode\\\"\\n        [@.disabled]=\\\"beforeInit || noAnimation?.nzNoAnimation\\\"\\n        [nzNoAnimation]=\\\"noAnimation?.nzNoAnimation\\\"\\n        [@treeCollapseMotion]=\\\"nzFlattenNodes.length\\\"\\n      >\\n        <ng-container *ngFor=\\\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"nodeTemplate\\\" [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"></ng-template>\\n        </ng-container>\\n      </div>\\n    </div>\\n    <ng-template #nodeTemplate let-treeNode>\\n      <nz-tree-node\\n        builtin\\n        [icon]=\\\"treeNode.icon\\\"\\n        [title]=\\\"treeNode.title\\\"\\n        [isLoading]=\\\"treeNode.isLoading\\\"\\n        [isSelected]=\\\"treeNode.isSelected\\\"\\n        [isDisabled]=\\\"treeNode.isDisabled\\\"\\n        [isMatched]=\\\"treeNode.isMatched\\\"\\n        [isExpanded]=\\\"treeNode.isExpanded\\\"\\n        [isLeaf]=\\\"treeNode.isLeaf\\\"\\n        [isStart]=\\\"treeNode.isStart\\\"\\n        [isEnd]=\\\"treeNode.isEnd\\\"\\n        [isChecked]=\\\"treeNode.isChecked\\\"\\n        [isHalfChecked]=\\\"treeNode.isHalfChecked\\\"\\n        [isDisableCheckbox]=\\\"treeNode.isDisableCheckbox\\\"\\n        [isSelectable]=\\\"treeNode.isSelectable\\\"\\n        [canHide]=\\\"treeNode.canHide\\\"\\n        [nzTreeNode]=\\\"treeNode\\\"\\n        [nzSelectMode]=\\\"nzSelectMode\\\"\\n        [nzShowLine]=\\\"nzShowLine\\\"\\n        [nzExpandedIcon]=\\\"nzExpandedIcon\\\"\\n        [nzDraggable]=\\\"nzDraggable\\\"\\n        [nzCheckable]=\\\"nzCheckable\\\"\\n        [nzShowExpand]=\\\"nzShowExpand\\\"\\n        [nzAsyncData]=\\\"nzAsyncData\\\"\\n        [nzSearchValue]=\\\"nzSearchValue\\\"\\n        [nzHideUnMatched]=\\\"nzHideUnMatched\\\"\\n        [nzBeforeDrop]=\\\"nzBeforeDrop\\\"\\n        [nzShowIcon]=\\\"nzShowIcon\\\"\\n        [nzTreeTemplate]=\\\"nzTreeTemplate || nzTreeTemplateChild\\\"\\n        (nzExpandChange)=\\\"eventTriggerChanged($event)\\\"\\n        (nzClick)=\\\"eventTriggerChanged($event)\\\"\\n        (nzDblClick)=\\\"eventTriggerChanged($event)\\\"\\n        (nzContextMenu)=\\\"eventTriggerChanged($event)\\\"\\n        (nzCheckBoxChange)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDragStart)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDragEnter)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDragOver)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDragLeave)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDragEnd)=\\\"eventTriggerChanged($event)\\\"\\n        (nzOnDrop)=\\\"eventTriggerChanged($event)\\\"\\n      ></nz-tree-node>\\n    </ng-template>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [NzTreeService, {\n        provide: NzTreeBaseService,\n        useFactory: NzTreeServiceFactory,\n        deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n      }, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return NzTreeComponent;\n        }),\n        multi: true\n      }],\n      host: {\n        '[class.ant-select-tree]': \"nzSelectMode\",\n        '[class.ant-select-tree-show-line]': \"nzSelectMode && nzShowLine\",\n        '[class.ant-select-tree-icon-hide]': \"nzSelectMode && !nzShowIcon\",\n        '[class.ant-select-tree-block-node]': \"nzSelectMode && nzBlockNode\",\n        '[class.ant-tree]': \"!nzSelectMode\",\n        '[class.ant-tree-rtl]': \"dir === 'rtl'\",\n        '[class.ant-tree-show-line]': \"!nzSelectMode && nzShowLine\",\n        '[class.ant-tree-icon-hide]': \"!nzSelectMode && !nzShowIcon\",\n        '[class.ant-tree-block-node]': \"!nzSelectMode && nzBlockNode\",\n        '[class.draggable-tree]': \"nzDraggable\"\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1.NzTreeBaseService\n    }, {\n      type: i2$1.NzConfigService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i3$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4$1.NzNoAnimationDirective,\n      decorators: [{\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    nzShowIcon: [{\n      type: Input\n    }],\n    nzHideUnMatched: [{\n      type: Input\n    }],\n    nzBlockNode: [{\n      type: Input\n    }],\n    nzExpandAll: [{\n      type: Input\n    }],\n    nzSelectMode: [{\n      type: Input\n    }],\n    nzCheckStrictly: [{\n      type: Input\n    }],\n    nzShowExpand: [{\n      type: Input\n    }],\n    nzShowLine: [{\n      type: Input\n    }],\n    nzCheckable: [{\n      type: Input\n    }],\n    nzAsyncData: [{\n      type: Input\n    }],\n    nzDraggable: [{\n      type: Input\n    }],\n    nzMultiple: [{\n      type: Input\n    }],\n    nzExpandedIcon: [{\n      type: Input\n    }],\n    nzVirtualItemSize: [{\n      type: Input\n    }],\n    nzVirtualMaxBufferPx: [{\n      type: Input\n    }],\n    nzVirtualMinBufferPx: [{\n      type: Input\n    }],\n    nzVirtualHeight: [{\n      type: Input\n    }],\n    nzTreeTemplate: [{\n      type: Input\n    }],\n    nzBeforeDrop: [{\n      type: Input\n    }],\n    nzData: [{\n      type: Input\n    }],\n    nzExpandedKeys: [{\n      type: Input\n    }],\n    nzSelectedKeys: [{\n      type: Input\n    }],\n    nzCheckedKeys: [{\n      type: Input\n    }],\n    nzSearchValue: [{\n      type: Input\n    }],\n    nzSearchFunc: [{\n      type: Input\n    }],\n    nzTreeTemplateChild: [{\n      type: ContentChild,\n      args: ['nzTreeTemplate', {\n        static: true\n      }]\n    }],\n    cdkVirtualScrollViewport: [{\n      type: ViewChild,\n      args: [CdkVirtualScrollViewport, {\n        read: CdkVirtualScrollViewport\n      }]\n    }],\n    nzExpandedKeysChange: [{\n      type: Output\n    }],\n    nzSelectedKeysChange: [{\n      type: Output\n    }],\n    nzCheckedKeysChange: [{\n      type: Output\n    }],\n    nzSearchValueChange: [{\n      type: Output\n    }],\n    nzClick: [{\n      type: Output\n    }],\n    nzDblClick: [{\n      type: Output\n    }],\n    nzContextMenu: [{\n      type: Output\n    }],\n    nzCheckBoxChange: [{\n      type: Output\n    }],\n    nzExpandChange: [{\n      type: Output\n    }],\n    nzOnDragStart: [{\n      type: Output\n    }],\n    nzOnDragEnter: [{\n      type: Output\n    }],\n    nzOnDragOver: [{\n      type: Output\n    }],\n    nzOnDragLeave: [{\n      type: Output\n    }],\n    nzOnDrop: [{\n      type: Output\n    }],\n    nzOnDragEnd: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeModule = /*#__PURE__*/_createClass(function NzTreeModule() {\n  _classCallCheck(this, NzTreeModule);\n});\n\nNzTreeModule.ɵfac = function NzTreeModule_Factory(t) {\n  return new (t || NzTreeModule)();\n};\n\nNzTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzTreeModule,\n  declarations: [NzTreeComponent, NzTreeNodeBuiltinComponent, NzTreeIndentComponent, NzTreeNodeSwitcherComponent, NzTreeNodeBuiltinCheckboxComponent, NzTreeNodeTitleComponent, NzTreeDropIndicatorComponent],\n  imports: [BidiModule, CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule],\n  exports: [NzTreeComponent, NzTreeNodeBuiltinComponent, NzTreeIndentComponent]\n});\nNzTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[BidiModule, CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule],\n      declarations: [NzTreeComponent, NzTreeNodeBuiltinComponent, NzTreeIndentComponent, NzTreeNodeSwitcherComponent, NzTreeNodeBuiltinCheckboxComponent, NzTreeNodeTitleComponent, NzTreeDropIndicatorComponent],\n      exports: [NzTreeComponent, NzTreeNodeBuiltinComponent, NzTreeIndentComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzTreeComponent, NzTreeIndentComponent, NzTreeModule, NzTreeNodeBuiltinCheckboxComponent, NzTreeNodeBuiltinComponent, NzTreeNodeSwitcherComponent, NzTreeNodeTitleComponent, NzTreeService, NzTreeServiceFactory }; //# sourceMappingURL=ng-zorro-antd-tree.mjs.map","map":null,"metadata":{},"sourceType":"module"}